//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace NinjaOne.V2
{
  using System = global::System;

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class Client
  {
#pragma warning disable 8618 // Set by constructor via BaseUrl property
    private string _baseUrl;
#pragma warning restore 8618 // Set by constructor via BaseUrl property
    private System.Net.Http.HttpClient _httpClient;
    private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

    public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
    {
      BaseUrl = baseUrl;
      _httpClient = httpClient;
    }

    private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set
      {
        _baseUrl = value;
        if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
          _baseUrl += '/';
      }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>
    /// Reset alert/condition and provide custom data for activity
    /// </summary>
    /// <remarks>
    /// Resets alert/condition by UID
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse ResetAlertSetActivityData(System.Guid uid, object body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await ResetAlertSetActivityDataAsync(uid, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Reset alert/condition and provide custom data for activity
    /// </summary>
    /// <remarks>
    /// Resets alert/condition by UID
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> ResetAlertSetActivityDataAsync(System.Guid uid, object body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (uid == null)
        throw new System.ArgumentNullException("uid");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/alert/{uid}/reset"
          urlBuilder_.Append("v2/alert/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/reset");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Reset alert/condition
    /// </summary>
    /// <remarks>
    /// Resets alert/condition by UID
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse ResetAlert(System.Guid uid)
    {
      return System.Threading.Tasks.Task.Run(async () => await ResetAlertAsync(uid, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Reset alert/condition
    /// </summary>
    /// <remarks>
    /// Resets alert/condition by UID
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> ResetAlertAsync(System.Guid uid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (uid == null)
        throw new System.ArgumentNullException("uid");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/alert/{uid}"
          urlBuilder_.Append("v2/alert/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Approve/Reject devices
    /// </summary>
    /// <remarks>
    /// Approve or reject devices that are waiting for approval
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse NodeApprovalOperation(Mode mode, DeviceIDList body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await NodeApprovalOperationAsync(mode, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Approve/Reject devices
    /// </summary>
    /// <remarks>
    /// Approve or reject devices that are waiting for approval
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> NodeApprovalOperationAsync(Mode mode, DeviceIDList body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (mode == null)
        throw new System.ArgumentNullException("mode");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/devices/approval/{mode}"
          urlBuilder_.Append("v2/devices/approval/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List organizations
    /// </summary>
    /// <remarks>
    /// Returns list of organizations (Brief mode)
    /// </remarks>
    /// <param name="pageSize">Limit number of organizations to return</param>
    /// <param name="after">Last Organization Identifier from previous page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Organization> GetOrganizations(int? pageSize = null, int? after = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetOrganizationsAsync(pageSize, after, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List organizations
    /// </summary>
    /// <remarks>
    /// Returns list of organizations (Brief mode)
    /// </remarks>
    /// <param name="pageSize">Limit number of organizations to return</param>
    /// <param name="after">Last Organization Identifier from previous page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Organization>> GetOrganizationsAsync(int? pageSize = null, int? after = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organizations"
          urlBuilder_.Append("v2/organizations");
          urlBuilder_.Append('?');
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (after != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("after")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Organization>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Create new organization
    /// </summary>
    /// <remarks>
    /// Creates new organization with optional list of locations and policy mappings.
    /// <br/>Template organization ID can be specified to copy various settings
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual OrganizationDetailed CreateOrganization(int? templateOrganizationId = null, OrganizationWithLocationsAndPolicyAssignmentsModel body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreateOrganizationAsync(templateOrganizationId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create new organization
    /// </summary>
    /// <remarks>
    /// Creates new organization with optional list of locations and policy mappings.
    /// <br/>Template organization ID can be specified to copy various settings
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OrganizationDetailed> CreateOrganizationAsync(int? templateOrganizationId = null, OrganizationWithLocationsAndPolicyAssignmentsModel body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organizations"
          urlBuilder_.Append("v2/organizations");
          urlBuilder_.Append('?');
          if (templateOrganizationId != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("templateOrganizationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(templateOrganizationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<OrganizationDetailed>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update API Webhook configuration
    /// </summary>
    /// <remarks>
    /// Creates or updates Webhook configuration for current application/client
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual void ConfigureWebhook(WebhookConfiguration body = null)
    {
      System.Threading.Tasks.Task.Run(async () => await ConfigureWebhookAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update API Webhook configuration
    /// </summary>
    /// <remarks>
    /// Creates or updates Webhook configuration for current application/client
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task ConfigureWebhookAsync(WebhookConfiguration body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/webhook"
          urlBuilder_.Append("v2/webhook");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 204)
            {
              return;
            }
            else
            if (status_ == 403)
            {
              string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("Only system administrators can configure webhooks", status_, responseText_, headers_, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Remove Webhook API channel
    /// </summary>
    /// <remarks>
    /// Disables Webhook configuration for current application/client
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual void DisableWebhook()
    {
      System.Threading.Tasks.Task.Run(async () => await DisableWebhookAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Remove Webhook API channel
    /// </summary>
    /// <remarks>
    /// Disables Webhook configuration for current application/client
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task DisableWebhookAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/webhook"
          urlBuilder_.Append("v2/webhook");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 204)
            {
              return;
            }
            else
            if (status_ == 403)
            {
              string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("Different PSA is already configured", status_, responseText_, headers_, null);
            }
            else
            if (status_ == 500)
            {
              string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("Failed to disable PSA", status_, responseText_, headers_, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List all organization documents with field values
    /// </summary>
    /// <remarks>
    /// List all organization documents with field values
    /// </remarks>
    /// <returns>Returns a list of all organization documents with field values grouped by organization identifier</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<ClientDocumentWithAttributeValuesPublicApiDTO> GetClientDocumentsWithAttributeValues(GroupBy? groupBy = null, string organizationIds = null, string templateIds = null, string templateName = null, string documentName = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetClientDocumentsWithAttributeValuesAsync(groupBy, organizationIds, templateIds, templateName, documentName, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List all organization documents with field values
    /// </summary>
    /// <remarks>
    /// List all organization documents with field values
    /// </remarks>
    /// <returns>Returns a list of all organization documents with field values grouped by organization identifier</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientDocumentWithAttributeValuesPublicApiDTO>> GetClientDocumentsWithAttributeValuesAsync(GroupBy? groupBy = null, string organizationIds = null, string templateIds = null, string templateName = null, string documentName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/documents"
          urlBuilder_.Append("v2/organization/documents");
          urlBuilder_.Append('?');
          if (groupBy != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("groupBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(groupBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (organizationIds != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("organizationIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(organizationIds, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (templateIds != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("templateIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(templateIds, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (templateName != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("templateName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(templateName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (documentName != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("documentName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(documentName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientDocumentWithAttributeValuesPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Create organization documents
    /// </summary>
    /// <remarks>
    /// Creates organization documents and returns the documents created
    /// </remarks>
    /// <returns>Returns a list of created organization documents with field values</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<ClientDocumentWithAttributeValuesPublicApiDTO> CreateOrganizationDocuments(System.Collections.Generic.IEnumerable<ClientDocumentWithAttributeValuesBulkCreatePublicApiRequest> body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreateOrganizationDocumentsAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create organization documents
    /// </summary>
    /// <remarks>
    /// Creates organization documents and returns the documents created
    /// </remarks>
    /// <returns>Returns a list of created organization documents with field values</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientDocumentWithAttributeValuesPublicApiDTO>> CreateOrganizationDocumentsAsync(System.Collections.Generic.IEnumerable<ClientDocumentWithAttributeValuesBulkCreatePublicApiRequest> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/documents"
          urlBuilder_.Append("v2/organization/documents");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientDocumentWithAttributeValuesPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update organization documents
    /// </summary>
    /// <remarks>
    /// Updates organization documents and returns the documents updated
    /// </remarks>
    /// <returns>Returns a list of updated organization documents with field values</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<ClientDocumentWithUpdatedAttributeValuesPublicApiDTO> UpdateOrganizationDocuments(System.Collections.Generic.IEnumerable<ClientDocumentWithAttributeValuesBulkUpdatePublicApiRequest> body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateOrganizationDocumentsAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update organization documents
    /// </summary>
    /// <remarks>
    /// Updates organization documents and returns the documents updated
    /// </remarks>
    /// <returns>Returns a list of updated organization documents with field values</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientDocumentWithUpdatedAttributeValuesPublicApiDTO>> UpdateOrganizationDocumentsAsync(System.Collections.Generic.IEnumerable<ClientDocumentWithAttributeValuesBulkUpdatePublicApiRequest> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PATCH");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/documents"
          urlBuilder_.Append("v2/organization/documents");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientDocumentWithUpdatedAttributeValuesPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Create organization document
    /// </summary>
    /// <remarks>
    /// Creates an organization document and returns the document created
    /// </remarks>
    /// <param name="organizationId">Organization identifier</param>
    /// <param name="documentTemplateId">Document template identifier</param>
    /// <returns>Returns the organization document created</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual ClientDocumentWithAttributeValuesPublicApiDTO CreateOrganizationDocument(int organizationId, int documentTemplateId, ClientDocumentWithAttributeValuesPublicApiRequest body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreateOrganizationDocumentAsync(organizationId, documentTemplateId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create organization document
    /// </summary>
    /// <remarks>
    /// Creates an organization document and returns the document created
    /// </remarks>
    /// <param name="organizationId">Organization identifier</param>
    /// <param name="documentTemplateId">Document template identifier</param>
    /// <returns>Returns the organization document created</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<ClientDocumentWithAttributeValuesPublicApiDTO> CreateOrganizationDocumentAsync(int organizationId, int documentTemplateId, ClientDocumentWithAttributeValuesPublicApiRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (organizationId == null)
        throw new System.ArgumentNullException("organizationId");

      if (documentTemplateId == null)
        throw new System.ArgumentNullException("documentTemplateId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{organizationId}/template/{documentTemplateId}/document"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organizationId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/template/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentTemplateId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/document");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<ClientDocumentWithAttributeValuesPublicApiDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update organization document
    /// </summary>
    /// <remarks>
    /// Updates an organization document and returns the updated version
    /// </remarks>
    /// <param name="organizationId">Organization identifier</param>
    /// <param name="documentId">Organization document identifier</param>
    /// <returns>Returns the organization document updated</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual ClientDocumentWithUpdatedAttributeValuesPublicApiDTO UpdateOrganizationDocument(int organizationId, int documentId, ClientDocumentWithAttributeValuesPublicApiRequest body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateOrganizationDocumentAsync(organizationId, documentId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update organization document
    /// </summary>
    /// <remarks>
    /// Updates an organization document and returns the updated version
    /// </remarks>
    /// <param name="organizationId">Organization identifier</param>
    /// <param name="documentId">Organization document identifier</param>
    /// <returns>Returns the organization document updated</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<ClientDocumentWithUpdatedAttributeValuesPublicApiDTO> UpdateOrganizationDocumentAsync(int organizationId, int documentId, ClientDocumentWithAttributeValuesPublicApiRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (organizationId == null)
        throw new System.ArgumentNullException("organizationId");

      if (documentId == null)
        throw new System.ArgumentNullException("documentId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{organizationId}/document/{documentId}"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organizationId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/document/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<ClientDocumentWithUpdatedAttributeValuesPublicApiDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Delete an organization document
    /// </summary>
    /// <remarks>
    /// Deletes an organization document by id
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual void DeleteClientDocument(int clientDocumentId)
    {
      System.Threading.Tasks.Task.Run(async () => await DeleteClientDocumentAsync(clientDocumentId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an organization document
    /// </summary>
    /// <remarks>
    /// Deletes an organization document by id
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task DeleteClientDocumentAsync(int clientDocumentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (clientDocumentId == null)
        throw new System.ArgumentNullException("clientDocumentId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/document/{clientDocumentId}"
          urlBuilder_.Append("v2/organization/document/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(clientDocumentId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 204)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List organization documents with field values
    /// </summary>
    /// <remarks>
    /// List organization documents with field values
    /// </remarks>
    /// <param name="organizationId">Organization identifier</param>
    /// <returns>Returns a list of organization documents with field values</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<ClientDocumentWithAttributeValuesPublicApiDTO> GetOrganizationDocuments(int organizationId)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetOrganizationDocumentsAsync(organizationId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List organization documents with field values
    /// </summary>
    /// <remarks>
    /// List organization documents with field values
    /// </remarks>
    /// <param name="organizationId">Organization identifier</param>
    /// <returns>Returns a list of organization documents with field values</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientDocumentWithAttributeValuesPublicApiDTO>> GetOrganizationDocumentsAsync(int organizationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (organizationId == null)
        throw new System.ArgumentNullException("organizationId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{organizationId}/documents"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organizationId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/documents");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClientDocumentWithAttributeValuesPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List document templates with fields
    /// </summary>
    /// <remarks>
    /// List document templates with fields
    /// </remarks>
    /// <returns>Returns a list of all document templates with fields</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<DocumentTemplatePublicApiDTO> GetDocumentTemplatesWithAttributes()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDocumentTemplatesWithAttributesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List document templates with fields
    /// </summary>
    /// <remarks>
    /// List document templates with fields
    /// </remarks>
    /// <returns>Returns a list of all document templates with fields</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DocumentTemplatePublicApiDTO>> GetDocumentTemplatesWithAttributesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/document-templates"
          urlBuilder_.Append("v2/document-templates");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DocumentTemplatePublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Create document template
    /// </summary>
    /// <remarks>
    /// Create document template
    /// </remarks>
    /// <returns>Returns the document template created</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual DocumentTemplatePublicApiDTO CreateDocumentTemplate(NewDocumentTemplatePublicApiRequest body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreateDocumentTemplateAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create document template
    /// </summary>
    /// <remarks>
    /// Create document template
    /// </remarks>
    /// <returns>Returns the document template created</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<DocumentTemplatePublicApiDTO> CreateDocumentTemplateAsync(NewDocumentTemplatePublicApiRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/document-templates"
          urlBuilder_.Append("v2/document-templates");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<DocumentTemplatePublicApiDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Get document template
    /// </summary>
    /// <remarks>
    /// Get document template
    /// </remarks>
    /// <returns>Returns a document template</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual DocumentTemplatePublicApiDTO GetDocumentTemplate(int documentTemplateId)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDocumentTemplateAsync(documentTemplateId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get document template
    /// </summary>
    /// <remarks>
    /// Get document template
    /// </remarks>
    /// <returns>Returns a document template</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<DocumentTemplatePublicApiDTO> GetDocumentTemplateAsync(int documentTemplateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (documentTemplateId == null)
        throw new System.ArgumentNullException("documentTemplateId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/document-templates/{documentTemplateId}"
          urlBuilder_.Append("v2/document-templates/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentTemplateId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<DocumentTemplatePublicApiDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update document template
    /// </summary>
    /// <remarks>
    /// Updates a document template by id
    /// </remarks>
    /// <returns>Returns the document template updated</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual DocumentTemplatePublicApiDTO UpdateDocumentTemplate(int documentTemplateId, UpdateDocumentTemplatePublicApiRequest body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateDocumentTemplateAsync(documentTemplateId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update document template
    /// </summary>
    /// <remarks>
    /// Updates a document template by id
    /// </remarks>
    /// <returns>Returns the document template updated</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<DocumentTemplatePublicApiDTO> UpdateDocumentTemplateAsync(int documentTemplateId, UpdateDocumentTemplatePublicApiRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (documentTemplateId == null)
        throw new System.ArgumentNullException("documentTemplateId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/document-templates/{documentTemplateId}"
          urlBuilder_.Append("v2/document-templates/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentTemplateId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<DocumentTemplatePublicApiDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Delete a document template
    /// </summary>
    /// <remarks>
    /// Deletes a document template by id
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual void DeleteDocumentTemplate(int documentTemplateId)
    {
      System.Threading.Tasks.Task.Run(async () => await DeleteDocumentTemplateAsync(documentTemplateId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a document template
    /// </summary>
    /// <remarks>
    /// Deletes a document template by id
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task DeleteDocumentTemplateAsync(int documentTemplateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (documentTemplateId == null)
        throw new System.ArgumentNullException("documentTemplateId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/document-templates/{documentTemplateId}"
          urlBuilder_.Append("v2/document-templates/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentTemplateId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 204)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List host entity related items by scope
    /// </summary>
    /// <remarks>
    /// List related items for a specific host entity filterable by scope
    /// </remarks>
    /// <returns>Returns list of the related items for an entity filterable by scope</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<RelatedItemPublicApiDTO> GetRelatedItemsForHostEntity(EntityType entityType, int entityId, Scope? scope = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetRelatedItemsForHostEntityAsync(entityType, entityId, scope, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List host entity related items by scope
    /// </summary>
    /// <remarks>
    /// List related items for a specific host entity filterable by scope
    /// </remarks>
    /// <returns>Returns list of the related items for an entity filterable by scope</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>> GetRelatedItemsForHostEntityAsync(EntityType entityType, int entityId, Scope? scope = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (entityType == null)
        throw new System.ArgumentNullException("entityType");

      if (entityId == null)
        throw new System.ArgumentNullException("entityId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items/with-entity/{entityType}/{entityId}"
          urlBuilder_.Append("v2/related-items/with-entity/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append('/');
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append('?');
          if (scope != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List host entity type related items
    /// </summary>
    /// <remarks>
    /// List relations and references for a host entity type
    /// </remarks>
    /// <returns>Returns a list of relations and references for an entity type</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<RelatedItemPublicApiDTO> GetRelatedItemsWithHostEntityType(EntityType2 entityType)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetRelatedItemsWithHostEntityTypeAsync(entityType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List host entity type related items
    /// </summary>
    /// <remarks>
    /// List relations and references for a host entity type
    /// </remarks>
    /// <returns>Returns a list of relations and references for an entity type</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>> GetRelatedItemsWithHostEntityTypeAsync(EntityType2 entityType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (entityType == null)
        throw new System.ArgumentNullException("entityType");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items/with-entity-type/{entityType}"
          urlBuilder_.Append("v2/related-items/with-entity-type/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List related entity type related items
    /// </summary>
    /// <remarks>
    /// List related entities for a related entity type
    /// </remarks>
    /// <returns>Returns list of references for a related entity type</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<RelatedItemPublicApiDTO> GetRelatedItemsWithEntityType(RelatedEntityType relatedEntityType)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetRelatedItemsWithEntityTypeAsync(relatedEntityType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List related entity type related items
    /// </summary>
    /// <remarks>
    /// List related entities for a related entity type
    /// </remarks>
    /// <returns>Returns list of references for a related entity type</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>> GetRelatedItemsWithEntityTypeAsync(RelatedEntityType relatedEntityType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (relatedEntityType == null)
        throw new System.ArgumentNullException("relatedEntityType");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items/with-related-entity-type/{relatedEntityType}"
          urlBuilder_.Append("v2/related-items/with-related-entity-type/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(relatedEntityType, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List related entity related items
    /// </summary>
    /// <remarks>
    /// List related items for a specific related entity
    /// </remarks>
    /// <returns>Returns list of the related items for a specific related entity</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<RelatedItemPublicApiDTO> GetRelatedItemsWithEntity(RelEntityType relEntityType, int relEntityId)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetRelatedItemsWithEntityAsync(relEntityType, relEntityId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List related entity related items
    /// </summary>
    /// <remarks>
    /// List related items for a specific related entity
    /// </remarks>
    /// <returns>Returns list of the related items for a specific related entity</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>> GetRelatedItemsWithEntityAsync(RelEntityType relEntityType, int relEntityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (relEntityType == null)
        throw new System.ArgumentNullException("relEntityType");

      if (relEntityId == null)
        throw new System.ArgumentNullException("relEntityId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items/with-related-entity/{relEntityType}/{relEntityId}"
          urlBuilder_.Append("v2/related-items/with-related-entity/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(relEntityType, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append('/');
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(relEntityId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Create entity relation
    /// </summary>
    /// <remarks>
    /// Create a relation between two entities
    /// </remarks>
    /// <returns>Returns the relation created for an entity</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual RelatedItemPublicApiDTO CreateRelatedItemForEntity(EntityType3 entityType, int entityId, NewRelatedItemEntityRequest body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreateRelatedItemForEntityAsync(entityType, entityId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create entity relation
    /// </summary>
    /// <remarks>
    /// Create a relation between two entities
    /// </remarks>
    /// <returns>Returns the relation created for an entity</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<RelatedItemPublicApiDTO> CreateRelatedItemForEntityAsync(EntityType3 entityType, int entityId, NewRelatedItemEntityRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (entityType == null)
        throw new System.ArgumentNullException("entityType");

      if (entityId == null)
        throw new System.ArgumentNullException("entityId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items/entity/{entityType}/{entityId}/relation"
          urlBuilder_.Append("v2/related-items/entity/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append('/');
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/relation");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<RelatedItemPublicApiDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Create entity relations
    /// </summary>
    /// <remarks>
    /// Create multiple relations between two entities
    /// </remarks>
    /// <returns>Returns list of relations created for an entity</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<RelatedItemPublicApiDTO> CreateRelatedItemForEntity_1(EntityType4 entityType, int entityId, System.Collections.Generic.IEnumerable<NewRelatedItemEntityRequest> body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreateRelatedItemForEntity_1Async(entityType, entityId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create entity relations
    /// </summary>
    /// <remarks>
    /// Create multiple relations between two entities
    /// </remarks>
    /// <returns>Returns list of relations created for an entity</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>> CreateRelatedItemForEntity_1Async(EntityType4 entityType, int entityId, System.Collections.Generic.IEnumerable<NewRelatedItemEntityRequest> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (entityType == null)
        throw new System.ArgumentNullException("entityType");

      if (entityId == null)
        throw new System.ArgumentNullException("entityId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items/entity/{entityType}/{entityId}/relations"
          urlBuilder_.Append("v2/related-items/entity/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append('/');
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/relations");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Create Secure Relation
    /// </summary>
    /// <remarks>
    /// Create a relation to a secure value
    /// </remarks>
    /// <returns>Returns the secure related item created for an entity</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual RelatedItemPublicApiDTO CreateSecureRelatedItemForEntity(EntityType5 entityType, int entityId, NewRelatedItemSecureValueRequest body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreateSecureRelatedItemForEntityAsync(entityType, entityId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create Secure Relation
    /// </summary>
    /// <remarks>
    /// Create a relation to a secure value
    /// </remarks>
    /// <returns>Returns the secure related item created for an entity</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<RelatedItemPublicApiDTO> CreateSecureRelatedItemForEntityAsync(EntityType5 entityType, int entityId, NewRelatedItemSecureValueRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (entityType == null)
        throw new System.ArgumentNullException("entityType");

      if (entityId == null)
        throw new System.ArgumentNullException("entityId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("*/*");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items/entity/{entityType}/{entityId}/secure"
          urlBuilder_.Append("v2/related-items/entity/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append('/');
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/secure");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<RelatedItemPublicApiDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Create Attachment Relation
    /// </summary>
    /// <remarks>
    /// Relate an attachment to an entity
    /// </remarks>
    /// <returns>Returns the attachment related item created for an entity</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual RelatedItemPublicApiDTO CreateRelatedItem(EntityType6 entityType, int entityId, FormDataBodyPart file = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreateRelatedItemAsync(entityType, entityId, file, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create Attachment Relation
    /// </summary>
    /// <remarks>
    /// Relate an attachment to an entity
    /// </remarks>
    /// <returns>Returns the attachment related item created for an entity</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<RelatedItemPublicApiDTO> CreateRelatedItemAsync(EntityType6 entityType, int entityId, FormDataBodyPart file = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (entityType == null)
        throw new System.ArgumentNullException("entityType");

      if (entityId == null)
        throw new System.ArgumentNullException("entityId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var boundary_ = System.Guid.NewGuid().ToString();
          var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
          content_.Headers.Remove("Content-Type");
          content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

          if (file == null)
            throw new System.ArgumentNullException("file");
          else
          {
            var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(file, _settings.Value);
            content_.Add(new System.Net.Http.StringContent(json_, System.Text.Encoding.UTF8, "application/json"), "file");
          }
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items/entity/{entityType}/{entityId}/attachment"
          urlBuilder_.Append("v2/related-items/entity/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append('/');
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/attachment");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<RelatedItemPublicApiDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Delete related item
    /// </summary>
    /// <remarks>
    /// Deletes related item
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual void DeleteRelatedItem(int relatedItemId)
    {
      System.Threading.Tasks.Task.Run(async () => await DeleteRelatedItemAsync(relatedItemId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete related item
    /// </summary>
    /// <remarks>
    /// Deletes related item
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task DeleteRelatedItemAsync(int relatedItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (relatedItemId == null)
        throw new System.ArgumentNullException("relatedItemId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items/{relatedItemId}"
          urlBuilder_.Append("v2/related-items/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(relatedItemId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 204)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List all related items
    /// </summary>
    /// <remarks>
    /// List all related items
    /// </remarks>
    /// <returns>Returns a list of all related items</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<RelatedItemPublicApiDTO> GetAllRelatedItems()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetAllRelatedItemsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List all related items
    /// </summary>
    /// <remarks>
    /// List all related items
    /// </remarks>
    /// <returns>Returns a list of all related items</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>> GetAllRelatedItemsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items"
          urlBuilder_.Append("v2/related-items");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RelatedItemPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Delete related items
    /// </summary>
    /// <remarks>
    /// Deletes related items associated with an entity
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual void DeleteRelatedItems(EntityType7 entityType, int entityId)
    {
      System.Threading.Tasks.Task.Run(async () => await DeleteRelatedItemsAsync(entityType, entityId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete related items
    /// </summary>
    /// <remarks>
    /// Deletes related items associated with an entity
    /// </remarks>
    /// <returns>No Content</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task DeleteRelatedItemsAsync(EntityType7 entityType, int entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (entityType == null)
        throw new System.ArgumentNullException("entityType");

      if (entityId == null)
        throw new System.ArgumentNullException("entityId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/related-items/{entityType}/{entityId}"
          urlBuilder_.Append("v2/related-items/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append('/');
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 204)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Ticket
    /// </summary>
    /// <remarks>
    /// Returns a ticket
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual TicketDTO GetTicketById(int ticketId)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetTicketByIdAsync(ticketId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Ticket
    /// </summary>
    /// <remarks>
    /// Returns a ticket
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<TicketDTO> GetTicketByIdAsync(int ticketId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (ticketId == null)
        throw new System.ArgumentNullException("ticketId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/ticket/{ticketId}"
          urlBuilder_.Append("v2/ticketing/ticket/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(ticketId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<TicketDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update ticket
    /// </summary>
    /// <remarks>
    /// Change ticket fields. Does not accept comments
    /// </remarks>
    /// <param name="body">UpdateTicket object that needs to be updated to the store</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual TicketDTO Update(int ticketId, UpdateTicket body)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateAsync(ticketId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update ticket
    /// </summary>
    /// <remarks>
    /// Change ticket fields. Does not accept comments
    /// </remarks>
    /// <param name="body">UpdateTicket object that needs to be updated to the store</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<TicketDTO> UpdateAsync(int ticketId, UpdateTicket body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (ticketId == null)
        throw new System.ArgumentNullException("ticketId");

      if (body == null)
        throw new System.ArgumentNullException("body");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/ticket/{ticketId}"
          urlBuilder_.Append("v2/ticketing/ticket/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(ticketId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<TicketDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Create ticket
    /// </summary>
    /// <remarks>
    /// Create a new ticket, does not accept files
    /// </remarks>
    /// <param name="body">NewTicket object that needs to be added to the store</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual TicketDTO Create(NewTicket body)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreateAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create ticket
    /// </summary>
    /// <remarks>
    /// Create a new ticket, does not accept files
    /// </remarks>
    /// <param name="body">NewTicket object that needs to be added to the store</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<TicketDTO> CreateAsync(NewTicket body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (body == null)
        throw new System.ArgumentNullException("body");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/ticket"
          urlBuilder_.Append("v2/ticketing/ticket");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<TicketDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List ticket log entries
    /// </summary>
    /// <remarks>
    /// Returns list of the ticket log entries for a ticket
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<TicketLogEntryPublicApiDTO> GetTicketLogEntriesByTicketId(int ticketId, Type? type = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetTicketLogEntriesByTicketIdAsync(ticketId, type, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List ticket log entries
    /// </summary>
    /// <remarks>
    /// Returns list of the ticket log entries for a ticket
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TicketLogEntryPublicApiDTO>> GetTicketLogEntriesByTicketIdAsync(int ticketId, Type? type = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (ticketId == null)
        throw new System.ArgumentNullException("ticketId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/ticket/{ticketId}/log-entry"
          urlBuilder_.Append("v2/ticketing/ticket/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(ticketId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/log-entry");
          urlBuilder_.Append('?');
          if (type != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TicketLogEntryPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Add comment to ticket
    /// </summary>
    /// <remarks>
    /// Add a new comment to a ticket, allows files
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual void CreateComment(int ticketId, NewTicketLogEntry comment = null, System.Collections.Generic.IEnumerable<FileParameter> files = null)
    {
      System.Threading.Tasks.Task.Run(async () => await CreateCommentAsync(ticketId, comment, files, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Add comment to ticket
    /// </summary>
    /// <remarks>
    /// Add a new comment to a ticket, allows files
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task CreateCommentAsync(int ticketId, NewTicketLogEntry comment = null, System.Collections.Generic.IEnumerable<FileParameter> files = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (ticketId == null)
        throw new System.ArgumentNullException("ticketId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var boundary_ = System.Guid.NewGuid().ToString();
          var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
          content_.Headers.Remove("Content-Type");
          content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

          if (comment == null)
            throw new System.ArgumentNullException("comment");
          else
          {
            var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(comment, _settings.Value);
            content_.Add(new System.Net.Http.StringContent(json_, System.Text.Encoding.UTF8, "application/json"), "comment");
          }

          if (files == null)
            throw new System.ArgumentNullException("files");
          else
          {
            foreach (var item_ in files)
            {
              var content_files_ = new System.Net.Http.StreamContent(item_.Data);
              if (!string.IsNullOrEmpty(item_.ContentType))
                content_files_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
              content_.Add(content_files_, "files", item_.FileName ?? "files");
            }
          }
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/ticket/{ticketId}/comment"
          urlBuilder_.Append("v2/ticketing/ticket/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(ticketId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/comment");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;

          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Retrieve attachment
    /// </summary>
    /// <remarks>
    /// Returns attachment (image, document)
    /// </remarks>
    /// <param name="id">Attachment identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse GetAttachment(string id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetAttachmentAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Retrieve attachment
    /// </summary>
    /// <remarks>
    /// Returns attachment (image, document)
    /// </remarks>
    /// <param name="id">Attachment identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> GetAttachmentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/attachment/{id}"
          urlBuilder_.Append("v2/attachment/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Backup jobs
    /// </summary>
    /// <remarks>
    /// Returns list of backup jobs
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ddf">Deleted device filter</param>
    /// <param name="sf">Backup job status filter</param>
    /// <param name="ptf">Backup job planType filter</param>
    /// <param name="stf">Backup job startTime filter</param>
    /// <param name="include">Which devices include (active|deleted|all) default value active</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>Returns a backup job report</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual BackupJobReport GetBackupJobs(string df = null, string ddf = null, string sf = null, string ptf = null, string stf = null, string include = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetBackupJobsAsync(df, ddf, sf, ptf, stf, include, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Backup jobs
    /// </summary>
    /// <remarks>
    /// Returns list of backup jobs
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ddf">Deleted device filter</param>
    /// <param name="sf">Backup job status filter</param>
    /// <param name="ptf">Backup job planType filter</param>
    /// <param name="stf">Backup job startTime filter</param>
    /// <param name="include">Which devices include (active|deleted|all) default value active</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>Returns a backup job report</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<BackupJobReport> GetBackupJobsAsync(string df = null, string ddf = null, string sf = null, string ptf = null, string stf = null, string include = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/backup/jobs"
          urlBuilder_.Append("v2/backup/jobs");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ddf != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ddf")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ddf, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (sf != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("sf")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sf, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ptf != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ptf")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ptf, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (stf != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("stf")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(stf, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (include != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("include")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<BackupJobReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device custom fields
    /// </summary>
    /// <remarks>
    /// Returns list of device custom fields
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="withInheritance">Retrieve values using definition scope hierarchy</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.IDictionary<string, object> GetNodeCustomFields(int id, bool? withInheritance = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetNodeCustomFieldsAsync(id, withInheritance, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device custom fields
    /// </summary>
    /// <remarks>
    /// Returns list of device custom fields
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="withInheritance">Retrieve values using definition scope hierarchy</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetNodeCustomFieldsAsync(int id, bool? withInheritance = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/custom-fields"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/custom-fields");
          urlBuilder_.Append('?');
          if (withInheritance != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("withInheritance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(withInheritance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update Field Values
    /// </summary>
    /// <remarks>
    /// Update device custom field values
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse UpdateNodeAttributeValues(int id, System.Collections.Generic.IDictionary<string, object> body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateNodeAttributeValuesAsync(id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update Field Values
    /// </summary>
    /// <remarks>
    /// Update device custom field values
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> UpdateNodeAttributeValuesAsync(int id, System.Collections.Generic.IDictionary<string, object> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PATCH");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/custom-fields"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/custom-fields");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Last logged-on user information
    /// </summary>
    /// <remarks>
    /// Returns username that was last to login to device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual LoggedOnUser GetDeviceLastLoggedOnUser(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceLastLoggedOnUserAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Last logged-on user information
    /// </summary>
    /// <remarks>
    /// Returns username that was last to login to device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<LoggedOnUser> GetDeviceLastLoggedOnUserAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/last-logged-on-user"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/last-logged-on-user");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<LoggedOnUser>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// OS Patches
    /// </summary>
    /// <remarks>
    /// Returns list of pending/rejected/approved OS patches for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="severity">Patch Severity filter</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<OSPatch> GetDevicePendingFailedRejectedOSPatches(int id, string status = null, string type = null, string severity = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDevicePendingFailedRejectedOSPatchesAsync(id, status, type, severity, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// OS Patches
    /// </summary>
    /// <remarks>
    /// Returns list of pending/rejected/approved OS patches for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="severity">Patch Severity filter</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OSPatch>> GetDevicePendingFailedRejectedOSPatchesAsync(int id, string status = null, string type = null, string severity = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/os-patches"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/os-patches");
          urlBuilder_.Append('?');
          if (status != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (type != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (severity != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("severity")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(severity, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OSPatch>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// OS Patch installation report for device
    /// </summary>
    /// <remarks>
    /// Returns patch installation history records (successful and failed) for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="status">Patch Status filter (FAILED, INSTALLED)</param>
    /// <param name="installedBefore">Include patches installed before specified date</param>
    /// <param name="installedAfter">Include patches installed after specified date</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<OSPatch> GetDeviceInstalledOSPatches(int id, string status = null, string installedBefore = null, string installedAfter = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceInstalledOSPatchesAsync(id, status, installedBefore, installedAfter, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// OS Patch installation report for device
    /// </summary>
    /// <remarks>
    /// Returns patch installation history records (successful and failed) for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="status">Patch Status filter (FAILED, INSTALLED)</param>
    /// <param name="installedBefore">Include patches installed before specified date</param>
    /// <param name="installedAfter">Include patches installed after specified date</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OSPatch>> GetDeviceInstalledOSPatchesAsync(int id, string status = null, string installedBefore = null, string installedAfter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/os-patch-installs"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/os-patch-installs");
          urlBuilder_.Append('?');
          if (status != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (installedBefore != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("installedBefore")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(installedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (installedAfter != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("installedAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(installedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OSPatch>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Software Patch history for device
    /// </summary>
    /// <remarks>
    /// Returns 3rd party software patch installation history records for device (successful and failed)
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="impact">Patch Impact filter</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="productIdentifier">Product Identifier</param>
    /// <param name="installedBefore">Include patches installed before specified date</param>
    /// <param name="installedAfter">Include patches installed after specified date</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<SoftwarePatch> GetDeviceInstalledSoftwarePatches(int id, string type = null, string impact = null, string status = null, string productIdentifier = null, string installedBefore = null, string installedAfter = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceInstalledSoftwarePatchesAsync(id, type, impact, status, productIdentifier, installedBefore, installedAfter, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Software Patch history for device
    /// </summary>
    /// <remarks>
    /// Returns 3rd party software patch installation history records for device (successful and failed)
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="impact">Patch Impact filter</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="productIdentifier">Product Identifier</param>
    /// <param name="installedBefore">Include patches installed before specified date</param>
    /// <param name="installedAfter">Include patches installed after specified date</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SoftwarePatch>> GetDeviceInstalledSoftwarePatchesAsync(int id, string type = null, string impact = null, string status = null, string productIdentifier = null, string installedBefore = null, string installedAfter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/software-patch-installs"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/software-patch-installs");
          urlBuilder_.Append('?');
          if (type != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (impact != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("impact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(impact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (status != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (productIdentifier != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("productIdentifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productIdentifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (installedBefore != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("installedBefore")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(installedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (installedAfter != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("installedAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(installedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SoftwarePatch>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Modify Windows Service configuration
    /// </summary>
    /// <remarks>
    /// Configures Windows Service startup settings
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="serviceId">Service identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse SetWindowsServiceConfiguration(int id, string serviceId, WindowsServiceConfiguration body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await SetWindowsServiceConfigurationAsync(id, serviceId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Modify Windows Service configuration
    /// </summary>
    /// <remarks>
    /// Configures Windows Service startup settings
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="serviceId">Service identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> SetWindowsServiceConfigurationAsync(int id, string serviceId, WindowsServiceConfiguration body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      if (serviceId == null)
        throw new System.ArgumentNullException("serviceId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/windows-service/{serviceId}/configure"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/windows-service/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/configure");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device network interfaces
    /// </summary>
    /// <remarks>
    /// Returns device network interfaces' details
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<NetworkInterface> GetDeviceNetworkInterfaces(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceNetworkInterfacesAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device network interfaces
    /// </summary>
    /// <remarks>
    /// Returns device network interfaces' details
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetworkInterface>> GetDeviceNetworkInterfacesAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/network-interfaces"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/network-interfaces");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NetworkInterface>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device details
    /// </summary>
    /// <remarks>
    /// Returns device details
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>Device information</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual Device GetDevice(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device details
    /// </summary>
    /// <remarks>
    /// Returns device details
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>Device information</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Device> GetDeviceAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<Device>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update device information
    /// </summary>
    /// <remarks>
    /// Change device friendly name, user data, etc.
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse UpdateDevice(int id, DeviceMutableProperties body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateDeviceAsync(id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update device information
    /// </summary>
    /// <remarks>
    /// Change device friendly name, user data, etc.
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> UpdateDeviceAsync(int id, DeviceMutableProperties body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PATCH");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Run script or built-in action
    /// </summary>
    /// <remarks>
    /// Run script or built-in action on a device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse RunScriptOnDevice(int id, RunScriptRequest body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await RunScriptOnDeviceAsync(id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Run script or built-in action
    /// </summary>
    /// <remarks>
    /// Run script or built-in action on a device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> RunScriptOnDeviceAsync(int id, RunScriptRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/script/run"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/script/run");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device activities
    /// </summary>
    /// <remarks>
    /// Returns activity log for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="olderThan">Return activities recorded that are newer than specified activity ID</param>
    /// <param name="newerThan">Return activities recorded that are older than specified activity ID</param>
    /// <param name="activityType">Return activities of type</param>
    /// <param name="status">Return activities with status(es)</param>
    /// <param name="seriesUid">Return activities related to alert (series)</param>
    /// <param name="pageSize">Limit number of activities to return</param>
    /// <param name="lang">Language tag</param>
    /// <param name="tz">Time Zone</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual NodeActivitiesResponse GetDeviceActivities(int id, int? olderThan = null, int? newerThan = null, string activityType = null, string status = null, string seriesUid = null, int? pageSize = null, string lang = null, string tz = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceActivitiesAsync(id, olderThan, newerThan, activityType, status, seriesUid, pageSize, lang, tz, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device activities
    /// </summary>
    /// <remarks>
    /// Returns activity log for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="olderThan">Return activities recorded that are newer than specified activity ID</param>
    /// <param name="newerThan">Return activities recorded that are older than specified activity ID</param>
    /// <param name="activityType">Return activities of type</param>
    /// <param name="status">Return activities with status(es)</param>
    /// <param name="seriesUid">Return activities related to alert (series)</param>
    /// <param name="pageSize">Limit number of activities to return</param>
    /// <param name="lang">Language tag</param>
    /// <param name="tz">Time Zone</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<NodeActivitiesResponse> GetDeviceActivitiesAsync(int id, int? olderThan = null, int? newerThan = null, string activityType = null, string status = null, string seriesUid = null, int? pageSize = null, string lang = null, string tz = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/activities"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/activities");
          urlBuilder_.Append('?');
          if (olderThan != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("olderThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(olderThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (newerThan != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("newerThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(newerThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (activityType != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("activityType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activityType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (status != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (seriesUid != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("seriesUid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seriesUid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (lang != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("lang")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (tz != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("tz")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tz, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<NodeActivitiesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device disk drives
    /// </summary>
    /// <remarks>
    /// Returns device disks' details
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<DiskDrive> GetDeviceDiskDrives(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceDiskDrivesAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device disk drives
    /// </summary>
    /// <remarks>
    /// Returns device disks' details
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DiskDrive>> GetDeviceDiskDrivesAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/disks"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/disks");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DiskDrive>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device storage volumes
    /// </summary>
    /// <remarks>
    /// Returns device volumes' details
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="include">Additional information to include (bl - BitLocker status)</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Volume> GetDeviceVolumes(int id, string include = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceVolumesAsync(id, include, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device storage volumes
    /// </summary>
    /// <remarks>
    /// Returns device volumes' details
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="include">Additional information to include (bl - BitLocker status)</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Volume>> GetDeviceVolumesAsync(int id, string include = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/volumes"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/volumes");
          urlBuilder_.Append('?');
          if (include != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("include")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Volume>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device processors
    /// </summary>
    /// <remarks>
    /// Returns list of device Processor details
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Processor> GetDeviceProcessors(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceProcessorsAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device processors
    /// </summary>
    /// <remarks>
    /// Returns list of device Processor details
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Processor>> GetDeviceProcessorsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/processors"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/processors");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Processor>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device software inventory
    /// </summary>
    /// <remarks>
    /// Returns list of software installed on device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Application> GetDeviceSoftware(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceSoftwareAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device software inventory
    /// </summary>
    /// <remarks>
    /// Returns list of software installed on device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Application>> GetDeviceSoftwareAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/software"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/software");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Application>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device alerts (triggered conditions)
    /// </summary>
    /// <remarks>
    /// Returns list of active alerts (triggered conditions) for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="tz">Time Zone</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Alert> GetDeviceAlerts(int id, string lang = null, string tz = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceAlertsAsync(id, lang, tz, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device alerts (triggered conditions)
    /// </summary>
    /// <remarks>
    /// Returns list of active alerts (triggered conditions) for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="tz">Time Zone</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Alert>> GetDeviceAlertsAsync(int id, string lang = null, string tz = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/alerts"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/alerts");
          urlBuilder_.Append('?');
          if (lang != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("lang")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (tz != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("tz")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tz, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Alert>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device currently running (active) jobs
    /// </summary>
    /// <remarks>
    /// Returns currently running jobs for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="tz">Time Zone</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Job> GetDeviceActiveJobs(int id, string lang = null, string tz = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceActiveJobsAsync(id, lang, tz, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device currently running (active) jobs
    /// </summary>
    /// <remarks>
    /// Returns currently running jobs for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="tz">Time Zone</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Job>> GetDeviceActiveJobsAsync(int id, string lang = null, string tz = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/jobs"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/jobs");
          urlBuilder_.Append('?');
          if (lang != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("lang")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (tz != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("tz")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tz, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Job>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Windows services
    /// </summary>
    /// <remarks>
    /// Returns list of Windows Services and their statuses
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="name">Service name</param>
    /// <param name="state">Service state</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<WindowsService> GetDeviceServices(int id, string name = null, State? state = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceServicesAsync(id, name, state, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Windows services
    /// </summary>
    /// <remarks>
    /// Returns list of Windows Services and their statuses
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="name">Service name</param>
    /// <param name="state">Service state</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WindowsService>> GetDeviceServicesAsync(int id, string name = null, State? state = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/windows-services"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/windows-services");
          urlBuilder_.Append('?');
          if (name != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (state != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WindowsService>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device link
    /// </summary>
    /// <remarks>
    /// Returns link to device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="redirect">Return redirect response</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual DeviceLink GetDeviceLink(int id, bool? redirect = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceLinkAsync(id, redirect, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device link
    /// </summary>
    /// <remarks>
    /// Returns link to device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="redirect">Return redirect response</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<DeviceLink> GetDeviceLinkAsync(int id, bool? redirect = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/dashboard-url"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/dashboard-url");
          urlBuilder_.Append('?');
          if (redirect != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("redirect")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(redirect, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<DeviceLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Get summary of device policy overrides
    /// </summary>
    /// <remarks>
    /// Returns list of overridden policy sections
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual PolicyOverrides GetPolicyOverrides(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetPolicyOverridesAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get summary of device policy overrides
    /// </summary>
    /// <remarks>
    /// Returns list of overridden policy sections
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<PolicyOverrides> GetPolicyOverridesAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/policy/overrides"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/policy/overrides");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<PolicyOverrides>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Reset device policy overrides
    /// </summary>
    /// <remarks>
    /// Submit request to remove device policy overrides
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual void ResetPolicyOverrides(int id)
    {
      System.Threading.Tasks.Task.Run(async () => await ResetPolicyOverridesAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Reset device policy overrides
    /// </summary>
    /// <remarks>
    /// Submit request to remove device policy overrides
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task ResetPolicyOverridesAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/policy/overrides"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/policy/overrides");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;

          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device scripting options
    /// </summary>
    /// <remarks>
    /// Returns scripting options (built-in actions, custom scripts) available for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="lang">Language</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual DeviceScriptingOptions RequestScriptingOptions(int id, string lang = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await RequestScriptingOptionsAsync(id, lang, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device scripting options
    /// </summary>
    /// <remarks>
    /// Returns scripting options (built-in actions, custom scripts) available for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="lang">Language</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<DeviceScriptingOptions> RequestScriptingOptionsAsync(int id, string lang = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/scripting/options"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/scripting/options");
          urlBuilder_.Append('?');
          if (lang != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("lang")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<DeviceScriptingOptions>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Windows service control
    /// </summary>
    /// <remarks>
    /// Start/Stop/Restart Windows Service on a device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="serviceId">Service identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse ControlWindowsService(int id, string serviceId, WindowsServiceControlRequest body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await ControlWindowsServiceAsync(id, serviceId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Windows service control
    /// </summary>
    /// <remarks>
    /// Start/Stop/Restart Windows Service on a device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="serviceId">Service identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> ControlWindowsServiceAsync(int id, string serviceId, WindowsServiceControlRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      if (serviceId == null)
        throw new System.ArgumentNullException("serviceId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/windows-service/{serviceId}/control"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/windows-service/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/control");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Reboot device
    /// </summary>
    /// <remarks>
    /// Sends a command to restart the computer
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="mode">Reboot mode</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse RebootDevices(int id, Mode2 mode, RebootRequest body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await RebootDevicesAsync(id, mode, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Reboot device
    /// </summary>
    /// <remarks>
    /// Sends a command to restart the computer
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="mode">Reboot mode</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> RebootDevicesAsync(int id, Mode2 mode, RebootRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      if (mode == null)
        throw new System.ArgumentNullException("mode");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/reboot/{mode}"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/reboot/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Schedule maintenance
    /// </summary>
    /// <remarks>
    /// Schedule maintenance window for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse UpdateDeviceMaintenance(int id, MaintenanceSettings body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateDeviceMaintenanceAsync(id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Schedule maintenance
    /// </summary>
    /// <remarks>
    /// Schedule maintenance window for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> UpdateDeviceMaintenanceAsync(int id, MaintenanceSettings body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/maintenance"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/maintenance");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Cancel maintenance
    /// </summary>
    /// <remarks>
    /// Cancel pending or active maintenance for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual void CancelDeviceMaintenance(int id)
    {
      System.Threading.Tasks.Task.Run(async () => await CancelDeviceMaintenanceAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Cancel maintenance
    /// </summary>
    /// <remarks>
    /// Cancel pending or active maintenance for device
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task CancelDeviceMaintenanceAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/maintenance"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/maintenance");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;

          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Pending, Failed and Rejected Software patches for device
    /// </summary>
    /// <remarks>
    /// Returns list of 3rd party Software patches for a device (for which there were no installation attempts)
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="productIdentifier">Product Identifier</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="impact">Patch Impact filter</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<SoftwarePatch> GetDevicePendingFailedRejectedSoftwarePatches(int id, string status = null, string productIdentifier = null, string type = null, string impact = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDevicePendingFailedRejectedSoftwarePatchesAsync(id, status, productIdentifier, type, impact, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Pending, Failed and Rejected Software patches for device
    /// </summary>
    /// <remarks>
    /// Returns list of 3rd party Software patches for a device (for which there were no installation attempts)
    /// </remarks>
    /// <param name="id">Device identifier</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="productIdentifier">Product Identifier</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="impact">Patch Impact filter</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SoftwarePatch>> GetDevicePendingFailedRejectedSoftwarePatchesAsync(int id, string status = null, string productIdentifier = null, string type = null, string impact = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device/{id}/software-patches"
          urlBuilder_.Append("v2/device/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/software-patches");
          urlBuilder_.Append('?');
          if (status != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (productIdentifier != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("productIdentifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productIdentifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (type != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (impact != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("impact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(impact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SoftwarePatch>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Group members
    /// </summary>
    /// <remarks>
    /// Returns list of device identifiers that match group criteria
    /// </remarks>
    /// <param name="id">Group identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<int> GetGroupDeviceIds(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetGroupDeviceIdsAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Group members
    /// </summary>
    /// <remarks>
    /// Returns list of device identifiers that match group criteria
    /// </remarks>
    /// <param name="id">Group identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<int>> GetGroupDeviceIdsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/group/{id}/device-ids"
          urlBuilder_.Append("v2/group/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/device-ids");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Organization information
    /// </summary>
    /// <remarks>
    /// Returns organization details (policy mappings, locations)
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual OrganizationDetailed GetOrganization(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetOrganizationAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Organization information
    /// </summary>
    /// <remarks>
    /// Returns organization details (policy mappings, locations)
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OrganizationDetailed> GetOrganizationAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<OrganizationDetailed>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update organization
    /// </summary>
    /// <remarks>
    /// Change organization name, description and policy mappings
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse UpdateOrganization(int id, OrganizationModel body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateOrganizationAsync(id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update organization
    /// </summary>
    /// <remarks>
    /// Change organization name, description and policy mappings
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> UpdateOrganizationAsync(int id, OrganizationModel body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PATCH");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Organization custom fields
    /// </summary>
    /// <remarks>
    /// Returns list of organization custom fields
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.IDictionary<string, object> GetNodeCustomFields_1(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetNodeCustomFields_1Async(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Organization custom fields
    /// </summary>
    /// <remarks>
    /// Returns list of organization custom fields
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetNodeCustomFields_1Async(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/custom-fields"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/custom-fields");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update Field Values
    /// </summary>
    /// <remarks>
    /// Update organization custom field values
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse UpdateNodeAttributeValues_1(int id, System.Collections.Generic.IDictionary<string, object> body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateNodeAttributeValues_1Async(id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update Field Values
    /// </summary>
    /// <remarks>
    /// Update organization custom field values
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> UpdateNodeAttributeValues_1Async(int id, System.Collections.Generic.IDictionary<string, object> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PATCH");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/custom-fields"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/custom-fields");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Location custom fields
    /// </summary>
    /// <remarks>
    /// Returns list of location custom fields
    /// </remarks>
    /// <param name="withInheritance">Retrieve values using definition scope hierarchy</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.IDictionary<string, object> GetNodeCustomFields_2(int id, int locationId, bool? withInheritance = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetNodeCustomFields_2Async(id, locationId, withInheritance, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Location custom fields
    /// </summary>
    /// <remarks>
    /// Returns list of location custom fields
    /// </remarks>
    /// <param name="withInheritance">Retrieve values using definition scope hierarchy</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetNodeCustomFields_2Async(int id, int locationId, bool? withInheritance = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      if (locationId == null)
        throw new System.ArgumentNullException("locationId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/location/{locationId}/custom-fields"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/location/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/custom-fields");
          urlBuilder_.Append('?');
          if (withInheritance != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("withInheritance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(withInheritance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update Field Values
    /// </summary>
    /// <remarks>
    /// Update location custom field values
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual FileResponse UpdateNodeAttributeValues_2(int id, int locationId, System.Collections.Generic.IDictionary<string, object> body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateNodeAttributeValues_2Async(id, locationId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update Field Values
    /// </summary>
    /// <remarks>
    /// Update location custom field values
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FileResponse> UpdateNodeAttributeValues_2Async(int id, int locationId, System.Collections.Generic.IDictionary<string, object> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      if (locationId == null)
        throw new System.ArgumentNullException("locationId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PATCH");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/location/{locationId}/custom-fields"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/location/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/custom-fields");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            return default(FileResponse);
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Organization locations backup usage
    /// </summary>
    /// <remarks>
    /// Returns a list of locations backup usage
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <returns>Returns list of locations backup usage</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<LocationBackupUsageSummary> GetOrganizationLocationUsage(string id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetOrganizationLocationUsageAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Organization locations backup usage
    /// </summary>
    /// <remarks>
    /// Returns a list of locations backup usage
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <returns>Returns list of locations backup usage</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LocationBackupUsageSummary>> GetOrganizationLocationUsageAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/locations/backup/usage"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/locations/backup/usage");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LocationBackupUsageSummary>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Organization locations
    /// </summary>
    /// <remarks>
    /// Returns list of locations for organization
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Location> GetOrganizationLocations(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetOrganizationLocationsAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Organization locations
    /// </summary>
    /// <remarks>
    /// Returns list of locations for organization
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Location>> GetOrganizationLocationsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/locations"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/locations");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Location>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Add new location to organization
    /// </summary>
    /// <remarks>
    /// Creates new location for organization
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual Location CreateLocationForOrganization(int id, LocationModel body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreateLocationForOrganizationAsync(id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Add new location to organization
    /// </summary>
    /// <remarks>
    /// Creates new location for organization
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Location> CreateLocationForOrganizationAsync(int id, LocationModel body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/locations"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/locations");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<Location>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Update location
    /// </summary>
    /// <remarks>
    /// Change location name, address, description, custom data
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual Location UpdateLocation(int id, int locationId, LocationModel body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateLocationAsync(id, locationId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update location
    /// </summary>
    /// <remarks>
    /// Change location name, address, description, custom data
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Location> UpdateLocationAsync(int id, int locationId, LocationModel body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      if (locationId == null)
        throw new System.ArgumentNullException("locationId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PATCH");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/locations/{locationId}"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/locations/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<Location>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List users
    /// </summary>
    /// <remarks>
    /// Returns list of end-users for organization
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<User> GetEndUsers(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetEndUsersAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List users
    /// </summary>
    /// <remarks>
    /// Returns list of end-users for organization
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetEndUsersAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/end-users"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/end-users");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<User>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Organization devices
    /// </summary>
    /// <remarks>
    /// Returns list of devices for organization
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <param name="pageSize">Limit number of devices to return</param>
    /// <param name="after">Last Node ID from previous page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<NodeWithDetailedReferences> GetOrganizationDevices(int id, int? pageSize = null, int? after = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetOrganizationDevicesAsync(id, pageSize, after, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Organization devices
    /// </summary>
    /// <remarks>
    /// Returns list of devices for organization
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <param name="pageSize">Limit number of devices to return</param>
    /// <param name="after">Last Node ID from previous page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NodeWithDetailedReferences>> GetOrganizationDevicesAsync(int id, int? pageSize = null, int? after = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/devices"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/devices");
          urlBuilder_.Append('?');
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (after != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("after")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NodeWithDetailedReferences>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Organization location backup usage
    /// </summary>
    /// <remarks>
    /// Returns a location backup usage
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <param name="locationId">Location identifier</param>
    /// <returns>Returns a location backup usage</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual LocationBackupUsageSummary GetLocationUsage(int id, int locationId)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetLocationUsageAsync(id, locationId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Organization location backup usage
    /// </summary>
    /// <remarks>
    /// Returns a location backup usage
    /// </remarks>
    /// <param name="id">Organization identifier</param>
    /// <param name="locationId">Location identifier</param>
    /// <returns>Returns a location backup usage</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<LocationBackupUsageSummary> GetLocationUsageAsync(int id, int locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      if (locationId == null)
        throw new System.ArgumentNullException("locationId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/locations/{locationId}/backup/usage"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/locations/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locationId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/backup/usage");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<LocationBackupUsageSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Generate installer
    /// </summary>
    /// <remarks>
    /// Generates and returns URL for installer for specified organization/location
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual Link GetInstallerForLocation(int id, int location_id, Installer_type installer_type)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetInstallerForLocationAsync(id, location_id, installer_type, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Generate installer
    /// </summary>
    /// <remarks>
    /// Generates and returns URL for installer for specified organization/location
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Link> GetInstallerForLocationAsync(int id, int location_id, Installer_type installer_type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      if (location_id == null)
        throw new System.ArgumentNullException("location_id");

      if (installer_type == null)
        throw new System.ArgumentNullException("installer_type");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/location/{location_id}/installer/{installer_type}"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/location/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(location_id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/installer/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(installer_type, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<Link>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Generate installer
    /// </summary>
    /// <remarks>
    /// Generates and returns URL for installer with specified settings
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual Link GetInstaller(GenerateInstallerRequestDto body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetInstallerAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Generate installer
    /// </summary>
    /// <remarks>
    /// Generates and returns URL for installer with specified settings
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Link> GetInstallerAsync(GenerateInstallerRequestDto body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/generate-installer"
          urlBuilder_.Append("v2/organization/generate-installer");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<Link>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Change organization policy mappings
    /// </summary>
    /// <remarks>
    /// Update policy assignment for node role(s). Returns list of affected device IDs
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<int> UpdateNodeRolePolicyAssignmentForOrganization(int id, System.Collections.Generic.IEnumerable<NodeRolePolicyAssignment> body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await UpdateNodeRolePolicyAssignmentForOrganizationAsync(id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Change organization policy mappings
    /// </summary>
    /// <remarks>
    /// Update policy assignment for node role(s). Returns list of affected device IDs
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<int>> UpdateNodeRolePolicyAssignmentForOrganizationAsync(int id, System.Collections.Generic.IEnumerable<NodeRolePolicyAssignment> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organization/{id}/policies"
          urlBuilder_.Append("v2/organization/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/policies");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List Network Interfaces
    /// </summary>
    /// <remarks>
    /// Returns list of Network Interfaces for each device
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual NetworkInterfacesReport GetNetworkInterfaces(string df = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetNetworkInterfacesAsync(df, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List Network Interfaces
    /// </summary>
    /// <remarks>
    /// Returns list of Network Interfaces for each device
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<NetworkInterfacesReport> GetNetworkInterfacesAsync(string df = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/network-interfaces"
          urlBuilder_.Append("v2/queries/network-interfaces");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<NetworkInterfacesReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Pending, Failed and Rejected OS patches report
    /// </summary>
    /// <remarks>
    /// Returns list of OS patches for which there were no installation attempts
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="severity">Patch Severity filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual OSPatchReport GetPendingFailedRejectedOSPatches(string df = null, string ts = null, string status = null, string type = null, string severity = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetPendingFailedRejectedOSPatchesAsync(df, ts, status, type, severity, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Pending, Failed and Rejected OS patches report
    /// </summary>
    /// <remarks>
    /// Returns list of OS patches for which there were no installation attempts
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="severity">Patch Severity filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OSPatchReport> GetPendingFailedRejectedOSPatchesAsync(string df = null, string ts = null, string status = null, string type = null, string severity = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/os-patches"
          urlBuilder_.Append("v2/queries/os-patches");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (status != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (type != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (severity != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("severity")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(severity, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<OSPatchReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Pending, Failed and Rejected Software patches report
    /// </summary>
    /// <remarks>
    /// Returns list of 3rd party Software patches for which there were no installation attempts
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="productIdentifier">Product Identifier</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="impact">Patch Impact filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual SoftwarePatchReport GetPendingFailedRejectedSoftwarePatches(string df = null, string ts = null, string status = null, string productIdentifier = null, string type = null, string impact = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetPendingFailedRejectedSoftwarePatchesAsync(df, ts, status, productIdentifier, type, impact, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Pending, Failed and Rejected Software patches report
    /// </summary>
    /// <remarks>
    /// Returns list of 3rd party Software patches for which there were no installation attempts
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="productIdentifier">Product Identifier</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="impact">Patch Impact filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SoftwarePatchReport> GetPendingFailedRejectedSoftwarePatchesAsync(string df = null, string ts = null, string status = null, string productIdentifier = null, string type = null, string impact = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/software-patches"
          urlBuilder_.Append("v2/queries/software-patches");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (status != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (productIdentifier != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("productIdentifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productIdentifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (type != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (impact != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("impact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(impact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<SoftwarePatchReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Software Patch history report
    /// </summary>
    /// <remarks>
    /// Returns 3rd party software patch installation history records (successful and failed)
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="impact">Patch Impact filter</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="productIdentifier">Product Identifier</param>
    /// <param name="installedBefore">Include patches installed before specified date</param>
    /// <param name="installedAfter">Include patches installed after specified date</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual SoftwarePatchReport GetInstalledSoftwarePatches(string df = null, string type = null, string impact = null, string status = null, string productIdentifier = null, string installedBefore = null, string installedAfter = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetInstalledSoftwarePatchesAsync(df, type, impact, status, productIdentifier, installedBefore, installedAfter, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Software Patch history report
    /// </summary>
    /// <remarks>
    /// Returns 3rd party software patch installation history records (successful and failed)
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="type">Patch Type filter</param>
    /// <param name="impact">Patch Impact filter</param>
    /// <param name="status">Patch Status filter</param>
    /// <param name="productIdentifier">Product Identifier</param>
    /// <param name="installedBefore">Include patches installed before specified date</param>
    /// <param name="installedAfter">Include patches installed after specified date</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SoftwarePatchReport> GetInstalledSoftwarePatchesAsync(string df = null, string type = null, string impact = null, string status = null, string productIdentifier = null, string installedBefore = null, string installedAfter = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/software-patch-installs"
          urlBuilder_.Append("v2/queries/software-patch-installs");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (type != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (impact != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("impact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(impact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (status != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (productIdentifier != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("productIdentifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productIdentifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (installedBefore != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("installedBefore")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(installedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (installedAfter != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("installedAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(installedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<SoftwarePatchReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Last logged-on user report
    /// </summary>
    /// <remarks>
    /// Returns usernames and logon times
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual LoggedOnUsersReport GetLastLoggedOnUsersReport(string df = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetLastLoggedOnUsersReportAsync(df, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Last logged-on user report
    /// </summary>
    /// <remarks>
    /// Returns usernames and logon times
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<LoggedOnUsersReport> GetLastLoggedOnUsersReportAsync(string df = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/logged-on-users"
          urlBuilder_.Append("v2/queries/logged-on-users");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<LoggedOnUsersReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Custom fields detailed report
    /// </summary>
    /// <remarks>
    /// Returns Custom Fields report with additional information about each field
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="updatedAfter">Custom fields updated after specified date</param>
    /// <param name="fields">Comma-separated list of fields</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual NodeAttributesDetailedReport GetCustomFieldsDetailedReport(string df = null, string cursor = null, int? pageSize = null, string updatedAfter = null, string fields = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetCustomFieldsDetailedReportAsync(df, cursor, pageSize, updatedAfter, fields, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Custom fields detailed report
    /// </summary>
    /// <remarks>
    /// Returns Custom Fields report with additional information about each field
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="updatedAfter">Custom fields updated after specified date</param>
    /// <param name="fields">Comma-separated list of fields</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<NodeAttributesDetailedReport> GetCustomFieldsDetailedReportAsync(string df = null, string cursor = null, int? pageSize = null, string updatedAfter = null, string fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/custom-fields-detailed"
          urlBuilder_.Append("v2/queries/custom-fields-detailed");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (updatedAfter != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("updatedAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(updatedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (fields != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<NodeAttributesDetailedReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Scoped custom fields report
    /// </summary>
    /// <remarks>
    /// Returns report for Custom Fields defined at different scopes (device, location, organization)
    /// </remarks>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="updatedAfter">Custom fields updated after specified date</param>
    /// <param name="fields">Comma-separated list of fields</param>
    /// <param name="scopes">Comma-separated list of scopes</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual ScopedAttributesReport GetScopedCustomFieldsReport(string cursor = null, int? pageSize = null, string updatedAfter = null, string fields = null, string scopes = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetScopedCustomFieldsReportAsync(cursor, pageSize, updatedAfter, fields, scopes, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Scoped custom fields report
    /// </summary>
    /// <remarks>
    /// Returns report for Custom Fields defined at different scopes (device, location, organization)
    /// </remarks>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="updatedAfter">Custom fields updated after specified date</param>
    /// <param name="fields">Comma-separated list of fields</param>
    /// <param name="scopes">Comma-separated list of scopes</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<ScopedAttributesReport> GetScopedCustomFieldsReportAsync(string cursor = null, int? pageSize = null, string updatedAfter = null, string fields = null, string scopes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/scoped-custom-fields"
          urlBuilder_.Append("v2/queries/scoped-custom-fields");
          urlBuilder_.Append('?');
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (updatedAfter != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("updatedAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(updatedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (fields != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (scopes != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("scopes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scopes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<ScopedAttributesReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Scoped custom fields detailed report
    /// </summary>
    /// <remarks>
    /// Returns report for Custom Fields defined at different scopes (device, location, organization) with additional information about each field
    /// </remarks>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="updatedAfter">Custom fields updated after specified date</param>
    /// <param name="fields">Comma-separated list of fields</param>
    /// <param name="scopes">Comma-separated list of scopes</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual ScopedAttributesDetailedReport GetScopedCustomFieldsDetailedReport(string cursor = null, int? pageSize = null, string updatedAfter = null, string fields = null, string scopes = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetScopedCustomFieldsDetailedReportAsync(cursor, pageSize, updatedAfter, fields, scopes, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Scoped custom fields detailed report
    /// </summary>
    /// <remarks>
    /// Returns report for Custom Fields defined at different scopes (device, location, organization) with additional information about each field
    /// </remarks>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="updatedAfter">Custom fields updated after specified date</param>
    /// <param name="fields">Comma-separated list of fields</param>
    /// <param name="scopes">Comma-separated list of scopes</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<ScopedAttributesDetailedReport> GetScopedCustomFieldsDetailedReportAsync(string cursor = null, int? pageSize = null, string updatedAfter = null, string fields = null, string scopes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/scoped-custom-fields-detailed"
          urlBuilder_.Append("v2/queries/scoped-custom-fields-detailed");
          urlBuilder_.Append('?');
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (updatedAfter != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("updatedAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(updatedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (fields != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (scopes != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("scopes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scopes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<ScopedAttributesDetailedReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Processor report
    /// </summary>
    /// <remarks>
    /// Returns list of processors
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual ProcessorReport GetProcessors(string df = null, string ts = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetProcessorsAsync(df, ts, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Processor report
    /// </summary>
    /// <remarks>
    /// Returns list of processors
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<ProcessorReport> GetProcessorsAsync(string df = null, string ts = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/processors"
          urlBuilder_.Append("v2/queries/processors");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<ProcessorReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Disk volumes report
    /// </summary>
    /// <remarks>
    /// Returns list of disk volumes
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="include">Additional information to include (bl - BitLocker status)</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual VolumesReport GetVolumes(string df = null, string ts = null, string cursor = null, int? pageSize = null, string include = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetVolumesAsync(df, ts, cursor, pageSize, include, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Disk volumes report
    /// </summary>
    /// <remarks>
    /// Returns list of disk volumes
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="include">Additional information to include (bl - BitLocker status)</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<VolumesReport> GetVolumesAsync(string df = null, string ts = null, string cursor = null, int? pageSize = null, string include = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/volumes"
          urlBuilder_.Append("v2/queries/volumes");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (include != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("include")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<VolumesReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Operating systems report
    /// </summary>
    /// <remarks>
    /// Returns operating systems' for devices
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual OperatingSystemsReport GetOperatingSystems(string df = null, string ts = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetOperatingSystemsAsync(df, ts, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Operating systems report
    /// </summary>
    /// <remarks>
    /// Returns operating systems' for devices
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperatingSystemsReport> GetOperatingSystemsAsync(string df = null, string ts = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/operating-systems"
          urlBuilder_.Append("v2/queries/operating-systems");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperatingSystemsReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Antivirus threats report
    /// </summary>
    /// <remarks>
    /// Returns list of antivirus threats
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual AntivirusThreatsReport GetAntivirusThreats(string df = null, string ts = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetAntivirusThreatsAsync(df, ts, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Antivirus threats report
    /// </summary>
    /// <remarks>
    /// Returns list of antivirus threats
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<AntivirusThreatsReport> GetAntivirusThreatsAsync(string df = null, string ts = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/antivirus-threats"
          urlBuilder_.Append("v2/queries/antivirus-threats");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<AntivirusThreatsReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Computer systems report
    /// </summary>
    /// <remarks>
    /// Returns computer systems information for devices
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual ComputerSystemsReport GetComputerSystems(string df = null, string ts = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetComputerSystemsAsync(df, ts, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Computer systems report
    /// </summary>
    /// <remarks>
    /// Returns computer systems information for devices
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<ComputerSystemsReport> GetComputerSystemsAsync(string df = null, string ts = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/computer-systems"
          urlBuilder_.Append("v2/queries/computer-systems");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<ComputerSystemsReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Disk drives report
    /// </summary>
    /// <remarks>
    /// Returns list of physical disks
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual DiskDriveReport GetDiskDrives(string df = null, string ts = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDiskDrivesAsync(df, ts, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Disk drives report
    /// </summary>
    /// <remarks>
    /// Returns list of physical disks
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<DiskDriveReport> GetDiskDrivesAsync(string df = null, string ts = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/disks"
          urlBuilder_.Append("v2/queries/disks");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<DiskDriveReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Get summary of device policy overrides
    /// </summary>
    /// <remarks>
    /// Returns list of overridden policy sections for each device
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual PolicyOverridesReport GetPolicyOverrides_1(string df = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetPolicyOverrides_1Async(df, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get summary of device policy overrides
    /// </summary>
    /// <remarks>
    /// Returns list of overridden policy sections for each device
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<PolicyOverridesReport> GetPolicyOverrides_1Async(string df = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/policy-overrides"
          urlBuilder_.Append("v2/queries/policy-overrides");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<PolicyOverridesReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device backup usage
    /// </summary>
    /// <remarks>
    /// Returns the backup usage by device
    /// </remarks>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="includeDeletedDevices">Whether or not include deleted devices</param>
    /// <returns>Returns a device backup usage report</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual DeviceUsageReport GetDeviceUsage(string cursor = null, int? pageSize = null, bool? includeDeletedDevices = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceUsageAsync(cursor, pageSize, includeDeletedDevices, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device backup usage
    /// </summary>
    /// <remarks>
    /// Returns the backup usage by device
    /// </remarks>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="includeDeletedDevices">Whether or not include deleted devices</param>
    /// <returns>Returns a device backup usage report</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<DeviceUsageReport> GetDeviceUsageAsync(string cursor = null, int? pageSize = null, bool? includeDeletedDevices = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/backup/usage"
          urlBuilder_.Append("v2/queries/backup/usage");
          urlBuilder_.Append('?');
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (includeDeletedDevices != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("includeDeletedDevices")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeDeletedDevices, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<DeviceUsageReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new NinjaOneException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device health report
    /// </summary>
    /// <remarks>
    /// Returns list of device health summary records
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="health">Health status filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual DeviceHealthReport GetDeviceHealthReport(string df = null, string health = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceHealthReportAsync(df, health, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device health report
    /// </summary>
    /// <remarks>
    /// Returns list of device health summary records
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="health">Health status filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<DeviceHealthReport> GetDeviceHealthReportAsync(string df = null, string health = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/device-health"
          urlBuilder_.Append("v2/queries/device-health");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (health != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("health")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(health, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<DeviceHealthReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Software inventory
    /// </summary>
    /// <remarks>
    /// Returns list software installed on devices
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="installedBefore">Include software installed before specified date</param>
    /// <param name="installedAfter">Include software installed after specified date</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual SoftwareReport GetSoftware(string df = null, string cursor = null, int? pageSize = null, string installedBefore = null, string installedAfter = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetSoftwareAsync(df, cursor, pageSize, installedBefore, installedAfter, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Software inventory
    /// </summary>
    /// <remarks>
    /// Returns list software installed on devices
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="installedBefore">Include software installed before specified date</param>
    /// <param name="installedAfter">Include software installed after specified date</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SoftwareReport> GetSoftwareAsync(string df = null, string cursor = null, int? pageSize = null, string installedBefore = null, string installedAfter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/software"
          urlBuilder_.Append("v2/queries/software");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (installedBefore != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("installedBefore")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(installedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (installedAfter != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("installedAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(installedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<SoftwareReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// OS Patch installation report
    /// </summary>
    /// <remarks>
    /// Returns patch installation history records (successful and failed)
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="status">Patch Status filter (FAILED, INSTALLED)</param>
    /// <param name="installedBefore">Include patches installed before specified date</param>
    /// <param name="installedAfter">Include patches installed after specified date</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual OSPatchReport GetInstalledOSPatches(string df = null, string status = null, string installedBefore = null, string installedAfter = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetInstalledOSPatchesAsync(df, status, installedBefore, installedAfter, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// OS Patch installation report
    /// </summary>
    /// <remarks>
    /// Returns patch installation history records (successful and failed)
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="status">Patch Status filter (FAILED, INSTALLED)</param>
    /// <param name="installedBefore">Include patches installed before specified date</param>
    /// <param name="installedAfter">Include patches installed after specified date</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OSPatchReport> GetInstalledOSPatchesAsync(string df = null, string status = null, string installedBefore = null, string installedAfter = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/os-patch-installs"
          urlBuilder_.Append("v2/queries/os-patch-installs");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (status != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (installedBefore != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("installedBefore")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(installedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (installedAfter != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("installedAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(installedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<OSPatchReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Antivirus status report
    /// </summary>
    /// <remarks>
    /// Returns list of statues of antivirus software installed on devices
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="productState">Product State filter</param>
    /// <param name="productName">Product Name filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual AntivirusStatusReport GetAntivirusStatusReport(string df = null, string ts = null, string productState = null, string productName = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetAntivirusStatusReportAsync(df, ts, productState, productName, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Antivirus status report
    /// </summary>
    /// <remarks>
    /// Returns list of statues of antivirus software installed on devices
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="productState">Product State filter</param>
    /// <param name="productName">Product Name filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<AntivirusStatusReport> GetAntivirusStatusReportAsync(string df = null, string ts = null, string productState = null, string productName = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/antivirus-status"
          urlBuilder_.Append("v2/queries/antivirus-status");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (productState != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("productState")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productState, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (productName != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("productName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<AntivirusStatusReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// RAID controller report
    /// </summary>
    /// <remarks>
    /// Returns list of RAID controllers
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual RAIDControllerReport GetRAIDControllerReport(string df = null, string ts = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetRAIDControllerReportAsync(df, ts, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// RAID controller report
    /// </summary>
    /// <remarks>
    /// Returns list of RAID controllers
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<RAIDControllerReport> GetRAIDControllerReportAsync(string df = null, string ts = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/raid-controllers"
          urlBuilder_.Append("v2/queries/raid-controllers");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<RAIDControllerReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// RAID drive report
    /// </summary>
    /// <remarks>
    /// Returns list of drives connected to RAID controllers
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual RAIDDriveReport GetRAIDDriveReport(string df = null, string ts = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetRAIDDriveReportAsync(df, ts, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// RAID drive report
    /// </summary>
    /// <remarks>
    /// Returns list of drives connected to RAID controllers
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="ts">Monitoring timestamp filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<RAIDDriveReport> GetRAIDDriveReportAsync(string df = null, string ts = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/raid-drives"
          urlBuilder_.Append("v2/queries/raid-drives");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (ts != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("ts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<RAIDDriveReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Windows services report
    /// </summary>
    /// <remarks>
    /// Returns list of Windows Services and their statuses
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="name">Service name</param>
    /// <param name="state">Service state</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual WindowsServiceReport GetWindowsServicesReport(string df = null, string name = null, State2? state = null, string cursor = null, int? pageSize = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetWindowsServicesReportAsync(df, name, state, cursor, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Windows services report
    /// </summary>
    /// <remarks>
    /// Returns list of Windows Services and their statuses
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="name">Service name</param>
    /// <param name="state">Service state</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<WindowsServiceReport> GetWindowsServicesReportAsync(string df = null, string name = null, State2? state = null, string cursor = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/windows-services"
          urlBuilder_.Append("v2/queries/windows-services");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (name != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (state != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<WindowsServiceReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Custom fields report
    /// </summary>
    /// <remarks>
    /// Returns Custom Fields report
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="updatedAfter">Custom fields updated after specified date</param>
    /// <param name="fields">Comma-separated list of fields</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual NodeAttributesReport GetCustomFieldsReport(string df = null, string cursor = null, int? pageSize = null, string updatedAfter = null, string fields = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetCustomFieldsReportAsync(df, cursor, pageSize, updatedAfter, fields, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Custom fields report
    /// </summary>
    /// <remarks>
    /// Returns Custom Fields report
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="cursor">Cursor name</param>
    /// <param name="pageSize">Limit number of records per page</param>
    /// <param name="updatedAfter">Custom fields updated after specified date</param>
    /// <param name="fields">Comma-separated list of fields</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<NodeAttributesReport> GetCustomFieldsReportAsync(string df = null, string cursor = null, int? pageSize = null, string updatedAfter = null, string fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/queries/custom-fields"
          urlBuilder_.Append("v2/queries/custom-fields");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (cursor != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (updatedAfter != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("updatedAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(updatedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (fields != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<NodeAttributesReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Find devices
    /// </summary>
    /// <remarks>
    /// Returns list of entities matching search term
    /// </remarks>
    /// <param name="q">Search query (name, logged on user name, IP address, etc.)</param>
    /// <param name="limit">Limit number of devices to return</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual DeviceSearchResults Search(string q = null, int? limit = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await SearchAsync(q, limit, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Find devices
    /// </summary>
    /// <remarks>
    /// Returns list of entities matching search term
    /// </remarks>
    /// <param name="q">Search query (name, logged on user name, IP address, etc.)</param>
    /// <param name="limit">Limit number of devices to return</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<DeviceSearchResults> SearchAsync(string q = null, int? limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/devices/search"
          urlBuilder_.Append("v2/devices/search");
          urlBuilder_.Append('?');
          if (q != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("q")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (limit != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<DeviceSearchResults>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Device Custom Fields
    /// </summary>
    /// <remarks>
    /// Returns list of all custom fields
    /// </remarks>
    /// <param name="scopes">Comma-separated list of scopes</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<AttributePublicApiDTO> GetDeviceGlobalCustomFields(Scopes? scopes = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDeviceGlobalCustomFieldsAsync(scopes, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Device Custom Fields
    /// </summary>
    /// <remarks>
    /// Returns list of all custom fields
    /// </remarks>
    /// <param name="scopes">Comma-separated list of scopes</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AttributePublicApiDTO>> GetDeviceGlobalCustomFieldsAsync(Scopes? scopes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/device-custom-fields"
          urlBuilder_.Append("v2/device-custom-fields");
          urlBuilder_.Append('?');
          if (scopes != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("scopes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scopes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AttributePublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List users
    /// </summary>
    /// <remarks>
    /// Returns list of users
    /// </remarks>
    /// <param name="userType">User type filter</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<User> GetUsers(UserType? userType = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetUsersAsync(userType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List users
    /// </summary>
    /// <remarks>
    /// Returns list of users
    /// </remarks>
    /// <param name="userType">User type filter</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetUsersAsync(UserType? userType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/users"
          urlBuilder_.Append("v2/users");
          urlBuilder_.Append('?');
          if (userType != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("userType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<User>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List groups (saved searches)
    /// </summary>
    /// <remarks>
    /// Returns list of groups
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Group> GetGroups()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetGroupsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List groups (saved searches)
    /// </summary>
    /// <remarks>
    /// Returns list of groups
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Group>> GetGroupsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/groups"
          urlBuilder_.Append("v2/groups");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Group>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List activities
    /// </summary>
    /// <remarks>
    /// Returns activity log in reverse chronological order
    /// </remarks>
    /// <param name="class">Activity Class (System/Device) filter</param>
    /// <param name="before">Return activities recorded prior to specified date</param>
    /// <param name="after">Return activities recorded after to specified date</param>
    /// <param name="olderThan">Return activities recorded that are newer than specified activity ID</param>
    /// <param name="newerThan">Return activities recorded that are older than specified activity ID</param>
    /// <param name="type">Return activities of type</param>
    /// <param name="status">Return activities with status(es)</param>
    /// <param name="user">Return activities for user(s)</param>
    /// <param name="seriesUid">Return activities related to alert (series)</param>
    /// <param name="df">Device filter</param>
    /// <param name="pageSize">Limit number of activities to return</param>
    /// <param name="lang">Language tag</param>
    /// <param name="tz">Time Zone</param>
    /// <param name="sourceConfigUid">Allows users to make a request directed to a specific script</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual ActivitiesResponse GetActivities(Class? @class = null, string before = null, string after = null, int? olderThan = null, int? newerThan = null, string type = null, string status = null, string user = null, string seriesUid = null, string df = null, int? pageSize = null, string lang = null, string tz = null, string sourceConfigUid = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetActivitiesAsync(@class, before, after, olderThan, newerThan, type, status, user, seriesUid, df, pageSize, lang, tz, sourceConfigUid, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List activities
    /// </summary>
    /// <remarks>
    /// Returns activity log in reverse chronological order
    /// </remarks>
    /// <param name="class">Activity Class (System/Device) filter</param>
    /// <param name="before">Return activities recorded prior to specified date</param>
    /// <param name="after">Return activities recorded after to specified date</param>
    /// <param name="olderThan">Return activities recorded that are newer than specified activity ID</param>
    /// <param name="newerThan">Return activities recorded that are older than specified activity ID</param>
    /// <param name="type">Return activities of type</param>
    /// <param name="status">Return activities with status(es)</param>
    /// <param name="user">Return activities for user(s)</param>
    /// <param name="seriesUid">Return activities related to alert (series)</param>
    /// <param name="df">Device filter</param>
    /// <param name="pageSize">Limit number of activities to return</param>
    /// <param name="lang">Language tag</param>
    /// <param name="tz">Time Zone</param>
    /// <param name="sourceConfigUid">Allows users to make a request directed to a specific script</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<ActivitiesResponse> GetActivitiesAsync(Class? @class = null, string before = null, string after = null, int? olderThan = null, int? newerThan = null, string type = null, string status = null, string user = null, string seriesUid = null, string df = null, int? pageSize = null, string lang = null, string tz = null, string sourceConfigUid = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/activities"
          urlBuilder_.Append("v2/activities");
          urlBuilder_.Append('?');
          if (@class != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("class")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(@class, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (before != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("before")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (after != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("after")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (olderThan != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("olderThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(olderThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (newerThan != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("newerThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(newerThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (type != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (status != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (user != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("user")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(user, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (seriesUid != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("seriesUid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seriesUid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (lang != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("lang")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (tz != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("tz")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tz, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (sourceConfigUid != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("sourceConfigUid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sourceConfigUid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<ActivitiesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List devices
    /// </summary>
    /// <remarks>
    /// Returns list of devices (basic node information)
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="pageSize">Limit number of devices to return</param>
    /// <param name="after">Last Node ID from previous page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<NodeWithDetailedReferences> GetDevices(string df = null, int? pageSize = null, int? after = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDevicesAsync(df, pageSize, after, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List devices
    /// </summary>
    /// <remarks>
    /// Returns list of devices (basic node information)
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="pageSize">Limit number of devices to return</param>
    /// <param name="after">Last Node ID from previous page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NodeWithDetailedReferences>> GetDevicesAsync(string df = null, int? pageSize = null, int? after = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/devices"
          urlBuilder_.Append("v2/devices");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (after != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("after")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NodeWithDetailedReferences>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List locations
    /// </summary>
    /// <remarks>
    /// Returns flat list of all locations for all organizations
    /// </remarks>
    /// <param name="pageSize">Limit number of locations to return</param>
    /// <param name="after">Last Location Identifier from previous page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<LocationWithOrganizationRef> GetLocations(int? pageSize = null, int? after = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetLocationsAsync(pageSize, after, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List locations
    /// </summary>
    /// <remarks>
    /// Returns flat list of all locations for all organizations
    /// </remarks>
    /// <param name="pageSize">Limit number of locations to return</param>
    /// <param name="after">Last Location Identifier from previous page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LocationWithOrganizationRef>> GetLocationsAsync(int? pageSize = null, int? after = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/locations"
          urlBuilder_.Append("v2/locations");
          urlBuilder_.Append('?');
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (after != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("after")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LocationWithOrganizationRef>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List policies
    /// </summary>
    /// <remarks>
    /// Returns list of policies
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Policy> GetPolicies()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetPoliciesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List policies
    /// </summary>
    /// <remarks>
    /// Returns list of policies
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Policy>> GetPoliciesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/policies"
          urlBuilder_.Append("v2/policies");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Policy>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Creates new Policy
    /// </summary>
    /// <remarks>
    /// Creates new policy using (New Root, Child, Copy)
    /// </remarks>
    /// <param name="mode">Policy creation mode</param>
    /// <param name="templatePolicyId">Template Policy identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual Policy CreatePolicy(Mode3? mode = null, int? templatePolicyId = null, PolicyInfo body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await CreatePolicyAsync(mode, templatePolicyId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Creates new Policy
    /// </summary>
    /// <remarks>
    /// Creates new policy using (New Root, Child, Copy)
    /// </remarks>
    /// <param name="mode">Policy creation mode</param>
    /// <param name="templatePolicyId">Template Policy identifier</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Policy> CreatePolicyAsync(Mode3? mode = null, int? templatePolicyId = null, PolicyInfo body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/policies"
          urlBuilder_.Append("v2/policies");
          urlBuilder_.Append('?');
          if (mode != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("mode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (templatePolicyId != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("templatePolicyId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(templatePolicyId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<Policy>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List scheduled tasks
    /// </summary>
    /// <remarks>
    /// Returns list of registered scheduled tasks
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<ScheduledTask> GetScheduledTasks()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetScheduledTasksAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List scheduled tasks
    /// </summary>
    /// <remarks>
    /// Returns list of registered scheduled tasks
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScheduledTask>> GetScheduledTasksAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/tasks"
          urlBuilder_.Append("v2/tasks");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ScheduledTask>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List active jobs
    /// </summary>
    /// <remarks>
    /// Returns list of running jobs
    /// </remarks>
    /// <param name="jobType">Job Type filter</param>
    /// <param name="df">Device filter</param>
    /// <param name="lang">Language tag</param>
    /// <param name="tz">Time Zone</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Job> GetActiveJobs(string jobType = null, string df = null, string lang = null, string tz = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetActiveJobsAsync(jobType, df, lang, tz, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List active jobs
    /// </summary>
    /// <remarks>
    /// Returns list of running jobs
    /// </remarks>
    /// <param name="jobType">Job Type filter</param>
    /// <param name="df">Device filter</param>
    /// <param name="lang">Language tag</param>
    /// <param name="tz">Time Zone</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Job>> GetActiveJobsAsync(string jobType = null, string df = null, string lang = null, string tz = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/jobs"
          urlBuilder_.Append("v2/jobs");
          urlBuilder_.Append('?');
          if (jobType != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("jobType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jobType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (lang != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("lang")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (tz != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("tz")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tz, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Job>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List organizations (Detailed)
    /// </summary>
    /// <remarks>
    /// Returns list of organizations with locations and policy mappings
    /// </remarks>
    /// <param name="pageSize">Limit number of organizations to return</param>
    /// <param name="after">Last Organization Identifier from previous page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<OrganizationDetailed> GetOrganizationsDetailed(int? pageSize = null, int? after = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetOrganizationsDetailedAsync(pageSize, after, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List organizations (Detailed)
    /// </summary>
    /// <remarks>
    /// Returns list of organizations with locations and policy mappings
    /// </remarks>
    /// <param name="pageSize">Limit number of organizations to return</param>
    /// <param name="after">Last Organization Identifier from previous page</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationDetailed>> GetOrganizationsDetailedAsync(int? pageSize = null, int? after = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/organizations-detailed"
          urlBuilder_.Append("v2/organizations-detailed");
          urlBuilder_.Append('?');
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (after != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("after")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrganizationDetailed>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List device roles
    /// </summary>
    /// <remarks>
    /// Returns list of device roles
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<NodeRole> GetNodeRoles()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetNodeRolesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List device roles
    /// </summary>
    /// <remarks>
    /// Returns list of device roles
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NodeRole>> GetNodeRolesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/roles"
          urlBuilder_.Append("v2/roles");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NodeRole>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List supported 3rd party software
    /// </summary>
    /// <remarks>
    /// Returns available software products (3rd party patching)
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<SoftwareProduct> GetSoftwareProducts()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetSoftwareProductsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List supported 3rd party software
    /// </summary>
    /// <remarks>
    /// Returns available software products (3rd party patching)
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SoftwareProduct>> GetSoftwareProductsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/software-products"
          urlBuilder_.Append("v2/software-products");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SoftwareProduct>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List devices (detailed)
    /// </summary>
    /// <remarks>
    /// Returns list of devices with additional information
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Device> GetDevicesDetailed(string df = null, int? pageSize = null, int? after = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetDevicesDetailedAsync(df, pageSize, after, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List devices (detailed)
    /// </summary>
    /// <remarks>
    /// Returns list of devices with additional information
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Device>> GetDevicesDetailedAsync(string df = null, int? pageSize = null, int? after = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/devices-detailed"
          urlBuilder_.Append("v2/devices-detailed");
          urlBuilder_.Append('?');
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (pageSize != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (after != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("after")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Device>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List active alerts (triggered conditions)
    /// </summary>
    /// <remarks>
    /// Returns list of active alerts/triggered conditions
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="lang">Language tag</param>
    /// <param name="tz">Time Zone</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<Alert> GetAlerts(string sourceType = null, string df = null, string lang = null, string tz = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetAlertsAsync(sourceType, df, lang, tz, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List active alerts (triggered conditions)
    /// </summary>
    /// <remarks>
    /// Returns list of active alerts/triggered conditions
    /// </remarks>
    /// <param name="df">Device filter</param>
    /// <param name="lang">Language tag</param>
    /// <param name="tz">Time Zone</param>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Alert>> GetAlertsAsync(string sourceType = null, string df = null, string lang = null, string tz = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/alerts"
          urlBuilder_.Append("v2/alerts");
          urlBuilder_.Append('?');
          if (sourceType != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("sourceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sourceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (df != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("df")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(df, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (lang != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("lang")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          if (tz != null)
          {
            urlBuilder_.Append(System.Uri.EscapeDataString("tz")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tz, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
          }
          urlBuilder_.Length--;

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Alert>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Get list of ticket status
    /// </summary>
    /// <remarks>
    /// Get list of ticket status
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<TicketStatusPublicApiDTO> GetAllStatuses()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetAllStatusesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get list of ticket status
    /// </summary>
    /// <remarks>
    /// Get list of ticket status
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TicketStatusPublicApiDTO>> GetAllStatusesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/statuses"
          urlBuilder_.Append("v2/ticketing/statuses");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TicketStatusPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List boards
    /// </summary>
    /// <remarks>
    /// Returns list of ticketing boards
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<TicketingBoardPublicApiDTO> GetBoards()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetBoardsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List boards
    /// </summary>
    /// <remarks>
    /// Returns list of ticketing boards
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TicketingBoardPublicApiDTO>> GetBoardsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/trigger/boards"
          urlBuilder_.Append("v2/ticketing/trigger/boards");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TicketingBoardPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List of tickets for board
    /// </summary>
    /// <remarks>
    /// Run a board. Returns list of tickets matching the board condition and filters. Allows pagination
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual TicketDashboardPublicApiDTO GetTicketsByBoard(int boardId, TicketBoardScrollingRequestDTO body = null)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetTicketsByBoardAsync(boardId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List of tickets for board
    /// </summary>
    /// <remarks>
    /// Run a board. Returns list of tickets matching the board condition and filters. Allows pagination
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<TicketDashboardPublicApiDTO> GetTicketsByBoardAsync(int boardId, TicketBoardScrollingRequestDTO body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (boardId == null)
        throw new System.ArgumentNullException("boardId");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
          var content_ = new System.Net.Http.StringContent(json_);
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/trigger/board/{boardId}/run"
          urlBuilder_.Append("v2/ticketing/trigger/board/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(boardId, System.Globalization.CultureInfo.InvariantCulture)));
          urlBuilder_.Append("/run");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<TicketDashboardPublicApiDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List contacts
    /// </summary>
    /// <remarks>
    /// Returns list of contacts
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<ContactResponseDTO> GetContacts()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetContactsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List contacts
    /// </summary>
    /// <remarks>
    /// Returns list of contacts
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactResponseDTO>> GetContactsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/contact/contacts"
          urlBuilder_.Append("v2/ticketing/contact/contacts");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContactResponseDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List ticket forms
    /// </summary>
    /// <remarks>
    /// Returns list of ticket forms with their fields
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<TicketFormPublicApiDTO> GetTicketForms()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetTicketFormsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List ticket forms
    /// </summary>
    /// <remarks>
    /// Returns list of ticket forms with their fields
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TicketFormPublicApiDTO>> GetTicketFormsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/ticket-form"
          urlBuilder_.Append("v2/ticketing/ticket-form");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TicketFormPublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// Ticket form
    /// </summary>
    /// <remarks>
    /// Returns a ticket form with fields
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual TicketFormPublicApiDTO GetTicketFormById(int id)
    {
      return System.Threading.Tasks.Task.Run(async () => await GetTicketFormByIdAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Ticket form
    /// </summary>
    /// <remarks>
    /// Returns a ticket form with fields
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<TicketFormPublicApiDTO> GetTicketFormByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (id == null)
        throw new System.ArgumentNullException("id");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/ticket-form/{id}"
          urlBuilder_.Append("v2/ticketing/ticket-form/");
          urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<TicketFormPublicApiDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// List ticket attributes
    /// </summary>
    /// <remarks>
    /// Returns list of the ticket attributes
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual System.Collections.Generic.ICollection<TicketingAttributePublicApiDTO> GetTicketAttributes()
    {
      return System.Threading.Tasks.Task.Run(async () => await GetTicketAttributesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List ticket attributes
    /// </summary>
    /// <remarks>
    /// Returns list of the ticket attributes
    /// </remarks>
    /// <returns>default response</returns>
    /// <exception cref="NinjaOneException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TicketingAttributePublicApiDTO>> GetTicketAttributesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          var urlBuilder_ = new System.Text.StringBuilder();
          if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
          // Operation Path: "v2/ticketing/attributes"
          urlBuilder_.Append("v2/ticketing/attributes");

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
            foreach (var item_ in response_.Headers)
              headers_[item_.Key] = item_.Value;
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TicketingAttributePublicApiDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new NinjaOneException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new NinjaOneException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new NinjaOneException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value == null)
      {
        return "";
      }

      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
          return converted == null ? string.Empty : converted;
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value is string[])
      {
        return string.Join(",", (string[])value);
      }
      else if (value.GetType().IsArray)
      {
        var valueArray = (System.Array)value;
        var valueTextArray = new string[valueArray.Length];
        for (var i = 0; i < valueArray.Length; i++)
        {
          valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
        }
        return string.Join(",", valueTextArray);
      }

      var result = System.Convert.ToString(value, cultureInfo);
      return result == null ? "" : result;
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceIDList
  {
    [Newtonsoft.Json.JsonProperty("devices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<int> Devices { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Feature/product/integration configuration settings
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record FeatureSettings
  {
    /// <summary>
    /// Configured product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Product { get; set; }

    /// <summary>
    /// Is enabled
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Enabled { get; set; }

    /// <summary>
    /// Feature deployment targets
    /// </summary>
    [Newtonsoft.Json.JsonProperty("targets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Targets { get; set; }

    /// <summary>
    /// Feature options
    /// </summary>
    [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Options { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Location
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Location
  {
    /// <summary>
    /// Location name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Address { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    /// <summary>
    /// Location identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Node role policy assignments
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NodeRolePolicyAssignment
  {
    /// <summary>
    /// Node Role Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeRoleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NodeRoleId { get; set; }

    /// <summary>
    /// Policy Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PolicyId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record OrganizationDetailed
  {
    /// <summary>
    /// Organization full name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Organization Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Device Approval Mode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeApprovalMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public OrganizationDetailedNodeApprovalMode NodeApprovalMode { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    /// <summary>
    /// Organization identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// List of locations
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Location> Locations { get; set; }

    /// <summary>
    /// Node role policy assignments
    /// </summary>
    [Newtonsoft.Json.JsonProperty("policies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<NodeRolePolicyAssignment> Policies { get; set; }

    [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OrganizationSettings Settings { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Organization settings
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record OrganizationSettings
  {
    [Newtonsoft.Json.JsonProperty("trayicon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FeatureSettings Trayicon { get; set; }

    [Newtonsoft.Json.JsonProperty("splashtop", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FeatureSettings Splashtop { get; set; }

    [Newtonsoft.Json.JsonProperty("teamviewer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FeatureSettings Teamviewer { get; set; }

    [Newtonsoft.Json.JsonProperty("backup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FeatureSettings Backup { get; set; }

    [Newtonsoft.Json.JsonProperty("psa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FeatureSettings Psa { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record LocationModel
  {
    /// <summary>
    /// Location name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Address { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record OrganizationWithLocationsAndPolicyAssignmentsModel
  {
    /// <summary>
    /// Organization full name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Organization Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Device Approval Mode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeApprovalMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public OrganizationWithLocationsAndPolicyAssignmentsModelNodeApprovalMode NodeApprovalMode { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    /// <summary>
    /// List of locations
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<LocationModel> Locations { get; set; }

    /// <summary>
    /// Node role policy assignments
    /// </summary>
    [Newtonsoft.Json.JsonProperty("policies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<NodeRolePolicyAssignment> Policies { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Custom HTTP Headers (i.e. Authorization)
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record HTTPHeader
  {
    /// <summary>
    /// Header name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Header value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record WebhookConfiguration
  {
    /// <summary>
    /// Callback (WebHook) URL for activity notifications
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Url { get; set; }

    /// <summary>
    /// Activity filter
    /// </summary>
    [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Activities { get; set; }

    /// <summary>
    /// Which references to expand in payloads
    /// </summary>
    [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Expand { get; set; }

    /// <summary>
    /// Custom HTTP Headers (i.e. Authorization)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<HTTPHeader> Headers { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Fields
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ClientDocumentAttributeWithValuePublicApiDTO
  {
    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Value { get; set; }

    /// <summary>
    /// Value Last Updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("valueUpdateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double ValueUpdateTime { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ClientDocumentWithAttributeValuesPublicApiDTO
  {
    /// <summary>
    /// Document Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DocumentId { get; set; }

    /// <summary>
    /// Document Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentName { get; set; }

    /// <summary>
    /// Document Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentDescription { get; set; }

    /// <summary>
    /// Document Last Updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentUpdateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double DocumentUpdateTime { get; set; }

    /// <summary>
    /// Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ClientDocumentAttributeWithValuePublicApiDTO> Fields { get; set; }

    /// <summary>
    /// Document Template Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentTemplateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DocumentTemplateId { get; set; }

    /// <summary>
    /// Document Template Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentTemplateName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentTemplateName { get; set; }

    /// <summary>
    /// Organization Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ClientDocumentWithUpdatedAttributeValuesPublicApiDTO
  {
    /// <summary>
    /// Document Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DocumentId { get; set; }

    /// <summary>
    /// Document Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentName { get; set; }

    /// <summary>
    /// Document Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentDescription { get; set; }

    /// <summary>
    /// Document Last Updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentUpdateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double DocumentUpdateTime { get; set; }

    /// <summary>
    /// Updated Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updatedFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ClientDocumentAttributeWithValuePublicApiDTO> UpdatedFields { get; set; }

    /// <summary>
    /// Document Template Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentTemplateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DocumentTemplateId { get; set; }

    /// <summary>
    /// Document Template Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentTemplateName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentTemplateName { get; set; }

    /// <summary>
    /// Organization Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ClientDocumentWithAttributeValuesBulkUpdatePublicApiRequest
  {
    /// <summary>
    /// Document Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DocumentId { get; set; }

    /// <summary>
    /// Document Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentName { get; set; }

    /// <summary>
    /// Document Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentDescription { get; set; }

    /// <summary>
    /// Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ClientDocumentWithAttributeValuesPublicApiRequest
  {
    /// <summary>
    /// Document Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentName { get; set; }

    /// <summary>
    /// Document Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentDescription { get; set; }

    /// <summary>
    /// Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ClientDocumentWithAttributeValuesBulkCreatePublicApiRequest
  {
    /// <summary>
    /// Document Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentName { get; set; }

    /// <summary>
    /// Document Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DocumentDescription { get; set; }

    /// <summary>
    /// Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    /// <summary>
    /// Document Template Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documentTemplateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DocumentTemplateId { get; set; }

    /// <summary>
    /// Organization Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AttributeContentAdvancedSettings
  {
    [Newtonsoft.Json.JsonProperty("fileMaxSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int FileMaxSize { get; set; }

    [Newtonsoft.Json.JsonProperty("fileExtensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> FileExtensions { get; set; }

    [Newtonsoft.Json.JsonProperty("dateFilters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AttributeContentAdvancedSettingsDateFilters DateFilters { get; set; }

    [Newtonsoft.Json.JsonProperty("maxCharacters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int MaxCharacters { get; set; }

    [Newtonsoft.Json.JsonProperty("complexityRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AttributeContentAdvancedSettingsComplexityRules ComplexityRules { get; set; }

    [Newtonsoft.Json.JsonProperty("numericRange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AttributeContentAdvancedSettingsNumericRange NumericRange { get; set; }

    [Newtonsoft.Json.JsonProperty("org", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<int> Org { get; set; }

    [Newtonsoft.Json.JsonProperty("nodeClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public System.Collections.Generic.ICollection<NodeClass> NodeClass { get; set; }

    [Newtonsoft.Json.JsonProperty("ipAddressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributeContentAdvancedSettingsIpAddressType IpAddressType { get; set; }

    [Newtonsoft.Json.JsonProperty("expandLargeValueOnRender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool ExpandLargeValueOnRender { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AttributeContentAdvancedSettingsComplexityRules
  {
    [Newtonsoft.Json.JsonProperty("mustContainOneInteger", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool MustContainOneInteger { get; set; }

    [Newtonsoft.Json.JsonProperty("mustContainOneLowercaseLetter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool MustContainOneLowercaseLetter { get; set; }

    [Newtonsoft.Json.JsonProperty("mustContainOneUppercaseLetter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool MustContainOneUppercaseLetter { get; set; }

    [Newtonsoft.Json.JsonProperty("greaterOrEqualThanSixCharacters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool GreaterOrEqualThanSixCharacters { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AttributeContentAdvancedSettingsDateFilters
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributeContentAdvancedSettingsDateFiltersType Type { get; set; }

    [Newtonsoft.Json.JsonProperty("selected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Selected { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AttributeContentAdvancedSettingsNumericRange
  {
    [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Min { get; set; }

    [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Max { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Field content
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DocumentAttributeContentPublicApi
  {
    /// <summary>
    /// Used for dropdown options
    /// </summary>
    [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DocumentAttributeContentValuePublicApi> Values { get; set; }

    /// <summary>
    /// Indicates if the field is required
    /// </summary>
    [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Required { get; set; }

    /// <summary>
    /// Footer text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("footerText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FooterText { get; set; }

    /// <summary>
    /// Tooltip text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tooltipText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TooltipText { get; set; }

    [Newtonsoft.Json.JsonProperty("advancedSettings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AttributeContentAdvancedSettings AdvancedSettings { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Used for dropdown options
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DocumentAttributeContentValuePublicApi
  {
    /// <summary>
    /// Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Id { get; set; }

    /// <summary>
    /// Dropdown option name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Indicates if a dropdown option is active
    /// </summary>
    [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Active { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Document template fields
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DocumentItemPublicApiDTO
  {
    /// <summary>
    /// Field identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int FieldId { get; set; }

    /// <summary>
    /// Field or UI element name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldLabel { get; set; }

    /// <summary>
    /// Field name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldName { get; set; }

    /// <summary>
    /// Field description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldDescription { get; set; }

    /// <summary>
    /// Field type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DocumentItemPublicApiDTOFieldType FieldType { get; set; }

    /// <summary>
    /// Field technician permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldTechnicianPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DocumentItemPublicApiDTOFieldTechnicianPermission FieldTechnicianPermission { get; set; }

    /// <summary>
    /// Field script permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldScriptPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DocumentItemPublicApiDTOFieldScriptPermission FieldScriptPermission { get; set; }

    /// <summary>
    /// Field public API permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldApiPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DocumentItemPublicApiDTOFieldApiPermission FieldApiPermission { get; set; }

    /// <summary>
    /// Default value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldDefaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldDefaultValue { get; set; }

    [Newtonsoft.Json.JsonProperty("fieldContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DocumentAttributeContentPublicApi FieldContent { get; set; }

    /// <summary>
    /// UI element identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid UiElementUid { get; set; }

    /// <summary>
    /// UI element name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UiElementName { get; set; }

    /// <summary>
    /// UI element type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DocumentItemPublicApiDTOUiElementType UiElementType { get; set; }

    /// <summary>
    /// UI element value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UiElementValue { get; set; }

    /// <summary>
    /// Creation time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreatedTime { get; set; }

    /// <summary>
    /// Last updated time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updatedTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdatedTime { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DocumentTemplatePublicApiDTO
  {
    /// <summary>
    /// Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Name of the template (must be unique)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Description of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Indicates if multiple instances of the document template is allowed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("allowMultiple", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool AllowMultiple { get; set; }

    /// <summary>
    /// Indicates if the document template is mandatory
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mandatory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Mandatory { get; set; }

    /// <summary>
    /// Creation time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    /// <summary>
    /// Last updated time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdateTime { get; set; }

    /// <summary>
    /// Document template fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DocumentItemPublicApiDTO> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// List of fields and ui elements
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record UpdateDocumentItemPublicApiRequest
  {
    /// <summary>
    /// Field identifier (Used to identify existing fields)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int FieldId { get; set; }

    /// <summary>
    /// Field or UI element name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldLabel { get; set; }

    /// <summary>
    /// Field name (Immutable except for new fields)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldName { get; set; }

    /// <summary>
    /// Field description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldDescription { get; set; }

    /// <summary>
    /// Field type (Immutable except for new fields)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpdateDocumentItemPublicApiRequestFieldType FieldType { get; set; }

    /// <summary>
    /// Field technician permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldTechnicianPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpdateDocumentItemPublicApiRequestFieldTechnicianPermission FieldTechnicianPermission { get; set; }

    /// <summary>
    /// Field script permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldScriptPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpdateDocumentItemPublicApiRequestFieldScriptPermission FieldScriptPermission { get; set; }

    /// <summary>
    /// Field public API permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldApiPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpdateDocumentItemPublicApiRequestFieldApiPermission FieldApiPermission { get; set; }

    /// <summary>
    /// Default value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldDefaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldDefaultValue { get; set; }

    [Newtonsoft.Json.JsonProperty("fieldContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DocumentAttributeContentPublicApi FieldContent { get; set; }

    /// <summary>
    /// UI element identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid UiElementUid { get; set; }

    /// <summary>
    /// UI element name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UiElementName { get; set; }

    /// <summary>
    /// UI element type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpdateDocumentItemPublicApiRequestUiElementType UiElementType { get; set; }

    /// <summary>
    /// UI element value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UiElementValue { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record UpdateDocumentTemplatePublicApiRequest
  {
    /// <summary>
    /// Name of the template (must be unique)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Description of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Indicates if the document template is mandatory
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mandatory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Mandatory { get; set; }

    /// <summary>
    /// List of fields and ui elements
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<UpdateDocumentItemPublicApiRequest> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Field content
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NewDocumentAttributeContentPublicApi
  {
    /// <summary>
    /// Used for dropdown options
    /// </summary>
    [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<NewDocumentAttributeContentValuePublicApi> Values { get; set; }

    /// <summary>
    /// Indicates if the field is required
    /// </summary>
    [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Required { get; set; }

    /// <summary>
    /// Footer text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("footerText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FooterText { get; set; }

    /// <summary>
    /// Tooltip text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tooltipText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TooltipText { get; set; }

    [Newtonsoft.Json.JsonProperty("advancedSettings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AttributeContentAdvancedSettings AdvancedSettings { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Used for dropdown options
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NewDocumentAttributeContentValuePublicApi
  {
    /// <summary>
    /// Dropdown option name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// List of fields and ui elements
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NewDocumentItemPublicApiRequest
  {
    /// <summary>
    /// Field label
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldLabel { get; set; }

    /// <summary>
    /// Field name (Immutable value)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldName { get; set; }

    /// <summary>
    /// Field description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldDescription { get; set; }

    /// <summary>
    /// Field type (Immutable value)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NewDocumentItemPublicApiRequestFieldType FieldType { get; set; }

    /// <summary>
    /// Field technician permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldTechnicianPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NewDocumentItemPublicApiRequestFieldTechnicianPermission FieldTechnicianPermission { get; set; }

    /// <summary>
    /// Field script permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldScriptPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NewDocumentItemPublicApiRequestFieldScriptPermission FieldScriptPermission { get; set; }

    /// <summary>
    /// Field public API permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldApiPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NewDocumentItemPublicApiRequestFieldApiPermission FieldApiPermission { get; set; }

    /// <summary>
    /// Default value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fieldDefaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FieldDefaultValue { get; set; }

    [Newtonsoft.Json.JsonProperty("fieldContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public NewDocumentAttributeContentPublicApi FieldContent { get; set; }

    /// <summary>
    /// UI element name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UiElementName { get; set; }

    /// <summary>
    /// UI element type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NewDocumentItemPublicApiRequestUiElementType UiElementType { get; set; }

    /// <summary>
    /// UI element value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uiElementValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UiElementValue { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NewDocumentTemplatePublicApiRequest
  {
    /// <summary>
    /// Name of the template (must be unique)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Description of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// States if multiple instances of the document template is allowed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("allowMultiple", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool AllowMultiple { get; set; }

    /// <summary>
    /// Indicates if the document template is mandatory
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mandatory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Mandatory { get; set; }

    /// <summary>
    /// List of fields and ui elements
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<NewDocumentItemPublicApiRequest> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record RelatedItemPublicApiDTO
  {
    /// <summary>
    /// Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Type of Relation
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public RelatedItemPublicApiDTOType Type { get; set; }

    /// <summary>
    /// Entity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Entity { get; set; }

    /// <summary>
    /// Entity Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int EntityId { get; set; }

    /// <summary>
    /// Entity Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public RelatedItemPublicApiDTOEntityType EntityType { get; set; }

    /// <summary>
    /// Related Entity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("relEntity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object RelEntity { get; set; }

    /// <summary>
    /// Related Entity Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("relEntityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int RelEntityId { get; set; }

    /// <summary>
    /// Related Entity Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("relEntityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public RelatedItemPublicApiDTORelEntityType RelEntityType { get; set; }

    /// <summary>
    /// Related item value (Attachment meta data / Secure information)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Value { get; set; }

    /// <summary>
    /// Creation time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    /// <summary>
    /// Last update time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdateTime { get; set; }

    /// <summary>
    /// The identifier of the user who created the related item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdByAppUserId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int CreatedByAppUserId { get; set; }

    /// <summary>
    /// The identifier of the last user to update the related item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updatedByAppUserId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int UpdatedByAppUserId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NewRelatedItemEntityRequest
  {
    /// <summary>
    /// Related Entity Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("relEntityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NewRelatedItemEntityRequestRelEntityType RelEntityType { get; set; }

    /// <summary>
    /// Related Entity Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("relEntityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int RelEntityId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NewRelatedItemSecureValueRequest
  {
    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// URL
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Url { get; set; }

    /// <summary>
    /// Notes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Notes { get; set; }

    /// <summary>
    /// Username
    /// </summary>
    [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Username { get; set; }

    /// <summary>
    /// Password
    /// </summary>
    [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Password { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record BodyPart
  {
    [Newtonsoft.Json.JsonProperty("contentDisposition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ContentDisposition ContentDisposition { get; set; }

    [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Entity { get; set; }

    [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Headers { get; set; }

    [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MediaType MediaType { get; set; }

    [Newtonsoft.Json.JsonProperty("messageBodyWorkers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MessageBodyWorkers MessageBodyWorkers { get; set; }

    [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MultiPart Parent { get; set; }

    [Newtonsoft.Json.JsonProperty("providers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Providers { get; set; }

    [Newtonsoft.Json.JsonProperty("parameterizedHeaders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ParameterizedHeader>> ParameterizedHeaders { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ContentDisposition
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

    [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileName { get; set; }

    [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset CreationDate { get; set; }

    [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset ModificationDate { get; set; }

    [Newtonsoft.Json.JsonProperty("readDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset ReadDate { get; set; }

    [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Size { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record FormDataBodyPart
  {
    [Newtonsoft.Json.JsonProperty("contentDisposition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ContentDisposition ContentDisposition { get; set; }

    [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Entity { get; set; }

    [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Headers { get; set; }

    [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MediaType2 MediaType { get; set; }

    [Newtonsoft.Json.JsonProperty("messageBodyWorkers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MessageBodyWorkers MessageBodyWorkers { get; set; }

    [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MultiPart Parent { get; set; }

    [Newtonsoft.Json.JsonProperty("providers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Providers { get; set; }

    [Newtonsoft.Json.JsonProperty("simple", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Simple { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("formDataContentDisposition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FormDataContentDisposition FormDataContentDisposition { get; set; }

    [Newtonsoft.Json.JsonProperty("parameterizedHeaders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ParameterizedHeader>> ParameterizedHeaders { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record FormDataContentDisposition
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

    [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileName { get; set; }

    [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset CreationDate { get; set; }

    [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset ModificationDate { get; set; }

    [Newtonsoft.Json.JsonProperty("readDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset ReadDate { get; set; }

    [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Size { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record MessageBodyWorkers
  {

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record MultiPart
  {
    [Newtonsoft.Json.JsonProperty("contentDisposition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ContentDisposition ContentDisposition { get; set; }

    [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Entity { get; set; }

    [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Headers { get; set; }

    [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MediaType3 MediaType { get; set; }

    [Newtonsoft.Json.JsonProperty("messageBodyWorkers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MessageBodyWorkers MessageBodyWorkers { get; set; }

    [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MultiPart Parent { get; set; }

    [Newtonsoft.Json.JsonProperty("providers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Providers { get; set; }

    [Newtonsoft.Json.JsonProperty("bodyParts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<BodyPart> BodyParts { get; set; }

    [Newtonsoft.Json.JsonProperty("parameterizedHeaders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ParameterizedHeader>> ParameterizedHeaders { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ParameterizedHeader
  {
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record CarbonCopy
  {
    /// <summary>
    /// List of user uids to be carbon-copied
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<System.Guid?> Uids { get; set; }

    /// <summary>
    /// emails
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Emails { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketingAttributeValue
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id { get; set; }

    /// <summary>
    /// Attribute identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attributeId", Required = Newtonsoft.Json.Required.Always)]
    public int AttributeId { get; set; }

    /// <summary>
    /// Attribute value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    public string Value { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record UpdateTicket
  {
    /// <summary>
    /// ticket version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
    public int Version { get; set; }

    /// <summary>
    /// Client (Organization) identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Always)]
    public int ClientId { get; set; }

    /// <summary>
    /// Ticket form identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ticketFormId", Required = Newtonsoft.Json.Required.Always)]
    public int TicketFormId { get; set; }

    /// <summary>
    /// Location identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? LocationId { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? NodeId { get; set; }

    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Always)]
    public string Subject { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
    public string Status { get; set; } = "1000";

    /// <summary>
    /// Type of ticket
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpdateTicketType? Type { get; set; }

    [Newtonsoft.Json.JsonProperty("cc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CarbonCopy Cc { get; set; }

    [Newtonsoft.Json.JsonProperty("assignedAppUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? AssignedAppUserId { get; set; }

    [Newtonsoft.Json.JsonProperty("requesterUid", Required = Newtonsoft.Json.Required.Always)]
    public System.Guid RequesterUid { get; set; }

    [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpdateTicketSeverity? Severity { get; set; } = NinjaOne.V2.UpdateTicketSeverity.NONE;

    [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpdateTicketPriority? Priority { get; set; } = NinjaOne.V2.UpdateTicketPriority.NONE;

    /// <summary>
    /// Ticket parent identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parentTicketId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ParentTicketId { get; set; }

    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TicketingAttributeValue> Attributes { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AttributeValueDTO
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("attributeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int AttributeId { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Value { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record CcList
  {
    [Newtonsoft.Json.JsonProperty("uids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<System.Guid> Uids { get; set; }

    [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Emails { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketDTO
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Version { get; set; }

    [Newtonsoft.Json.JsonProperty("nodeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NodeId { get; set; }

    [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ClientId { get; set; }

    [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int LocationId { get; set; }

    [Newtonsoft.Json.JsonProperty("assignedAppUserId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int AssignedAppUserId { get; set; }

    [Newtonsoft.Json.JsonProperty("requesterUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid RequesterUid { get; set; }

    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TicketStatusPublicApiDTO Status { get; set; }

    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TicketDTOType Type { get; set; }

    [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TicketDTOPriority Priority { get; set; }

    [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TicketDTOSeverity Severity { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketFormId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int TicketFormId { get; set; }

    [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TicketDTOSource Source { get; set; }

    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    [Newtonsoft.Json.JsonProperty("ccList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CcList CcList { get; set; }

    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Deleted { get; set; }

    [Newtonsoft.Json.JsonProperty("attributeValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AttributeValueDTO> AttributeValues { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketStatusPublicApiDTO
  {
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ParentId { get; set; }

    [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int StatusId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NewTicket
  {
    /// <summary>
    /// Client (Organization) identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Always)]
    public int ClientId { get; set; }

    /// <summary>
    /// Ticket form identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ticketFormId", Required = Newtonsoft.Json.Required.Always)]
    public int TicketFormId { get; set; }

    /// <summary>
    /// Location identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? LocationId { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? NodeId { get; set; }

    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Always)]
    public string Subject { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public NewTicketLogEntry Description { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
    public string Status { get; set; } = "1000";

    /// <summary>
    /// Type of ticket
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NewTicketType? Type { get; set; }

    [Newtonsoft.Json.JsonProperty("cc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CarbonCopy Cc { get; set; }

    [Newtonsoft.Json.JsonProperty("assignedAppUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? AssignedAppUserId { get; set; }

    [Newtonsoft.Json.JsonProperty("requesterUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid RequesterUid { get; set; }

    [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NewTicketSeverity? Severity { get; set; } = NinjaOne.V2.NewTicketSeverity.NONE;

    [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NewTicketPriority? Priority { get; set; } = NinjaOne.V2.NewTicketPriority.NONE;

    /// <summary>
    /// Ticket parent identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parentTicketId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ParentTicketId { get; set; }

    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TicketingAttributeValue> Attributes { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NewTicketLogEntry
  {
    [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Always)]
    public bool Public { get; set; } = true;

    [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Body { get; set; }

    [Newtonsoft.Json.JsonProperty("htmlBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlBody { get; set; }

    /// <summary>
    /// time in seconds
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timeTracked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? TimeTracked { get; set; }

    [Newtonsoft.Json.JsonProperty("duplicateInIncidents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool DuplicateInIncidents { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TechniciansTaggedMetadataDTO
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Deleted { get; set; }

    [Newtonsoft.Json.JsonProperty("permitted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Permitted { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketLogEntryAutomationDTO
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool System { get; set; }

    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketLogEntryPublicApiDTO
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("appUserContactUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid AppUserContactUid { get; set; }

    [Newtonsoft.Json.JsonProperty("appUserContactId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int AppUserContactId { get; set; }

    [Newtonsoft.Json.JsonProperty("appUserContactType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TicketLogEntryPublicApiDTOAppUserContactType AppUserContactType { get; set; }

    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TicketLogEntryPublicApiDTOType Type { get; set; }

    [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Body { get; set; }

    [Newtonsoft.Json.JsonProperty("htmlBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlBody { get; set; }

    [Newtonsoft.Json.JsonProperty("fullEmailBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FullEmailBody { get; set; }

    [Newtonsoft.Json.JsonProperty("publicEntry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool PublicEntry { get; set; }

    [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool System { get; set; }

    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("changeDiff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object ChangeDiff { get; set; }

    [Newtonsoft.Json.JsonProperty("activityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long ActivityId { get; set; }

    [Newtonsoft.Json.JsonProperty("timeTracked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int TimeTracked { get; set; }

    [Newtonsoft.Json.JsonProperty("technicianTagged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<int> TechnicianTagged { get; set; }

    [Newtonsoft.Json.JsonProperty("techniciansTaggedMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TechniciansTaggedMetadataDTO> TechniciansTaggedMetadata { get; set; }

    [Newtonsoft.Json.JsonProperty("automation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TicketLogEntryAutomationDTO Automation { get; set; }

    [Newtonsoft.Json.JsonProperty("blockedByInvoice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool BlockedByInvoice { get; set; }

    [Newtonsoft.Json.JsonProperty("emailResponse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool EmailResponse { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record BackupJob
  {
    /// <summary>
    /// Job id
    /// </summary>
    [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid JobId { get; set; }

    /// <summary>
    /// Job start time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("jobStartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double JobStartTime { get; set; }

    /// <summary>
    /// Job end time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("jobEndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double JobEndTime { get; set; }

    /// <summary>
    /// Job status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("jobStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string JobStatus { get; set; }

    /// <summary>
    /// Plan id
    /// </summary>
    [Newtonsoft.Json.JsonProperty("planGuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid PlanGuid { get; set; }

    /// <summary>
    /// Plan name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("planName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PlanName { get; set; }

    /// <summary>
    /// Plan type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("planType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PlanType { get; set; }

    /// <summary>
    /// Total bytes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalActualStorageBytes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long TotalActualStorageBytes { get; set; }

    /// <summary>
    /// Organization id
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    /// <summary>
    /// Location id
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int LocationId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record BackupJobReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<BackupJob> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Cursor
  {
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Offset { get; set; }

    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Count { get; set; }

    [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Expires { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record LoggedOnUser
  {
    /// <summary>
    /// User name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserName { get; set; }

    /// <summary>
    /// Time of logon
    /// </summary>
    [Newtonsoft.Json.JsonProperty("logonTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LogonTime { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record OSPatch
  {
    /// <summary>
    /// Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Id { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Severity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Severity { get; set; }

    /// <summary>
    /// Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    /// <summary>
    /// Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    /// <summary>
    /// Installation attempt timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("installedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double InstalledAt { get; set; }

    /// <summary>
    /// KB Number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("kbNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string KbNumber { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record SoftwarePatch
  {
    /// <summary>
    /// Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Id { get; set; }

    /// <summary>
    /// Software product identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid ProductIdentifier { get; set; }

    /// <summary>
    /// Patch title
    /// </summary>
    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    /// <summary>
    /// Impact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("impact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Impact { get; set; }

    /// <summary>
    /// Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    /// <summary>
    /// Patch type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    /// <summary>
    /// Installation attempt timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("installedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double InstalledAt { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record WindowsServiceConfiguration
  {
    /// <summary>
    /// Start Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("startType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public WindowsServiceConfigurationStartType StartType { get; set; }

    /// <summary>
    /// Username
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserName { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NetworkInterface
  {
    /// <summary>
    /// Adapter Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("adapterName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AdapterName { get; set; }

    /// <summary>
    /// Default Gateway
    /// </summary>
    [Newtonsoft.Json.JsonProperty("defaultGateway", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DefaultGateway { get; set; }

    /// <summary>
    /// Interface Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interfaceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InterfaceType { get; set; }

    /// <summary>
    /// DNS HostName
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dnsHostName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DnsHostName { get; set; }

    /// <summary>
    /// DNS Servers
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dnsServers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DnsServers { get; set; }

    /// <summary>
    /// Interface Index
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interfaceIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InterfaceIndex { get; set; }

    /// <summary>
    /// Interface Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interfaceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InterfaceName { get; set; }

    /// <summary>
    /// IP Address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ipAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> IpAddress { get; set; }

    /// <summary>
    /// Link Speed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("linkSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LinkSpeed { get; set; }

    /// <summary>
    /// MAC Address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("macAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> MacAddress { get; set; }

    /// <summary>
    /// MTU
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mtu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Mtu { get; set; }

    /// <summary>
    /// Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    /// <summary>
    /// Subnet Mask
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subnetMask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SubnetMask { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AgentDevice : Device
  {
    [Newtonsoft.Json.JsonProperty("os", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OperatingSystem Os { get; set; }

    [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ComputerSystem System { get; set; }

    [Newtonsoft.Json.JsonProperty("memory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Memory Memory { get; set; }

    /// <summary>
    /// Processors
    /// </summary>
    [Newtonsoft.Json.JsonProperty("processors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Processor> Processors { get; set; }

    /// <summary>
    /// Disk Volumes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("volumes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Volume> Volumes { get; set; }

    /// <summary>
    /// Username that logged in most recently
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastLoggedInUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastLoggedInUser { get; set; }

  }

  /// <summary>
  /// Device Backup Usage
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record BackupUsage
  {
    /// <summary>
    /// Revisions current size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("revisionsCurrentSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long RevisionsCurrentSize { get; set; }

    /// <summary>
    /// Revisions previous size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("revisionsPreviousSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long RevisionsPreviousSize { get; set; }

    /// <summary>
    /// Revisions deleted size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("revisionsDeletedSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long RevisionsDeletedSize { get; set; }

    /// <summary>
    /// Revisions local file folder size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localFileFolderSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long LocalFileFolderSize { get; set; }

    /// <summary>
    /// Revisions local image size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localImageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long LocalImageSize { get; set; }

    /// <summary>
    /// Revisions cloud file folder size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cloudFileFolderSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long CloudFileFolderSize { get; set; }

    /// <summary>
    /// Revisions cloud image size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cloudImageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long CloudImageSize { get; set; }

    /// <summary>
    /// Revisions total size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("revisionsTotalSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long RevisionsTotalSize { get; set; }

    /// <summary>
    /// Revisions cloud total size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cloudTotalSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long CloudTotalSize { get; set; }

    /// <summary>
    /// Revisions local total size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localTotalSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long LocalTotalSize { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record CloudMonitorDNS : Device
  {
    /// <summary>
    /// Is enabled?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Enabled { get; set; }

    /// <summary>
    /// Monitoring interval (seconds)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Interval { get; set; }

    /// <summary>
    /// Timeout (seconds)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Timeout { get; set; }

    /// <summary>
    /// Monitoring target (hostname, IP address or URL)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Target { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record CloudMonitorEmailServer : Device
  {
    /// <summary>
    /// Is enabled?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Enabled { get; set; }

    /// <summary>
    /// Monitoring interval (seconds)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Interval { get; set; }

    /// <summary>
    /// Timeout (seconds)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Timeout { get; set; }

    /// <summary>
    /// SMTP Host (hostname or IP address)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Target { get; set; }

    /// <summary>
    /// SMTP Port
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smtpPort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int SmtpPort { get; set; }

    /// <summary>
    /// Sender's email (FROM)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("senderEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SenderEmail { get; set; }

    /// <summary>
    /// Recipient's email (TO)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("recipientEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RecipientEmail { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record CloudMonitorHTTP : Device
  {
    /// <summary>
    /// Is enabled?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Enabled { get; set; }

    /// <summary>
    /// Monitoring interval (seconds)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Interval { get; set; }

    /// <summary>
    /// Timeout (seconds)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Timeout { get; set; }

    /// <summary>
    /// Monitoring target (hostname, IP address or URL)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Target { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record CloudMonitorPing : Device
  {
    /// <summary>
    /// Is enabled?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Enabled { get; set; }

    /// <summary>
    /// Monitoring interval (seconds)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Interval { get; set; }

    /// <summary>
    /// Timeout (seconds)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Timeout { get; set; }

    /// <summary>
    /// Monitoring target (hostname, IP address or URL)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Target { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record CloudMonitorPortScan : Device
  {
    /// <summary>
    /// Is enabled?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Enabled { get; set; }

    /// <summary>
    /// Monitoring interval (seconds)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Interval { get; set; }

    /// <summary>
    /// Timeout (seconds)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Timeout { get; set; }

    /// <summary>
    /// Monitoring target (hostname, IP address or URL)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Target { get; set; }

  }

  /// <summary>
  /// Computer System (Chassis)
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ComputerSystem
  {
    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Manufacturer { get; set; }

    /// <summary>
    /// Model
    /// </summary>
    [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Model { get; set; }

    /// <summary>
    /// Bios Serial Number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("biosSerialNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BiosSerialNumber { get; set; }

    /// <summary>
    /// Serial Number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SerialNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Domain { get; set; }

    [Newtonsoft.Json.JsonProperty("domainRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DomainRole { get; set; }

    [Newtonsoft.Json.JsonProperty("numberOfProcessors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NumberOfProcessors { get; set; }

    [Newtonsoft.Json.JsonProperty("totalPhysicalMemory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long TotalPhysicalMemory { get; set; }

    [Newtonsoft.Json.JsonProperty("virtualMachine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool VirtualMachine { get; set; }

    [Newtonsoft.Json.JsonProperty("chassisType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ChassisType { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "deviceType")]
  [JsonInheritanceAttribute("AgentDevice", typeof(AgentDevice))]
  [JsonInheritanceAttribute("CloudMonitorDNS", typeof(CloudMonitorDNS))]
  [JsonInheritanceAttribute("CloudMonitorEmailServer", typeof(CloudMonitorEmailServer))]
  [JsonInheritanceAttribute("CloudMonitorHTTP", typeof(CloudMonitorHTTP))]
  [JsonInheritanceAttribute("CloudMonitorPing", typeof(CloudMonitorPing))]
  [JsonInheritanceAttribute("CloudMonitorPortScan", typeof(CloudMonitorPortScan))]
  [JsonInheritanceAttribute("MdmDevice", typeof(MdmDevice))]
  [JsonInheritanceAttribute("NMSServer", typeof(NMSServer))]
  [JsonInheritanceAttribute("NMSTarget", typeof(NMSTarget))]
  [JsonInheritanceAttribute("VMGuest", typeof(VMGuest))]
  [JsonInheritanceAttribute("VMHost", typeof(VMHost))]
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Device
  {
    /// <summary>
    /// Node (Device) identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Parent Node identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parentDeviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ParentDeviceId { get; set; }

    /// <summary>
    /// Organization identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    /// <summary>
    /// Location identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int LocationId { get; set; }

    /// <summary>
    /// Node Class
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DeviceNodeClass NodeClass { get; set; }

    /// <summary>
    /// Node Role identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeRoleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NodeRoleId { get; set; }

    /// <summary>
    /// Node Role policy ID based on organization Policy Mapping
    /// </summary>
    [Newtonsoft.Json.JsonProperty("rolePolicyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int RolePolicyId { get; set; }

    /// <summary>
    /// Assigned policy ID (overrides organization policy mapping)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PolicyId { get; set; }

    /// <summary>
    /// Approval Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("approvalStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DeviceApprovalStatus ApprovalStatus { get; set; }

    /// <summary>
    /// Is Offline?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("offline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Offline { get; set; }

    /// <summary>
    /// Display Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    /// <summary>
    /// System Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("systemName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SystemName { get; set; }

    /// <summary>
    /// DNS Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dnsName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DnsName { get; set; }

    /// <summary>
    /// NETBIOS Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("netbiosName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NetbiosName { get; set; }

    /// <summary>
    /// Created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Created { get; set; }

    /// <summary>
    /// Last Contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastContact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastContact { get; set; }

    /// <summary>
    /// Last data submission timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastUpdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastUpdate { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    [Newtonsoft.Json.JsonProperty("maintenance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Maintenance Maintenance { get; set; }

    [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public NodeReferences References { get; set; }

    /// <summary>
    /// Device IP addresses
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ipAddresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> IpAddresses { get; set; }

    /// <summary>
    /// Device MAC addresses
    /// </summary>
    [Newtonsoft.Json.JsonProperty("macAddresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> MacAddresses { get; set; }

    /// <summary>
    /// Device Public IP Address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("publicIP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PublicIP { get; set; }

    /// <summary>
    /// Device Notes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Note> Notes { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Maintenance mode status
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Maintenance
  {
    /// <summary>
    /// Maintenance mode status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public MaintenanceStatus Status { get; set; }

    /// <summary>
    /// Maintenance mode start time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Start { get; set; }

    /// <summary>
    /// Maintenance mode end time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double End { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record MdmDevice : Device
  {

  }

  /// <summary>
  /// Memory information
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Memory
  {
    /// <summary>
    /// Capacity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Capacity { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NMSServer : Device
  {

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NMSTarget : Device
  {

  }

  /// <summary>
  /// Expanded entity references
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NodeReferences
  {
    [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Organization Organization { get; set; }

    [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Location Location { get; set; }

    [Newtonsoft.Json.JsonProperty("rolePolicy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Policy RolePolicy { get; set; }

    [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Policy Policy { get; set; }

    [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public NodeRole Role { get; set; }

    [Newtonsoft.Json.JsonProperty("backupUsage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BackupUsage BackupUsage { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Device Role
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NodeRole
  {
    /// <summary>
    /// Device Role identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Node Class
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NodeRoleNodeClass NodeClass { get; set; }

    /// <summary>
    /// Is custom node role?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Custom { get; set; }

    /// <summary>
    /// Chassis Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("chassisType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NodeRoleChassisType ChassisType { get; set; }

    /// <summary>
    /// Date created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Created { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Device Notes
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Note
  {
    /// <summary>
    /// Note text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Text { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Operating System
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record OperatingSystem
  {
    /// <summary>
    /// Manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Manufacturer { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Architecture
    /// </summary>
    [Newtonsoft.Json.JsonProperty("architecture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Architecture { get; set; }

    /// <summary>
    /// Last boot time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastBootTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastBootTime { get; set; }

    /// <summary>
    /// Build number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("buildNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BuildNumber { get; set; }

    /// <summary>
    /// Release ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("releaseId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReleaseId { get; set; }

    /// <summary>
    /// Service Pack Major Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePackMajorVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ServicePackMajorVersion { get; set; }

    /// <summary>
    /// Service Pack Minor Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePackMinorVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ServicePackMinorVersion { get; set; }

    /// <summary>
    /// Locale
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Locale { get; set; }

    /// <summary>
    /// Language
    /// </summary>
    [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Language { get; set; }

    /// <summary>
    /// Operating system has pending reboot requests
    /// </summary>
    [Newtonsoft.Json.JsonProperty("needsReboot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool NeedsReboot { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Organization
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Organization
  {
    /// <summary>
    /// Organization full name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Organization Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Device Approval Mode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeApprovalMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public OrganizationNodeApprovalMode NodeApprovalMode { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    /// <summary>
    /// Organization identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Assigned policy ID (overrides organization policy mapping)
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Policy
  {
    /// <summary>
    /// Policy identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Parent Policy identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parentPolicyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ParentPolicyId { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Node Class
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PolicyNodeClass NodeClass { get; set; }

    /// <summary>
    /// Last update timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Updated { get; set; }

    /// <summary>
    /// Is Default Policy for Node Class
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeClassDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool NodeClassDefault { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Processors
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Processor
  {
    /// <summary>
    /// Architecture
    /// </summary>
    [Newtonsoft.Json.JsonProperty("architecture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Architecture { get; set; }

    /// <summary>
    /// Max Clock Speed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("maxClockSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long MaxClockSpeed { get; set; }

    /// <summary>
    /// Current Clock Speed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clockSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long ClockSpeed { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Number of Cores
    /// </summary>
    [Newtonsoft.Json.JsonProperty("numCores", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NumCores { get; set; }

    /// <summary>
    /// Number of Logical Cores]
    /// </summary>
    [Newtonsoft.Json.JsonProperty("numLogicalCores", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NumLogicalCores { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record VMGuest : Device
  {
    /// <summary>
    /// Guest VM Files
    /// </summary>
    [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Files { get; set; }

    /// <summary>
    /// Full Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FullName { get; set; }

    /// <summary>
    /// Last VM Boot Time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastBootTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastBootTime { get; set; }

    /// <summary>
    /// VM Memory size (bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("memorySize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long MemorySize { get; set; }

    /// <summary>
    /// Number of Cores per Socket
    /// </summary>
    [Newtonsoft.Json.JsonProperty("coresPerSocket", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int CoresPerSocket { get; set; }

    /// <summary>
    /// Total Number of CPU Cores
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cpuCores", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int CpuCores { get; set; }

    /// <summary>
    /// Current power state
    /// </summary>
    [Newtonsoft.Json.JsonProperty("powerState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PowerState { get; set; }

    /// <summary>
    /// Guest tools installation type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("toolsInstallType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ToolsInstallType { get; set; }

    /// <summary>
    /// Guest tools status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("toolStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ToolStatus { get; set; }

    /// <summary>
    /// Guest tools version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("toolsVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ToolsVersion { get; set; }

    /// <summary>
    /// Guest OS full name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("guestOSFullName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string GuestOSFullName { get; set; }

    /// <summary>
    /// Guest OS family
    /// </summary>
    [Newtonsoft.Json.JsonProperty("guestOSFamily", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string GuestOSFamily { get; set; }

    /// <summary>
    /// Guest OS identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("guestOSId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string GuestOSId { get; set; }

    /// <summary>
    /// Guest tools version status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("toolsVersionStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ToolsVersionStatus { get; set; }

    /// <summary>
    /// Number of snapshots
    /// </summary>
    [Newtonsoft.Json.JsonProperty("snapshotCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int SnapshotCount { get; set; }

    /// <summary>
    /// Total snapshot size (bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("snapshotTotalSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long SnapshotTotalSize { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record VMHost : Device
  {
    /// <summary>
    /// CPU Frequency
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cpuMhz", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long CpuMhz { get; set; }

    /// <summary>
    /// CPU Model
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cpuModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CpuModel { get; set; }

    /// <summary>
    /// Is Hyper-Threading active?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool HtActive { get; set; }

    /// <summary>
    /// Is Hyper-Threading available?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool HtAvailable { get; set; }

    /// <summary>
    /// Last toot time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastBootTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastBootTime { get; set; }

    /// <summary>
    /// Total memory size (bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("memorySize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long MemorySize { get; set; }

    /// <summary>
    /// Model
    /// </summary>
    [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Model { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Number of CPU Cores
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cpuCores", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int CpuCores { get; set; }

    /// <summary>
    /// Number of CPUs
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cpuPackages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int CpuPackages { get; set; }

    /// <summary>
    /// Total number of logical CPU cores
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cpuThreads", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int CpuThreads { get; set; }

    /// <summary>
    /// Service Tag
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceTag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceTag { get; set; }

    /// <summary>
    /// Vendor
    /// </summary>
    [Newtonsoft.Json.JsonProperty("vendor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Vendor { get; set; }

    /// <summary>
    /// Release Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("releaseName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReleaseName { get; set; }

    /// <summary>
    /// Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Version { get; set; }

    /// <summary>
    /// Build number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("buildNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BuildNumber { get; set; }

  }

  /// <summary>
  /// Disk Volumes
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Volume
  {
    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Drive Letter
    /// </summary>
    [Newtonsoft.Json.JsonProperty("driveLetter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DriveLetter { get; set; }

    /// <summary>
    /// Volume Label
    /// </summary>
    [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Label { get; set; }

    /// <summary>
    /// Device Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DeviceType { get; set; }

    /// <summary>
    /// File System Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fileSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileSystem { get; set; }

    /// <summary>
    /// Automatically Mounted
    /// </summary>
    [Newtonsoft.Json.JsonProperty("autoMount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool AutoMount { get; set; }

    /// <summary>
    /// Compressed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("compressed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Compressed { get; set; }

    /// <summary>
    /// Capacity (bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Capacity { get; set; }

    /// <summary>
    /// Free Space (bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("freeSpace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long FreeSpace { get; set; }

    /// <summary>
    /// Serial Number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SerialNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("bitLockerStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public VolumeBitLockerStatus BitLockerStatus { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// BitLocker Status
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record VolumeBitLockerStatus
  {
    /// <summary>
    /// Volume encryption or decryption status.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("conversionStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public VolumeBitLockerStatusConversionStatus ConversionStatus { get; set; }

    /// <summary>
    /// Indicated the encryption algorithm and key size used on the volume
    /// </summary>
    [Newtonsoft.Json.JsonProperty("encryptionMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public VolumeBitLockerStatusEncryptionMethod EncryptionMethod { get; set; }

    /// <summary>
    ///  indicates whether the volume and its encryption key (if any) are secured.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("protectionStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public VolumeBitLockerStatusProtectionStatus ProtectionStatus { get; set; }

    /// <summary>
    /// Indicates whether the contents of the volume are accessible from Windows
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lockStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public VolumeBitLockerStatusLockStatus LockStatus { get; set; }

    /// <summary>
    /// Is initialized for protection
    /// </summary>
    [Newtonsoft.Json.JsonProperty("initializedForProtection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool InitializedForProtection { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceMutableProperties
  {
    /// <summary>
    /// Display name (User assigned)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Node Role identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeRoleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NodeRoleId { get; set; }

    /// <summary>
    /// Assigned policy ID (overrides organization policy mapping, or reverts to organization policy if Null)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PolicyId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record RunScriptRequest
  {
    /// <summary>
    /// Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public RunScriptRequestType Type { get; set; }

    /// <summary>
    /// Script identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Built-in action identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Uid { get; set; }

    /// <summary>
    /// Action/Script parameters
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Parameters { get; set; }

    /// <summary>
    /// Credential role/identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("runAs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RunAs { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Activity
  {
    /// <summary>
    /// Activity identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Id { get; set; }

    /// <summary>
    /// Activity timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("activityTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double ActivityTime { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Severity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ActivitySeverity Severity { get; set; }

    /// <summary>
    /// Priority
    /// </summary>
    [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ActivityPriority Priority { get; set; }

    /// <summary>
    /// Activity series UID (job/condition UID)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("seriesUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid SeriesUid { get; set; }

    /// <summary>
    /// Activity type code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("activityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ActivityType ActivityType { get; set; }

    /// <summary>
    /// Activity status code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ActivityStatusCode StatusCode { get; set; }

    /// <summary>
    /// Status description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    /// <summary>
    /// Activity result
    /// </summary>
    [Newtonsoft.Json.JsonProperty("activityResult", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ActivityResult ActivityResult { get; set; }

    /// <summary>
    /// Source configuration/policy element reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sourceConfigUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid SourceConfigUid { get; set; }

    /// <summary>
    /// Source configuration/policy element name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sourceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SourceName { get; set; }

    /// <summary>
    /// Activity subject
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    /// <summary>
    /// User identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int UserId { get; set; }

    /// <summary>
    /// Activity message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Message { get; set; }

    /// <summary>
    /// Activity type description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    /// <summary>
    /// Activity data
    /// </summary>
    [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Data { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NodeActivitiesResponse
  {
    /// <summary>
    /// Last recorded activity ID for account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastActivityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long LastActivityId { get; set; }

    [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Activity> Activities { get; set; }

    /// <summary>
    /// Last recorded activity ID for device
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastNodeActivityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long LastNodeActivityId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DiskDrive
  {
    /// <summary>
    /// Number of bytes per sector
    /// </summary>
    [Newtonsoft.Json.JsonProperty("bytesPerSector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int BytesPerSector { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Interface type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interfaceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InterfaceType { get; set; }

    /// <summary>
    /// Manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Manufacturer { get; set; }

    /// <summary>
    /// Media Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MediaType { get; set; }

    /// <summary>
    /// Model
    /// </summary>
    [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Model { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Number of partitions
    /// </summary>
    [Newtonsoft.Json.JsonProperty("partitionCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PartitionCount { get; set; }

    /// <summary>
    /// Serial number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SerialNumber { get; set; }

    /// <summary>
    /// Size (Bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Size { get; set; }

    /// <summary>
    /// Is S.M.A.R.T. capable?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smartCapable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool SmartCapable { get; set; }

    /// <summary>
    /// Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Application
  {
    /// <summary>
    /// Installation Date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("installDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset InstallDate { get; set; }

    /// <summary>
    /// Location
    /// </summary>
    [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Location { get; set; }

    /// <summary>
    /// Product Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Publisher
    /// </summary>
    [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Publisher { get; set; }

    /// <summary>
    /// Size on disk
    /// </summary>
    [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Size { get; set; }

    /// <summary>
    /// Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Version { get; set; }

    /// <summary>
    /// Product Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductCode { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Alert
  {
    /// <summary>
    /// Alert UID (activity series UID)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Uid { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Alert message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Message { get; set; }

    /// <summary>
    /// Alert creation timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    /// <summary>
    /// Alert last updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdateTime { get; set; }

    /// <summary>
    /// Alert origin
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AlertSourceType SourceType { get; set; }

    /// <summary>
    /// Source configuration/policy element reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sourceConfigUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid SourceConfigUid { get; set; }

    /// <summary>
    /// Source configuration/policy element name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sourceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SourceName { get; set; }

    /// <summary>
    /// Alert subject
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    /// <summary>
    /// User identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int UserId { get; set; }

    /// <summary>
    /// Related PSA ticket ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("psaTicketId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object PsaTicketId { get; set; }

    /// <summary>
    /// PSA ticket template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ticketTemplateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int TicketTemplateId { get; set; }

    /// <summary>
    /// Alert data
    /// </summary>
    [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Data { get; set; }

    [Newtonsoft.Json.JsonProperty("device", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public NodeWithDetailedReferences Device { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Device information
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NodeWithDetailedReferences
  {
    /// <summary>
    /// Node (Device) identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Parent Node identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parentDeviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ParentDeviceId { get; set; }

    /// <summary>
    /// Organization identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    /// <summary>
    /// Location identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int LocationId { get; set; }

    /// <summary>
    /// Node Class
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NodeWithDetailedReferencesNodeClass NodeClass { get; set; }

    /// <summary>
    /// Node Role identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeRoleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NodeRoleId { get; set; }

    /// <summary>
    /// Node Role policy ID based on organization Policy Mapping
    /// </summary>
    [Newtonsoft.Json.JsonProperty("rolePolicyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int RolePolicyId { get; set; }

    /// <summary>
    /// Assigned policy ID (overrides organization policy mapping)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PolicyId { get; set; }

    /// <summary>
    /// Approval Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("approvalStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NodeWithDetailedReferencesApprovalStatus ApprovalStatus { get; set; }

    /// <summary>
    /// Is Offline?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("offline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Offline { get; set; }

    /// <summary>
    /// Display Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    /// <summary>
    /// System Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("systemName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SystemName { get; set; }

    /// <summary>
    /// DNS Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dnsName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DnsName { get; set; }

    /// <summary>
    /// NETBIOS Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("netbiosName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NetbiosName { get; set; }

    /// <summary>
    /// Created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Created { get; set; }

    /// <summary>
    /// Last Contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastContact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastContact { get; set; }

    /// <summary>
    /// Last data submission timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastUpdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastUpdate { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    [Newtonsoft.Json.JsonProperty("maintenance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Maintenance Maintenance { get; set; }

    [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public NodeReferences References { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Job
  {
    /// <summary>
    /// Task/Job UID (activity series UID)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Uid { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Job message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Message { get; set; }

    /// <summary>
    /// Job start timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    /// <summary>
    /// Job last updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdateTime { get; set; }

    /// <summary>
    /// Job origin
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public JobSourceType SourceType { get; set; }

    /// <summary>
    /// Source configuration/policy element reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sourceConfigUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid SourceConfigUid { get; set; }

    /// <summary>
    /// Source configuration/policy element name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sourceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SourceName { get; set; }

    /// <summary>
    /// Job subject
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    /// <summary>
    /// User identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int UserId { get; set; }

    /// <summary>
    /// Related PSA ticket ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("psaTicketId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object PsaTicketId { get; set; }

    /// <summary>
    /// PSA ticket template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ticketTemplateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int TicketTemplateId { get; set; }

    /// <summary>
    /// Job data
    /// </summary>
    [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Data { get; set; }

    [Newtonsoft.Json.JsonProperty("device", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public NodeWithDetailedReferences Device { get; set; }

    /// <summary>
    /// Job Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("jobStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public JobStatus JobStatus { get; set; }

    /// <summary>
    /// Job result
    /// </summary>
    [Newtonsoft.Json.JsonProperty("jobResult", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public JobResult JobResult { get; set; }

    /// <summary>
    /// Job Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("jobType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public JobType JobType { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record WindowsService
  {
    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Display Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Start Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("startType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public WindowsServiceStartType StartType { get; set; }

    /// <summary>
    /// User Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserName { get; set; }

    /// <summary>
    /// State
    /// </summary>
    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public WindowsServiceState State { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceLink
  {
    /// <summary>
    /// URL
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Url { get; set; }

    /// <summary>
    /// Link expiration time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Expires { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record PolicyOverrides
  {
    /// <summary>
    /// List of policy sections
    /// </summary>
    [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Overrides { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record CredentialReference
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CredentialReferenceType Type { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceCredentialOptions
  {
    [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Roles { get; set; }

    [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CredentialReference> Credentials { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceScriptingOptions
  {
    [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ScriptCategory> Categories { get; set; }

    [Newtonsoft.Json.JsonProperty("scripts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Script> Scripts { get; set; }

    [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DeviceCredentialOptions Credentials { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Script
  {
    /// <summary>
    /// Type of script/action
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ScriptType Type { get; set; }

    /// <summary>
    /// Custom script identifier (Scripts)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Built-in action identifier (Actions)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Uid { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Script language
    /// </summary>
    [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Language { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Applicable architectures
    /// </summary>
    [Newtonsoft.Json.JsonProperty("architecture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Architecture { get; set; }

    /// <summary>
    /// Script Category identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int CategoryId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ScriptCategory
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("internal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Internal { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record WindowsServiceControlRequest
  {
    /// <summary>
    /// Action
    /// </summary>
    [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public WindowsServiceControlRequestAction Action { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record RebootRequest
  {
    /// <summary>
    /// Stated reboot reason
    /// </summary>
    [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Reason { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record MaintenanceSettings
  {
    /// <summary>
    /// List of features that will be disabled during maintenance
    /// </summary>
    [Newtonsoft.Json.JsonProperty("disabledFeatures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public System.Collections.Generic.ICollection<DisabledFeatures> DisabledFeatures { get; set; }

    /// <summary>
    /// Maintenance window start (optional, defaults to now)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Start { get; set; }

    /// <summary>
    /// Maintenance window end
    /// </summary>
    [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double End { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record LocationBackupUsageSummary
  {
    /// <summary>
    /// Device location id
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int LocationId { get; set; }

    /// <summary>
    /// Device location name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocationName { get; set; }

    /// <summary>
    /// Device location description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocationDescription { get; set; }

    [Newtonsoft.Json.JsonProperty("revisionsCurrentSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long RevisionsCurrentSize { get; set; }

    [Newtonsoft.Json.JsonProperty("revisionsPreviousSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long RevisionsPreviousSize { get; set; }

    [Newtonsoft.Json.JsonProperty("revisionsDeletedSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long RevisionsDeletedSize { get; set; }

    [Newtonsoft.Json.JsonProperty("localFileFolderSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long LocalFileFolderSize { get; set; }

    [Newtonsoft.Json.JsonProperty("localImageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long LocalImageSize { get; set; }

    [Newtonsoft.Json.JsonProperty("cloudFileFolderSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long CloudFileFolderSize { get; set; }

    [Newtonsoft.Json.JsonProperty("cloudImageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long CloudImageSize { get; set; }

    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    [Newtonsoft.Json.JsonProperty("organizationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OrganizationName { get; set; }

    /// <summary>
    /// Revisions total size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("revisionsTotalSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long RevisionsTotalSize { get; set; }

    /// <summary>
    /// Revisions cloud total size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cloudTotalSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long CloudTotalSize { get; set; }

    /// <summary>
    /// Revisions local total size
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localTotalSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long LocalTotalSize { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record User
  {
    /// <summary>
    /// User identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Phone { get; set; }

    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Enabled { get; set; }

    [Newtonsoft.Json.JsonProperty("administrator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Administrator { get; set; }

    [Newtonsoft.Json.JsonProperty("permitAllClients", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool PermitAllClients { get; set; }

    [Newtonsoft.Json.JsonProperty("notifyAllClients", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool NotifyAllClients { get; set; }

    [Newtonsoft.Json.JsonProperty("mustChangePw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool MustChangePw { get; set; }

    [Newtonsoft.Json.JsonProperty("mfaConfigured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool MfaConfigured { get; set; }

    [Newtonsoft.Json.JsonProperty("userType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UserType2 UserType { get; set; }

    [Newtonsoft.Json.JsonProperty("invitationStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UserInvitationStatus InvitationStatus { get; set; }

    /// <summary>
    /// Identifier of organization for end-users
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    /// <summary>
    /// Device IDs which end-user is authorized to access
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<int> DeviceIds { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record OrganizationModel
  {
    /// <summary>
    /// Organization full name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Organization Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Device Approval Mode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeApprovalMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public OrganizationModelNodeApprovalMode NodeApprovalMode { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Link
  {
    /// <summary>
    /// URL
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Url { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record GenerateInstallerRequestDto
  {
    /// <summary>
    /// Organization identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    /// <summary>
    /// Location identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int LocationId { get; set; }

    /// <summary>
    /// Agent installer type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("installerType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public GenerateInstallerRequestDtoInstallerType InstallerType { get; set; }

    /// <summary>
    /// Usage limit
    /// </summary>
    [Newtonsoft.Json.JsonProperty("usageLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int UsageLimit { get; set; }

    /// <summary>
    /// content
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Content { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceNetworkInterfaces
  {
    /// <summary>
    /// Adapter Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("adapterName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AdapterName { get; set; }

    /// <summary>
    /// Default Gateway
    /// </summary>
    [Newtonsoft.Json.JsonProperty("defaultGateway", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DefaultGateway { get; set; }

    /// <summary>
    /// Interface Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interfaceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InterfaceType { get; set; }

    /// <summary>
    /// DNS HostName
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dnsHostName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DnsHostName { get; set; }

    /// <summary>
    /// DNS Servers
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dnsServers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DnsServers { get; set; }

    /// <summary>
    /// Interface Index
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interfaceIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InterfaceIndex { get; set; }

    /// <summary>
    /// Interface Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interfaceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InterfaceName { get; set; }

    /// <summary>
    /// IP Address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ipAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> IpAddress { get; set; }

    /// <summary>
    /// Link Speed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("linkSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LinkSpeed { get; set; }

    /// <summary>
    /// MAC Address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("macAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> MacAddress { get; set; }

    /// <summary>
    /// MTU
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mtu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Mtu { get; set; }

    /// <summary>
    /// Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    /// <summary>
    /// Subnet Mask
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subnetMask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SubnetMask { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NetworkInterfacesReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceNetworkInterfaces> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceOSPatch
  {
    /// <summary>
    /// Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Id { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Severity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Severity { get; set; }

    /// <summary>
    /// Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    /// <summary>
    /// Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    /// <summary>
    /// Installation attempt timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("installedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double InstalledAt { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    /// <summary>
    /// KB Number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("kbNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string KbNumber { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record OSPatchReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceOSPatch> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceSoftwarePatch
  {
    /// <summary>
    /// Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Id { get; set; }

    /// <summary>
    /// Software product identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid ProductIdentifier { get; set; }

    /// <summary>
    /// Patch title
    /// </summary>
    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    /// <summary>
    /// Impact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("impact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Impact { get; set; }

    /// <summary>
    /// Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    /// <summary>
    /// Patch type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    /// <summary>
    /// Installation attempt timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("installedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double InstalledAt { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record SoftwarePatchReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceSoftwarePatch> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceLoggedOnUser
  {
    /// <summary>
    /// User name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserName { get; set; }

    /// <summary>
    /// Time of logon
    /// </summary>
    [Newtonsoft.Json.JsonProperty("logonTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LogonTime { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record LoggedOnUsersReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceLoggedOnUser> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Value source (who/what updated the value)
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AttributeValueUpdatedByInfo
  {
    [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributeValueUpdatedByInfoSource Source { get; set; }

    [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public UserBasicInfo User { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Field values
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NodeAttributeInfo
  {
    /// <summary>
    /// Field name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Field Value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Value { get; set; }

    /// <summary>
    /// Last field update timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Updated { get; set; }

    [Newtonsoft.Json.JsonProperty("updatedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AttributeValueUpdatedByInfo UpdatedBy { get; set; }

    [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdateTime { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NodeAttributesDetailed
  {
    /// <summary>
    /// Entity identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Entity type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NodeAttributesDetailedEntityType EntityType { get; set; }

    /// <summary>
    /// Field values
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<NodeAttributeInfo> Fields { get; set; }

    [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int EntityId { get; set; }

    [Newtonsoft.Json.JsonProperty("definitionScope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public NodeAttributesDetailedDefinitionScope DefinitionScope { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NodeAttributesDetailedReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<NodeAttributesDetailed> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record UserBasicInfo
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ScopedAttributes
  {
    /// <summary>
    /// Value definition scope (entity type)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ScopedAttributesScope Scope { get; set; }

    /// <summary>
    /// Entity identifier (device, organization, location)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int EntityId { get; set; }

    /// <summary>
    /// Field values
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ScopedAttributesReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ScopedAttributes> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ScopedAttributesDetailed
  {
    /// <summary>
    /// Value definition scope (entity type)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ScopedAttributesDetailedScope Scope { get; set; }

    /// <summary>
    /// Entity identifier (device, organization, location)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int EntityId { get; set; }

    /// <summary>
    /// Field values
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<NodeAttributeInfo> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ScopedAttributesDetailedReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ScopedAttributesDetailed> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceProcessor
  {
    /// <summary>
    /// Architecture
    /// </summary>
    [Newtonsoft.Json.JsonProperty("architecture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Architecture { get; set; }

    /// <summary>
    /// Max Clock Speed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("maxClockSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long MaxClockSpeed { get; set; }

    /// <summary>
    /// Current Clock Speed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clockSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long ClockSpeed { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Number of Cores
    /// </summary>
    [Newtonsoft.Json.JsonProperty("numCores", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NumCores { get; set; }

    /// <summary>
    /// Number of Logical Cores]
    /// </summary>
    [Newtonsoft.Json.JsonProperty("numLogicalCores", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NumLogicalCores { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ProcessorReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceProcessor> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceVolume
  {
    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Drive Letter
    /// </summary>
    [Newtonsoft.Json.JsonProperty("driveLetter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DriveLetter { get; set; }

    /// <summary>
    /// Volume Label
    /// </summary>
    [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Label { get; set; }

    /// <summary>
    /// Device Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DeviceType { get; set; }

    /// <summary>
    /// File System Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fileSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileSystem { get; set; }

    /// <summary>
    /// Automatically Mounted
    /// </summary>
    [Newtonsoft.Json.JsonProperty("autoMount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool AutoMount { get; set; }

    /// <summary>
    /// Compressed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("compressed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Compressed { get; set; }

    /// <summary>
    /// Capacity (bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Capacity { get; set; }

    /// <summary>
    /// Free Space (bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("freeSpace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long FreeSpace { get; set; }

    /// <summary>
    /// Serial Number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SerialNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("bitLockerStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public VolumeBitLockerStatus BitLockerStatus { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record VolumesReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceVolume> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceOperatingSystem
  {
    /// <summary>
    /// Manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Manufacturer { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Architecture
    /// </summary>
    [Newtonsoft.Json.JsonProperty("architecture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Architecture { get; set; }

    /// <summary>
    /// Last boot time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastBootTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastBootTime { get; set; }

    /// <summary>
    /// Build number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("buildNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BuildNumber { get; set; }

    /// <summary>
    /// Release ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("releaseId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReleaseId { get; set; }

    /// <summary>
    /// Service Pack Major Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePackMajorVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ServicePackMajorVersion { get; set; }

    /// <summary>
    /// Service Pack Minor Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePackMinorVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ServicePackMinorVersion { get; set; }

    /// <summary>
    /// Locale
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Locale { get; set; }

    /// <summary>
    /// Language
    /// </summary>
    [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Language { get; set; }

    /// <summary>
    /// Operating system has pending reboot requests
    /// </summary>
    [Newtonsoft.Json.JsonProperty("needsReboot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool NeedsReboot { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record OperatingSystemsReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceOperatingSystem> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AntivirusThreatsReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceAntivirusThreat> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceAntivirusThreat
  {
    /// <summary>
    /// Threat name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// AntiVirus vendor product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductCode { get; set; }

    /// <summary>
    /// Threat Quarantine ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("quarantineId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string QuarantineId { get; set; }

    /// <summary>
    /// Threat Status (vendor specific)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    /// <summary>
    /// Type of Threat
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    /// <summary>
    /// Threat ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("threatId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long ThreatId { get; set; }

    /// <summary>
    /// Threat Category
    /// </summary>
    [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Category { get; set; }

    /// <summary>
    /// Threat Level
    /// </summary>
    [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Level { get; set; }

    /// <summary>
    /// Detection source
    /// </summary>
    [Newtonsoft.Json.JsonProperty("detectionSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DetectionSource { get; set; }

    /// <summary>
    /// Trace list (Files, Cookies, etc. Vendor specific)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("traceList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TraceList { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ComputerSystemsReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceComputerSystem> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceComputerSystem
  {
    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Manufacturer { get; set; }

    /// <summary>
    /// Model
    /// </summary>
    [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Model { get; set; }

    /// <summary>
    /// Bios Serial Number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("biosSerialNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BiosSerialNumber { get; set; }

    /// <summary>
    /// Serial Number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SerialNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Domain { get; set; }

    [Newtonsoft.Json.JsonProperty("domainRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DomainRole { get; set; }

    [Newtonsoft.Json.JsonProperty("numberOfProcessors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NumberOfProcessors { get; set; }

    [Newtonsoft.Json.JsonProperty("totalPhysicalMemory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long TotalPhysicalMemory { get; set; }

    [Newtonsoft.Json.JsonProperty("virtualMachine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool VirtualMachine { get; set; }

    [Newtonsoft.Json.JsonProperty("chassisType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ChassisType { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceDiskDrive
  {
    /// <summary>
    /// Number of bytes per sector
    /// </summary>
    [Newtonsoft.Json.JsonProperty("bytesPerSector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int BytesPerSector { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Interface type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interfaceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InterfaceType { get; set; }

    /// <summary>
    /// Manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Manufacturer { get; set; }

    /// <summary>
    /// Media Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MediaType { get; set; }

    /// <summary>
    /// Model
    /// </summary>
    [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Model { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Number of partitions
    /// </summary>
    [Newtonsoft.Json.JsonProperty("partitionCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PartitionCount { get; set; }

    /// <summary>
    /// Serial number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SerialNumber { get; set; }

    /// <summary>
    /// Size (Bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Size { get; set; }

    /// <summary>
    /// Is S.M.A.R.T. capable?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smartCapable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool SmartCapable { get; set; }

    /// <summary>
    /// Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DiskDriveReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceDiskDrive> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DevicePolicyOverrides
  {
    /// <summary>
    /// List of policy sections
    /// </summary>
    [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Overrides { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record PolicyOverridesReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DevicePolicyOverrides> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceUsageReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<NodeWithDetailedReferences> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceHealthReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceHealthSummary> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceHealthSummary
  {
    /// <summary>
    /// Active AV threats count
    /// </summary>
    [Newtonsoft.Json.JsonProperty("activeThreatsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ActiveThreatsCount { get; set; }

    /// <summary>
    /// Quarantined AV threats count
    /// </summary>
    [Newtonsoft.Json.JsonProperty("quarantinedThreatsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int QuarantinedThreatsCount { get; set; }

    /// <summary>
    /// Blocked AV threats count
    /// </summary>
    [Newtonsoft.Json.JsonProperty("blockedThreatsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int BlockedThreatsCount { get; set; }

    /// <summary>
    /// Number of failed OS patches
    /// </summary>
    [Newtonsoft.Json.JsonProperty("failedOSPatchesCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int FailedOSPatchesCount { get; set; }

    /// <summary>
    /// Number of pending OS patches
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pendingOSPatchesCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PendingOSPatchesCount { get; set; }

    /// <summary>
    /// Alerts count
    /// </summary>
    [Newtonsoft.Json.JsonProperty("alertCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int AlertCount { get; set; }

    /// <summary>
    /// Alerts job count
    /// </summary>
    [Newtonsoft.Json.JsonProperty("activeJobCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ActiveJobCount { get; set; }

    /// <summary>
    /// Number of failed software patches
    /// </summary>
    [Newtonsoft.Json.JsonProperty("failedSoftwarePatchesCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int FailedSoftwarePatchesCount { get; set; }

    /// <summary>
    /// Number of pending software patches
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pendingSoftwarePatchesCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PendingSoftwarePatchesCount { get; set; }

    /// <summary>
    /// Pending reboot reasons
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pendingRebootReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PendingRebootReason { get; set; }

    /// <summary>
    /// Antivirus installation status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("avInstallStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DeviceHealthSummaryAvInstallStatus AvInstallStatus { get; set; }

    /// <summary>
    /// Integrated products' installation statuses
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productsInstallationStatuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, Anonymous> ProductsInstallationStatuses { get; set; }

    /// <summary>
    /// Is device offline?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("offline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Offline { get; set; }

    /// <summary>
    /// Parent device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parentDeviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ParentDeviceId { get; set; }

    /// <summary>
    /// Is parent device offline
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parentOffline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool ParentOffline { get; set; }

    /// <summary>
    /// Health status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("healthStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DeviceHealthSummaryHealthStatus HealthStatus { get; set; }

    [Newtonsoft.Json.JsonProperty("installationIssuesCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int InstallationIssuesCount { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceApplication
  {
    /// <summary>
    /// Installation Date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("installDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset InstallDate { get; set; }

    /// <summary>
    /// Location
    /// </summary>
    [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Location { get; set; }

    /// <summary>
    /// Product Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Publisher
    /// </summary>
    [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Publisher { get; set; }

    /// <summary>
    /// Size on disk
    /// </summary>
    [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Size { get; set; }

    /// <summary>
    /// Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Version { get; set; }

    /// <summary>
    /// Product Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductCode { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record SoftwareReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceApplication> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AntivirusStatusReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceAntivirusStatus> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceAntivirusStatus
  {
    /// <summary>
    /// Product name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductName { get; set; }

    /// <summary>
    /// Product state
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductState { get; set; }

    /// <summary>
    /// Definition Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("definitionStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DefinitionStatus { get; set; }

    /// <summary>
    /// Product Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Version { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceRAIDController
  {
    /// <summary>
    /// Backup Battery Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("backupBatteryStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BackupBatteryStatus { get; set; }

    /// <summary>
    /// Battery Temperature
    /// </summary>
    [Newtonsoft.Json.JsonProperty("batteryTemperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int BatteryTemperature { get; set; }

    /// <summary>
    /// BIOS Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("biosVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BiosVersion { get; set; }

    /// <summary>
    /// Cache size (bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cacheSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long CacheSize { get; set; }

    /// <summary>
    /// Controller Index
    /// </summary>
    [Newtonsoft.Json.JsonProperty("controllerIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ControllerIndex { get; set; }

    /// <summary>
    /// Device Driver Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("driverName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DriverName { get; set; }

    /// <summary>
    /// Driver Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("driverVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DriverVersion { get; set; }

    /// <summary>
    /// Family
    /// </summary>
    [Newtonsoft.Json.JsonProperty("family", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Family { get; set; }

    /// <summary>
    /// Firmware Version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("firmwareVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirmwareVersion { get; set; }

    /// <summary>
    /// Hardware Revision
    /// </summary>
    [Newtonsoft.Json.JsonProperty("hardwareRevision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HardwareRevision { get; set; }

    /// <summary>
    /// Manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Manufacturer { get; set; }

    /// <summary>
    /// Manufacturing date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double ManufacturingDate { get; set; }

    /// <summary>
    /// Model
    /// </summary>
    [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Model { get; set; }

    /// <summary>
    /// Physical drive count
    /// </summary>
    [Newtonsoft.Json.JsonProperty("physicalDriveCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PhysicalDriveCount { get; set; }

    /// <summary>
    /// Slot
    /// </summary>
    [Newtonsoft.Json.JsonProperty("slot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Slot { get; set; }

    /// <summary>
    /// System Health Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("systemHealthStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SystemHealthStatus { get; set; }

    /// <summary>
    /// Virtual drive count
    /// </summary>
    [Newtonsoft.Json.JsonProperty("virtualDriveCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int VirtualDriveCount { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record RAIDControllerReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceRAIDController> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceRAIDDrive
  {
    /// <summary>
    /// Controller index
    /// </summary>
    [Newtonsoft.Json.JsonProperty("controllerIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ControllerIndex { get; set; }

    /// <summary>
    /// Drive Group
    /// </summary>
    [Newtonsoft.Json.JsonProperty("driveGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DriveGroup { get; set; }

    /// <summary>
    /// Drive Identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("driveId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DriveId { get; set; }

    /// <summary>
    /// Interface type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("interfaceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InterfaceType { get; set; }

    /// <summary>
    /// Location
    /// </summary>
    [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Location { get; set; }

    /// <summary>
    /// Media type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MediaType { get; set; }

    /// <summary>
    /// Model
    /// </summary>
    [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Model { get; set; }

    /// <summary>
    /// Protection Information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("protectionInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProtectionInfo { get; set; }

    /// <summary>
    /// Is self encrypted?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("selfEncrypted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool SelfEncrypted { get; set; }

    /// <summary>
    /// Serial number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Serial { get; set; }

    /// <summary>
    /// Size (bytes)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Size { get; set; }

    /// <summary>
    /// Spun?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("spun", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Spun { get; set; }

    /// <summary>
    /// Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record RAIDDriveReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceRAIDDrive> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceWindowsService
  {
    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Display Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Start Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("startType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DeviceWindowsServiceStartType StartType { get; set; }

    /// <summary>
    /// User Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UserName { get; set; }

    /// <summary>
    /// State
    /// </summary>
    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DeviceWindowsServiceState State { get; set; }

    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Date/Time when data was collected/updated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Timestamp { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record WindowsServiceReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceWindowsService> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NodeAttributes
  {
    /// <summary>
    /// Device identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceId { get; set; }

    /// <summary>
    /// Field values
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record NodeAttributesReport
  {
    [Newtonsoft.Json.JsonProperty("cursor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Cursor Cursor { get; set; }

    [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<NodeAttributes> Results { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Devices matching search query
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceSearchMatch
  {
    /// <summary>
    /// Node (Device) identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Parent Node identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parentDeviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ParentDeviceId { get; set; }

    /// <summary>
    /// Organization identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    /// <summary>
    /// Location identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int LocationId { get; set; }

    /// <summary>
    /// Node Class
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DeviceSearchMatchNodeClass NodeClass { get; set; }

    /// <summary>
    /// Node Role identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeRoleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int NodeRoleId { get; set; }

    /// <summary>
    /// Node Role policy ID based on organization Policy Mapping
    /// </summary>
    [Newtonsoft.Json.JsonProperty("rolePolicyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int RolePolicyId { get; set; }

    /// <summary>
    /// Assigned policy ID (overrides organization policy mapping)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PolicyId { get; set; }

    /// <summary>
    /// Approval Status
    /// </summary>
    [Newtonsoft.Json.JsonProperty("approvalStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DeviceSearchMatchApprovalStatus ApprovalStatus { get; set; }

    /// <summary>
    /// Is Offline?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("offline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Offline { get; set; }

    /// <summary>
    /// Display Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    /// <summary>
    /// System Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("systemName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SystemName { get; set; }

    /// <summary>
    /// DNS Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dnsName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DnsName { get; set; }

    /// <summary>
    /// NETBIOS Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("netbiosName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NetbiosName { get; set; }

    /// <summary>
    /// Created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Created { get; set; }

    /// <summary>
    /// Last Contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastContact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastContact { get; set; }

    /// <summary>
    /// Last data submission timestamp
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastUpdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastUpdate { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    [Newtonsoft.Json.JsonProperty("maintenance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Maintenance Maintenance { get; set; }

    [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public NodeReferences References { get; set; }

    /// <summary>
    /// Match score
    /// </summary>
    [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Score { get; set; }

    /// <summary>
    /// Name of the attribute that matched the query
    /// </summary>
    [Newtonsoft.Json.JsonProperty("matchAttr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MatchAttr { get; set; }

    /// <summary>
    /// Value of that attribute that matched
    /// </summary>
    [Newtonsoft.Json.JsonProperty("matchAttrValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MatchAttrValue { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record DeviceSearchResults
  {
    /// <summary>
    /// Search query
    /// </summary>
    [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Query { get; set; }

    /// <summary>
    /// Devices matching search query
    /// </summary>
    [Newtonsoft.Json.JsonProperty("devices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeviceSearchMatch> Devices { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AttributeContent
  {
    [Newtonsoft.Json.JsonProperty("customizeForEndUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool CustomizeForEndUser { get; set; }

    [Newtonsoft.Json.JsonProperty("endUserCustomization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EndUserCustomization EndUserCustomization { get; set; }

    [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<AttributeContentValue> Values { get; set; }

    [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Required { get; set; }

    [Newtonsoft.Json.JsonProperty("footerText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FooterText { get; set; }

    [Newtonsoft.Json.JsonProperty("tooltipText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TooltipText { get; set; }

    [Newtonsoft.Json.JsonProperty("advancedSettings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AttributeContentAdvancedSettings AdvancedSettings { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AttributeContentValue
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Active { get; set; }

    [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool System { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AttributePublicApiDTO
  {
    /// <summary>
    /// Entity Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributePublicApiDTOEntityType EntityType { get; set; }

    /// <summary>
    /// Scope
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributePublicApiDTOScope Scope { get; set; }

    /// <summary>
    /// Definition Scope
    /// </summary>
    [Newtonsoft.Json.JsonProperty("definitionScope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public System.Collections.Generic.ICollection<DefinitionScope> DefinitionScope { get; set; }

    /// <summary>
    /// Type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributePublicApiDTOType Type { get; set; }

    /// <summary>
    /// Label
    /// </summary>
    [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Label { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Default Value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DefaultValue { get; set; }

    /// <summary>
    /// End User Permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("endUserPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributePublicApiDTOEndUserPermission EndUserPermission { get; set; }

    /// <summary>
    /// Technician Permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("technicianPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributePublicApiDTOTechnicianPermission TechnicianPermission { get; set; }

    /// <summary>
    /// Script Permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scriptPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributePublicApiDTOScriptPermission ScriptPermission { get; set; }

    /// <summary>
    /// Public API Permission
    /// </summary>
    [Newtonsoft.Json.JsonProperty("apiPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributePublicApiDTOApiPermission ApiPermission { get; set; }

    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AttributeContent Content { get; set; }

    /// <summary>
    /// System
    /// </summary>
    [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool System { get; set; }

    /// <summary>
    /// Active
    /// </summary>
    [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Active { get; set; }

    /// <summary>
    /// Create Time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    /// <summary>
    /// Update Time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdateTime { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record EndUserCustomization
  {
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Label { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Group
  {
    /// <summary>
    /// Group identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Group Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Group description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Group is shared with all users?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shared", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Shared { get; set; }

    /// <summary>
    /// Timestamp of group creation
    /// </summary>
    [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Created { get; set; }

    /// <summary>
    /// Timestamp last update
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Updated { get; set; }

    /// <summary>
    /// Estimated/Last known device count.  Can be `null` if group membership has not been evaluated recently
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deviceCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int DeviceCount { get; set; }

    /// <summary>
    /// Last evaluation time of group membership for nodes (search)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastEvaluated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastEvaluated { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ActivitiesResponse
  {
    /// <summary>
    /// Last recorded activity ID for account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastActivityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long LastActivityId { get; set; }

    [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Activity> Activities { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record LocationWithOrganizationRef
  {
    /// <summary>
    /// Location name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Address { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Custom attributes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object UserData { get; set; }

    /// <summary>
    /// Tags
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Tags { get; set; }

    /// <summary>
    /// Custom Fields
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

    /// <summary>
    /// Location identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Organization identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int OrganizationId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record PolicyInfo
  {
    /// <summary>
    /// Parent Policy identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parentPolicyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ParentPolicyId { get; set; }

    /// <summary>
    /// Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Node Class
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nodeClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PolicyInfoNodeClass NodeClass { get; set; }

    /// <summary>
    /// Policy Enabled Flag
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Enabled { get; set; } = true;

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ScheduledTask
  {
    /// <summary>
    /// Scheduled Task identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Is Enabled ?
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Enabled { get; set; }

    /// <summary>
    /// Timestamp of Scheduled Task creation
    /// </summary>
    [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Created { get; set; }

    /// <summary>
    /// Timestamp of last Scheduled Task run
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastRun", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double LastRun { get; set; }

    /// <summary>
    /// Number of times scheduled task ran
    /// </summary>
    [Newtonsoft.Json.JsonProperty("runCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int RunCount { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record SoftwareProduct
  {
    /// <summary>
    /// Product identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Id { get; set; }

    /// <summary>
    /// Vendor Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("vendorName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string VendorName { get; set; }

    /// <summary>
    /// Product Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductName { get; set; }

    /// <summary>
    /// Installable
    /// </summary>
    [Newtonsoft.Json.JsonProperty("installable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Installable { get; set; }

    /// <summary>
    /// Active
    /// </summary>
    [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Active { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Condition
  {
    [Newtonsoft.Json.JsonProperty("any", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Rule> Any { get; set; }

    [Newtonsoft.Json.JsonProperty("all", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Rule> All { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record Rule
  {
    [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Field { get; set; }

    [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Operator { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketingBoardPublicApiDTO
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Uid { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Condition Conditions { get; set; }

    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool System { get; set; }

    [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Columns { get; set; }

    [Newtonsoft.Json.JsonProperty("sortBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>> SortBy { get; set; }

    [Newtonsoft.Json.JsonProperty("ticketCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int TicketCount { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record AttributeData
  {
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributeDataType Type { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record SortBy
  {
    [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Field { get; set; }

    [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SortByDirection Direction { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketDashboardPublicApiDTO
  {
    [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>> Data { get; set; }

    [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TicketMetadata Metadata { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketMetadata
  {
    [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Columns { get; set; }

    [Newtonsoft.Json.JsonProperty("sortBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SortBy> SortBy { get; set; }

    [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, AttributeData> Attributes { get; set; }

    [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Rule> Filters { get; set; }

    [Newtonsoft.Json.JsonProperty("lastCursorId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int LastCursorId { get; set; }

    [Newtonsoft.Json.JsonProperty("columnNamesForExporting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> ColumnNamesForExporting { get; set; }

    [Newtonsoft.Json.JsonProperty("allColumns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AllColumns { get; set; }

    [Newtonsoft.Json.JsonProperty("allRequiredColumns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AllRequiredColumns { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketBoardScrollingRequestDTO
  {
    [Newtonsoft.Json.JsonProperty("sortBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<SortBy> SortBy { get; set; }

    [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Rule> Filters { get; set; }

    [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int PageSize { get; set; }

    [Newtonsoft.Json.JsonProperty("searchCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SearchCriteria { get; set; }

    [Newtonsoft.Json.JsonProperty("includeColumns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> IncludeColumns { get; set; }

    [Newtonsoft.Json.JsonProperty("lastCursorId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int LastCursorId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record ContactResponseDTO
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int ClientId { get; set; }

    [Newtonsoft.Json.JsonProperty("clientName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ClientName { get; set; }

    [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Uid { get; set; }

    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Phone { get; set; }

    [Newtonsoft.Json.JsonProperty("jobTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string JobTitle { get; set; }

    [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName { get; set; }

    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdateTime { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketFormContent
  {
    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<int> Fields { get; set; }

    [Newtonsoft.Json.JsonProperty("timerSettings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TimerSettings TimerSettings { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketFormPublicApiDTO
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("endUserTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EndUserTitle { get; set; }

    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TicketFormContent Content { get; set; }

    [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Active { get; set; }

    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TicketingAttributePublicApiDTO> Fields { get; set; }

    [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Default { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TicketingAttributePublicApiDTO
  {
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    [Newtonsoft.Json.JsonProperty("attributeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AttributeType { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("customizeForEndUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool CustomizeForEndUser { get; set; }

    [Newtonsoft.Json.JsonProperty("nameForEndUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NameForEndUser { get; set; }

    [Newtonsoft.Json.JsonProperty("descriptionForEndUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DescriptionForEndUser { get; set; }

    [Newtonsoft.Json.JsonProperty("endUserOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EndUserOption { get; set; }

    [Newtonsoft.Json.JsonProperty("technicianOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TechnicianOption { get; set; }

    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AttributeContent Content { get; set; }

    [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool System { get; set; }

    [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Active { get; set; }

    [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double CreateTime { get; set; }

    [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double UpdateTime { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record TimerSettings
  {
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Enabled { get; set; }

    [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TimerSettingsMode Mode { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Approval action to perform
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum Mode
  {

    [System.Runtime.Serialization.EnumMember(Value = @"APPROVE")]
    APPROVE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"REJECT")]
    REJECT = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum GroupBy
  {

    [System.Runtime.Serialization.EnumMember(Value = @"TEMPLATE")]
    TEMPLATE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum EntityType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum Scope
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
    ALL = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"RELATIONS")]
    RELATIONS = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"REFERENCES")]
    REFERENCES = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum EntityType2
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum RelatedEntityType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
    ATTACHMENT = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN")]
    TECHNICIAN = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIAL")]
    CREDENTIAL = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER")]
    END_USER = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTACT")]
    CONTACT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum RelEntityType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
    ATTACHMENT = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN")]
    TECHNICIAN = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIAL")]
    CREDENTIAL = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER")]
    END_USER = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTACT")]
    CONTACT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum EntityType3
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum EntityType4
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum EntityType5
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum EntityType6
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum EntityType7
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
    ATTACHMENT = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN")]
    TECHNICIAN = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIAL")]
    CREDENTIAL = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER")]
    END_USER = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTACT")]
    CONTACT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum Type
  {

    [System.Runtime.Serialization.EnumMember(Value = @"DESCRIPTION")]
    DESCRIPTION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"COMMENT")]
    COMMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION")]
    CONDITION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"SAVE")]
    SAVE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
    DELETE = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum State
  {

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"STOPPED")]
    STOPPED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"START_PENDING")]
    START_PENDING = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
    RUNNING = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"STOP_PENDING")]
    STOP_PENDING = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"PAUSE_PENDING")]
    PAUSE_PENDING = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"PAUSED")]
    PAUSED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTINUE_PENDING")]
    CONTINUE_PENDING = 7,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum Mode2
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NORMAL")]
    NORMAL = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FORCED")]
    FORCED = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum Installer_type
  {

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_MSI")]
    WINDOWS_MSI = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_DMG")]
    MAC_DMG = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_PKG")]
    MAC_PKG = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_DEB")]
    LINUX_DEB = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_RPM")]
    LINUX_RPM = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum State2
  {

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"STOPPED")]
    STOPPED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"START_PENDING")]
    START_PENDING = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
    RUNNING = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"STOP_PENDING")]
    STOP_PENDING = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"PAUSE_PENDING")]
    PAUSE_PENDING = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"PAUSED")]
    PAUSED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTINUE_PENDING")]
    CONTINUE_PENDING = 7,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum Scopes
  {

    [System.Runtime.Serialization.EnumMember(Value = @"all,node,location,organization")]
    All_node_location_organization = 0,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UserType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN")]
    TECHNICIAN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER")]
    END_USER = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum Class
  {

    [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM")]
    SYSTEM = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DEVICE")]
    DEVICE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"USER")]
    USER = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
    ALL = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum Mode3
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
    NEW = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"CHILD")]
    CHILD = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"COPY")]
    COPY = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum OrganizationDetailedNodeApprovalMode
  {

    [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC")]
    AUTOMATIC = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
    MANUAL = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"REJECT")]
    REJECT = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum OrganizationWithLocationsAndPolicyAssignmentsModelNodeApprovalMode
  {

    [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC")]
    AUTOMATIC = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
    MANUAL = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"REJECT")]
    REJECT = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NodeClass
  {

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_SERVER")]
    WINDOWS_SERVER = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_WORKSTATION")]
    WINDOWS_WORKSTATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_WORKSTATION")]
    LINUX_WORKSTATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC")]
    MAC = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ANDROID")]
    ANDROID = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IOS")]
    APPLE_IOS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IPADOS")]
    APPLE_IPADOS = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_HOST")]
    VMWARE_VM_HOST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_GUEST")]
    VMWARE_VM_GUEST = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_HOST")]
    HYPERV_VMM_HOST = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_GUEST")]
    HYPERV_VMM_GUEST = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_SERVER")]
    LINUX_SERVER = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_SERVER")]
    MAC_SERVER = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUD_MONITOR_TARGET")]
    CLOUD_MONITOR_TARGET = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SWITCH")]
    NMS_SWITCH = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_ROUTER")]
    NMS_ROUTER = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_FIREWALL")]
    NMS_FIREWALL = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRIVATE_NETWORK_GATEWAY")]
    NMS_PRIVATE_NETWORK_GATEWAY = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRINTER")]
    NMS_PRINTER = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SCANNER")]
    NMS_SCANNER = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_DIAL_MANAGER")]
    NMS_DIAL_MANAGER = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_WAP")]
    NMS_WAP = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_IPSLA")]
    NMS_IPSLA = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_COMPUTER")]
    NMS_COMPUTER = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VM_HOST")]
    NMS_VM_HOST = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_APPLIANCE")]
    NMS_APPLIANCE = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_OTHER")]
    NMS_OTHER = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SERVER")]
    NMS_SERVER = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PHONE")]
    NMS_PHONE = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VIRTUAL_MACHINE")]
    NMS_VIRTUAL_MACHINE = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_NETWORK_MANAGEMENT_AGENT")]
    NMS_NETWORK_MANAGEMENT_AGENT = 30,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributeContentAdvancedSettingsIpAddressType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
    ALL = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"IPV4")]
    IPV4 = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"IPV6")]
    IPV6 = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributeContentAdvancedSettingsDateFiltersType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"INCLUDE")]
    INCLUDE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"EXCLUDE")]
    EXCLUDE = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"PAST_DATES_ONLY")]
    PAST_DATES_ONLY = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_DATES_ONLY")]
    FUTURE_DATES_ONLY = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"RANGE")]
    RANGE = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DocumentItemPublicApiDTOFieldType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"DROPDOWN")]
    DROPDOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MULTI_SELECT")]
    MULTI_SELECT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKBOX")]
    CHECKBOX = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
    TEXT = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT_MULTILINE")]
    TEXT_MULTILINE = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT_ENCRYPTED")]
    TEXT_ENCRYPTED = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC")]
    NUMERIC = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"DECIMAL")]
    DECIMAL = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"DATE")]
    DATE = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"DATE_TIME")]
    DATE_TIME = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"TIME")]
    TIME = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
    ATTACHMENT = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_DROPDOWN")]
    NODE_DROPDOWN = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_MULTI_SELECT")]
    NODE_MULTI_SELECT = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DROPDOWN")]
    CLIENT_DROPDOWN = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_MULTI_SELECT")]
    CLIENT_MULTI_SELECT = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_LOCATION_DROPDOWN")]
    CLIENT_LOCATION_DROPDOWN = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_LOCATION_MULTI_SELECT")]
    CLIENT_LOCATION_MULTI_SELECT = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_DROPDOWN")]
    CLIENT_DOCUMENT_DROPDOWN = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_MULTI_SELECT")]
    CLIENT_DOCUMENT_MULTI_SELECT = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
    EMAIL = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"PHONE")]
    PHONE = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"IP_ADDRESS")]
    IP_ADDRESS = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"WYSIWYG")]
    WYSIWYG = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"URL")]
    URL = 24,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DocumentItemPublicApiDTOFieldTechnicianPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"EDITABLE")]
    EDITABLE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DocumentItemPublicApiDTOFieldScriptPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"WRITE_ONLY")]
    WRITE_ONLY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_WRITE")]
    READ_WRITE = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DocumentItemPublicApiDTOFieldApiPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"WRITE_ONLY")]
    WRITE_ONLY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_WRITE")]
    READ_WRITE = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DocumentItemPublicApiDTOUiElementType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"TITLE")]
    TITLE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DESCRIPTION")]
    DESCRIPTION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"SEPARATOR")]
    SEPARATOR = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UpdateDocumentItemPublicApiRequestFieldType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"DROPDOWN")]
    DROPDOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MULTI_SELECT")]
    MULTI_SELECT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKBOX")]
    CHECKBOX = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
    TEXT = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT_MULTILINE")]
    TEXT_MULTILINE = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT_ENCRYPTED")]
    TEXT_ENCRYPTED = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC")]
    NUMERIC = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"DECIMAL")]
    DECIMAL = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"DATE")]
    DATE = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"DATE_TIME")]
    DATE_TIME = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"TIME")]
    TIME = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
    ATTACHMENT = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_DROPDOWN")]
    NODE_DROPDOWN = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_MULTI_SELECT")]
    NODE_MULTI_SELECT = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DROPDOWN")]
    CLIENT_DROPDOWN = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_MULTI_SELECT")]
    CLIENT_MULTI_SELECT = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_LOCATION_DROPDOWN")]
    CLIENT_LOCATION_DROPDOWN = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_LOCATION_MULTI_SELECT")]
    CLIENT_LOCATION_MULTI_SELECT = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_DROPDOWN")]
    CLIENT_DOCUMENT_DROPDOWN = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_MULTI_SELECT")]
    CLIENT_DOCUMENT_MULTI_SELECT = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
    EMAIL = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"PHONE")]
    PHONE = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"IP_ADDRESS")]
    IP_ADDRESS = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"WYSIWYG")]
    WYSIWYG = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"URL")]
    URL = 24,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UpdateDocumentItemPublicApiRequestFieldTechnicianPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"EDITABLE")]
    EDITABLE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UpdateDocumentItemPublicApiRequestFieldScriptPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"WRITE_ONLY")]
    WRITE_ONLY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_WRITE")]
    READ_WRITE = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UpdateDocumentItemPublicApiRequestFieldApiPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"WRITE_ONLY")]
    WRITE_ONLY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_WRITE")]
    READ_WRITE = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UpdateDocumentItemPublicApiRequestUiElementType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"TITLE")]
    TITLE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DESCRIPTION")]
    DESCRIPTION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"SEPARATOR")]
    SEPARATOR = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NewDocumentItemPublicApiRequestFieldType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"DROPDOWN")]
    DROPDOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MULTI_SELECT")]
    MULTI_SELECT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKBOX")]
    CHECKBOX = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
    TEXT = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT_MULTILINE")]
    TEXT_MULTILINE = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT_ENCRYPTED")]
    TEXT_ENCRYPTED = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC")]
    NUMERIC = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"DECIMAL")]
    DECIMAL = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"DATE")]
    DATE = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"DATE_TIME")]
    DATE_TIME = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"TIME")]
    TIME = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
    ATTACHMENT = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_DROPDOWN")]
    NODE_DROPDOWN = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_MULTI_SELECT")]
    NODE_MULTI_SELECT = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DROPDOWN")]
    CLIENT_DROPDOWN = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_MULTI_SELECT")]
    CLIENT_MULTI_SELECT = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_LOCATION_DROPDOWN")]
    CLIENT_LOCATION_DROPDOWN = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_LOCATION_MULTI_SELECT")]
    CLIENT_LOCATION_MULTI_SELECT = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_DROPDOWN")]
    CLIENT_DOCUMENT_DROPDOWN = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_MULTI_SELECT")]
    CLIENT_DOCUMENT_MULTI_SELECT = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
    EMAIL = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"PHONE")]
    PHONE = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"IP_ADDRESS")]
    IP_ADDRESS = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"WYSIWYG")]
    WYSIWYG = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"URL")]
    URL = 24,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NewDocumentItemPublicApiRequestFieldTechnicianPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"EDITABLE")]
    EDITABLE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NewDocumentItemPublicApiRequestFieldScriptPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"WRITE_ONLY")]
    WRITE_ONLY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_WRITE")]
    READ_WRITE = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NewDocumentItemPublicApiRequestFieldApiPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"WRITE_ONLY")]
    WRITE_ONLY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_WRITE")]
    READ_WRITE = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NewDocumentItemPublicApiRequestUiElementType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"TITLE")]
    TITLE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DESCRIPTION")]
    DESCRIPTION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"SEPARATOR")]
    SEPARATOR = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum RelatedItemPublicApiDTOType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"VALUE")]
    VALUE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"ENTITY")]
    ENTITY = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum RelatedItemPublicApiDTOEntityType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum RelatedItemPublicApiDTORelEntityType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
    ATTACHMENT = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN")]
    TECHNICIAN = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIAL")]
    CREDENTIAL = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER")]
    END_USER = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTACT")]
    CONTACT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"SECURE")]
    SECURE = 11,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NewRelatedItemEntityRequestRelEntityType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
    ATTACHMENT = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN")]
    TECHNICIAN = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIAL")]
    CREDENTIAL = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST")]
    CHECKLIST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER")]
    END_USER = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTACT")]
    CONTACT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"KB_DOCUMENT")]
    KB_DOCUMENT = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record MediaType
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("subtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subtype { get; set; }

    [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

    [Newtonsoft.Json.JsonProperty("wildcardType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool WildcardType { get; set; }

    [Newtonsoft.Json.JsonProperty("wildcardSubtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool WildcardSubtype { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record MediaType2
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("subtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subtype { get; set; }

    [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

    [Newtonsoft.Json.JsonProperty("wildcardType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool WildcardType { get; set; }

    [Newtonsoft.Json.JsonProperty("wildcardSubtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool WildcardSubtype { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial record MediaType3
  {
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("subtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subtype { get; set; }

    [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

    [Newtonsoft.Json.JsonProperty("wildcardType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool WildcardType { get; set; }

    [Newtonsoft.Json.JsonProperty("wildcardSubtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool WildcardSubtype { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UpdateTicketType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"PROBLEM")]
    PROBLEM = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"QUESTION")]
    QUESTION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"INCIDENT")]
    INCIDENT = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TASK")]
    TASK = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UpdateTicketSeverity
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MINOR")]
    MINOR = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MODERATE")]
    MODERATE = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAJOR")]
    MAJOR = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CRITICAL")]
    CRITICAL = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UpdateTicketPriority
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
    LOW = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
    MEDIUM = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
    HIGH = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum TicketDTOType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"PROBLEM")]
    PROBLEM = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"QUESTION")]
    QUESTION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"INCIDENT")]
    INCIDENT = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TASK")]
    TASK = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum TicketDTOPriority
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
    LOW = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
    MEDIUM = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
    HIGH = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum TicketDTOSeverity
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MINOR")]
    MINOR = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MODERATE")]
    MODERATE = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAJOR")]
    MAJOR = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CRITICAL")]
    CRITICAL = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum TicketDTOSource
  {

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN")]
    TECHNICIAN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
    EMAIL = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"WEB_FORM")]
    WEB_FORM = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"HELP_REQUEST")]
    HELP_REQUEST = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER")]
    END_USER = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION")]
    CONDITION = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED_SCRIPT")]
    SCHEDULED_SCRIPT = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVITY")]
    ACTIVITY = 7,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NewTicketType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"PROBLEM")]
    PROBLEM = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"QUESTION")]
    QUESTION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"INCIDENT")]
    INCIDENT = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TASK")]
    TASK = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NewTicketSeverity
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MINOR")]
    MINOR = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MODERATE")]
    MODERATE = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAJOR")]
    MAJOR = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CRITICAL")]
    CRITICAL = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NewTicketPriority
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
    LOW = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
    MEDIUM = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
    HIGH = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum TicketLogEntryPublicApiDTOAppUserContactType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN")]
    TECHNICIAN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER")]
    END_USER = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTACT")]
    CONTACT = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum TicketLogEntryPublicApiDTOType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"DESCRIPTION")]
    DESCRIPTION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"COMMENT")]
    COMMENT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION")]
    CONDITION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"SAVE")]
    SAVE = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
    DELETE = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum WindowsServiceConfigurationStartType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"AUTO_START")]
    AUTO_START = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"AUTO_START_DELAYED")]
    AUTO_START_DELAYED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"BOOT_START")]
    BOOT_START = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DEMAND_START")]
    DEMAND_START = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
    DISABLED = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_START")]
    SYSTEM_START = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DeviceNodeClass
  {

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_SERVER")]
    WINDOWS_SERVER = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_WORKSTATION")]
    WINDOWS_WORKSTATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_WORKSTATION")]
    LINUX_WORKSTATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC")]
    MAC = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ANDROID")]
    ANDROID = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IOS")]
    APPLE_IOS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IPADOS")]
    APPLE_IPADOS = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_HOST")]
    VMWARE_VM_HOST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_GUEST")]
    VMWARE_VM_GUEST = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_HOST")]
    HYPERV_VMM_HOST = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_GUEST")]
    HYPERV_VMM_GUEST = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_SERVER")]
    LINUX_SERVER = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_SERVER")]
    MAC_SERVER = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUD_MONITOR_TARGET")]
    CLOUD_MONITOR_TARGET = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SWITCH")]
    NMS_SWITCH = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_ROUTER")]
    NMS_ROUTER = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_FIREWALL")]
    NMS_FIREWALL = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRIVATE_NETWORK_GATEWAY")]
    NMS_PRIVATE_NETWORK_GATEWAY = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRINTER")]
    NMS_PRINTER = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SCANNER")]
    NMS_SCANNER = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_DIAL_MANAGER")]
    NMS_DIAL_MANAGER = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_WAP")]
    NMS_WAP = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_IPSLA")]
    NMS_IPSLA = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_COMPUTER")]
    NMS_COMPUTER = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VM_HOST")]
    NMS_VM_HOST = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_APPLIANCE")]
    NMS_APPLIANCE = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_OTHER")]
    NMS_OTHER = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SERVER")]
    NMS_SERVER = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PHONE")]
    NMS_PHONE = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VIRTUAL_MACHINE")]
    NMS_VIRTUAL_MACHINE = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_NETWORK_MANAGEMENT_AGENT")]
    NMS_NETWORK_MANAGEMENT_AGENT = 30,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DeviceApprovalStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
    PENDING = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
    APPROVED = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum MaintenanceStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
    PENDING = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"IN_MAINTENANCE")]
    IN_MAINTENANCE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
    FAILED = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NodeRoleNodeClass
  {

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_SERVER")]
    WINDOWS_SERVER = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_WORKSTATION")]
    WINDOWS_WORKSTATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_WORKSTATION")]
    LINUX_WORKSTATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC")]
    MAC = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ANDROID")]
    ANDROID = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IOS")]
    APPLE_IOS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IPADOS")]
    APPLE_IPADOS = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_HOST")]
    VMWARE_VM_HOST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_GUEST")]
    VMWARE_VM_GUEST = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_HOST")]
    HYPERV_VMM_HOST = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_GUEST")]
    HYPERV_VMM_GUEST = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_SERVER")]
    LINUX_SERVER = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_SERVER")]
    MAC_SERVER = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUD_MONITOR_TARGET")]
    CLOUD_MONITOR_TARGET = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SWITCH")]
    NMS_SWITCH = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_ROUTER")]
    NMS_ROUTER = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_FIREWALL")]
    NMS_FIREWALL = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRIVATE_NETWORK_GATEWAY")]
    NMS_PRIVATE_NETWORK_GATEWAY = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRINTER")]
    NMS_PRINTER = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SCANNER")]
    NMS_SCANNER = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_DIAL_MANAGER")]
    NMS_DIAL_MANAGER = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_WAP")]
    NMS_WAP = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_IPSLA")]
    NMS_IPSLA = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_COMPUTER")]
    NMS_COMPUTER = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VM_HOST")]
    NMS_VM_HOST = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_APPLIANCE")]
    NMS_APPLIANCE = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_OTHER")]
    NMS_OTHER = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SERVER")]
    NMS_SERVER = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PHONE")]
    NMS_PHONE = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VIRTUAL_MACHINE")]
    NMS_VIRTUAL_MACHINE = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_NETWORK_MANAGEMENT_AGENT")]
    NMS_NETWORK_MANAGEMENT_AGENT = 30,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NodeRoleChassisType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DESKTOP")]
    DESKTOP = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LAPTOP")]
    LAPTOP = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
    MOBILE = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum OrganizationNodeApprovalMode
  {

    [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC")]
    AUTOMATIC = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
    MANUAL = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"REJECT")]
    REJECT = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum PolicyNodeClass
  {

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_SERVER")]
    WINDOWS_SERVER = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_WORKSTATION")]
    WINDOWS_WORKSTATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_WORKSTATION")]
    LINUX_WORKSTATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC")]
    MAC = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ANDROID")]
    ANDROID = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IOS")]
    APPLE_IOS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IPADOS")]
    APPLE_IPADOS = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_HOST")]
    VMWARE_VM_HOST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_GUEST")]
    VMWARE_VM_GUEST = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_HOST")]
    HYPERV_VMM_HOST = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_GUEST")]
    HYPERV_VMM_GUEST = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_SERVER")]
    LINUX_SERVER = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_SERVER")]
    MAC_SERVER = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUD_MONITOR_TARGET")]
    CLOUD_MONITOR_TARGET = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SWITCH")]
    NMS_SWITCH = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_ROUTER")]
    NMS_ROUTER = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_FIREWALL")]
    NMS_FIREWALL = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRIVATE_NETWORK_GATEWAY")]
    NMS_PRIVATE_NETWORK_GATEWAY = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRINTER")]
    NMS_PRINTER = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SCANNER")]
    NMS_SCANNER = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_DIAL_MANAGER")]
    NMS_DIAL_MANAGER = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_WAP")]
    NMS_WAP = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_IPSLA")]
    NMS_IPSLA = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_COMPUTER")]
    NMS_COMPUTER = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VM_HOST")]
    NMS_VM_HOST = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_APPLIANCE")]
    NMS_APPLIANCE = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_OTHER")]
    NMS_OTHER = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SERVER")]
    NMS_SERVER = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PHONE")]
    NMS_PHONE = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VIRTUAL_MACHINE")]
    NMS_VIRTUAL_MACHINE = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_NETWORK_MANAGEMENT_AGENT")]
    NMS_NETWORK_MANAGEMENT_AGENT = 30,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum VolumeBitLockerStatusConversionStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"FULLY_DECRYPTED")]
    FULLY_DECRYPTED = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FULLY_ENCRYPTED")]
    FULLY_ENCRYPTED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ENCRYPTION_IN_PROGRESS")]
    ENCRYPTION_IN_PROGRESS = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DECRYPTION_IN_PROGRESS")]
    DECRYPTION_IN_PROGRESS = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ENCRYPTION_PAUSED")]
    ENCRYPTION_PAUSED = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"DECRYPTION_PAUSED")]
    DECRYPTION_PAUSED = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 6,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum VolumeBitLockerStatusEncryptionMethod
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"AES_128_WITH_DIFFUSER")]
    AES_128_WITH_DIFFUSER = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"AES_256_WITH_DIFFUSER")]
    AES_256_WITH_DIFFUSER = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"AES_128")]
    AES_128 = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"AES_256")]
    AES_256 = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"HARDWARE_ENCRYPTION")]
    HARDWARE_ENCRYPTION = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"XTS_AES_128")]
    XTS_AES_128 = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"XTS_AES_256")]
    XTS_AES_256 = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 8,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum VolumeBitLockerStatusProtectionStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"UNPROTECTED")]
    UNPROTECTED = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"PROTECTED")]
    PROTECTED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
    PENDING = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum VolumeBitLockerStatusLockStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"UNLOCKED")]
    UNLOCKED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKED")]
    LOCKED = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum RunScriptRequestType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ACTION")]
    ACTION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"SCRIPT")]
    SCRIPT = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum ActivitySeverity
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MINOR")]
    MINOR = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MODERATE")]
    MODERATE = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAJOR")]
    MAJOR = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CRITICAL")]
    CRITICAL = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum ActivityPriority
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
    LOW = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
    MEDIUM = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
    HIGH = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum ActivityType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIONSET")]
    ACTIONSET = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTION")]
    ACTION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION")]
    CONDITION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_ACTIONSET")]
    CONDITION_ACTIONSET = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_ACTION")]
    CONDITION_ACTION = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"ANTIVIRUS")]
    ANTIVIRUS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT")]
    PATCH_MANAGEMENT = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER")]
    TEAMVIEWER = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"MONITOR")]
    MONITOR = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM")]
    SYSTEM = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"COMMENT")]
    COMMENT = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT")]
    SHADOWPROTECT = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER")]
    IMAGEMANAGER = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"HELP_REQUEST")]
    HELP_REQUEST = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT")]
    SOFTWARE_PATCH_MANAGEMENT = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"SPLASHTOP")]
    SPLASHTOP = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY")]
    CLOUDBERRY = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_BACKUP")]
    CLOUDBERRY_BACKUP = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED_TASK")]
    SCHEDULED_TASK = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"RDP")]
    RDP = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"SCRIPTING")]
    SCRIPTING = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"SECURITY")]
    SECURITY = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS")]
    REMOTE_TOOLS = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"VIRTUALIZATION")]
    VIRTUALIZATION = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"PSA")]
    PSA = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM")]
    MDM = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_REMOTE")]
    NINJA_REMOTE = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_QUICK_CONNECT")]
    NINJA_QUICK_CONNECT = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_NETWORK_DISCOVERY")]
    NINJA_NETWORK_DISCOVERY = 28,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum ActivityStatusCode
  {

    [System.Runtime.Serialization.EnumMember(Value = @"START_REQUESTED")]
    START_REQUESTED = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
    STARTED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"IN_PROCESS")]
    IN_PROCESS = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
    COMPLETED = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CANCEL_REQUESTED")]
    CANCEL_REQUESTED = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
    CANCELLED = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED")]
    BLOCKED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"TRIGGERED")]
    TRIGGERED = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"RESET")]
    RESET = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"ACKNOWLEDGED")]
    ACKNOWLEDGED = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
    DISABLED = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"EVALUATION_FAILURE")]
    EVALUATION_FAILURE = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_CREATED")]
    CLIENT_CREATED = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_UPDATED")]
    CLIENT_UPDATED = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DELETED")]
    CLIENT_DELETED = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIAL_CREATED")]
    CREDENTIAL_CREATED = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIAL_UPDATED")]
    CREDENTIAL_UPDATED = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIAL_DELETED")]
    CREDENTIAL_DELETED = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION_CREATED")]
    LOCATION_CREATED = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION_UPDATED")]
    LOCATION_UPDATED = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION_DELETED")]
    LOCATION_DELETED = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"POLICY_CREATED")]
    POLICY_CREATED = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"POLICY_UPDATED")]
    POLICY_UPDATED = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"POLICY_DELETED")]
    POLICY_DELETED = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_CREATED")]
    NODE_CREATED = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_UPDATED")]
    NODE_UPDATED = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_DELETED")]
    NODE_DELETED = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_RE_ENROLLED")]
    NODE_RE_ENROLLED = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ACCESS_GRANTED")]
    NODE_ACCESS_GRANTED = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ACCESS_DENIED")]
    NODE_ACCESS_DENIED = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_REGISTRATION_REJECTED")]
    NODE_REGISTRATION_REJECTED = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_IDENTIFICATION_UPDATED")]
    NODE_IDENTIFICATION_UPDATED = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_CLONING_DETECTED")]
    NODE_CLONING_DETECTED = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_CLONE_ADVISED_TO_REGISTER")]
    NODE_CLONE_ADVISED_TO_REGISTER = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_MANUALLY_APPROVED")]
    NODE_MANUALLY_APPROVED = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_AUTOMATICALLY_APPROVED")]
    NODE_AUTOMATICALLY_APPROVED = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_MANUALLY_REJECTED")]
    NODE_MANUALLY_REJECTED = 36,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_AUTOMATICALLY_REJECTED")]
    NODE_AUTOMATICALLY_REJECTED = 37,

    [System.Runtime.Serialization.EnumMember(Value = @"REJECTED_NODE_CLEARED")]
    REJECTED_NODE_CLEARED = 38,

    [System.Runtime.Serialization.EnumMember(Value = @"REJECTED_NODE_DELETED")]
    REJECTED_NODE_DELETED = 39,

    [System.Runtime.Serialization.EnumMember(Value = @"MOBILE_DEVICE_UNREGISTERED")]
    MOBILE_DEVICE_UNREGISTERED = 40,

    [System.Runtime.Serialization.EnumMember(Value = @"APP_USER_CREATED")]
    APP_USER_CREATED = 41,

    [System.Runtime.Serialization.EnumMember(Value = @"APP_USER_UPDATED")]
    APP_USER_UPDATED = 42,

    [System.Runtime.Serialization.EnumMember(Value = @"APP_USER_DELETED")]
    APP_USER_DELETED = 43,

    [System.Runtime.Serialization.EnumMember(Value = @"APP_USER_LOGGED_IN")]
    APP_USER_LOGGED_IN = 44,

    [System.Runtime.Serialization.EnumMember(Value = @"APP_USER_LOGGED_OUT")]
    APP_USER_LOGGED_OUT = 45,

    [System.Runtime.Serialization.EnumMember(Value = @"APP_USER_MFA_SETUP")]
    APP_USER_MFA_SETUP = 46,

    [System.Runtime.Serialization.EnumMember(Value = @"APP_USER_MFA_DELETED")]
    APP_USER_MFA_DELETED = 47,

    [System.Runtime.Serialization.EnumMember(Value = @"APP_USER_CRITICAL_ACTION")]
    APP_USER_CRITICAL_ACTION = 48,

    [System.Runtime.Serialization.EnumMember(Value = @"APP_USER_AUDIT_FAILED_LOGIN")]
    APP_USER_AUDIT_FAILED_LOGIN = 49,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_CREATED")]
    END_USER_CREATED = 50,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_UPDATED")]
    END_USER_UPDATED = 51,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_DELETED")]
    END_USER_DELETED = 52,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_LOGGED_IN")]
    END_USER_LOGGED_IN = 53,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_LOGGED_OUT")]
    END_USER_LOGGED_OUT = 54,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_MFA_SETUP")]
    END_USER_MFA_SETUP = 55,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_MFA_DELETED")]
    END_USER_MFA_DELETED = 56,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_AUDIT_FAILED_LOGIN")]
    END_USER_AUDIT_FAILED_LOGIN = 57,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_CRITICAL_ACTION")]
    END_USER_CRITICAL_ACTION = 58,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_CREATED")]
    CONTACT_CREATED = 59,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_UPDATED")]
    CONTACT_UPDATED = 60,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_DELETED")]
    CONTACT_DELETED = 61,

    [System.Runtime.Serialization.EnumMember(Value = @"DEVICE_GROUP_CREATED")]
    DEVICE_GROUP_CREATED = 62,

    [System.Runtime.Serialization.EnumMember(Value = @"DEVICE_GROUP_UPDATED")]
    DEVICE_GROUP_UPDATED = 63,

    [System.Runtime.Serialization.EnumMember(Value = @"DEVICE_GROUP_DELETED")]
    DEVICE_GROUP_DELETED = 64,

    [System.Runtime.Serialization.EnumMember(Value = @"TICKET_TEMPLATE_CREATED")]
    TICKET_TEMPLATE_CREATED = 65,

    [System.Runtime.Serialization.EnumMember(Value = @"TICKET_TEMPLATE_UPDATED")]
    TICKET_TEMPLATE_UPDATED = 66,

    [System.Runtime.Serialization.EnumMember(Value = @"TICKET_TEMPLATE_DELETED")]
    TICKET_TEMPLATE_DELETED = 67,

    [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_HEALTH_STATUS_CHANGED")]
    CUSTOM_HEALTH_STATUS_CHANGED = 68,

    [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_HEALTH_STATUS_RESET")]
    CUSTOM_HEALTH_STATUS_RESET = 69,

    [System.Runtime.Serialization.EnumMember(Value = @"PSA_TICKET_CREATION_FAILED")]
    PSA_TICKET_CREATION_FAILED = 70,

    [System.Runtime.Serialization.EnumMember(Value = @"PSA_TICKET_CREATION_SUCCEEDED")]
    PSA_TICKET_CREATION_SUCCEEDED = 71,

    [System.Runtime.Serialization.EnumMember(Value = @"RESET_BY_PSA_TICKET_CALLBACK")]
    RESET_BY_PSA_TICKET_CALLBACK = 72,

    [System.Runtime.Serialization.EnumMember(Value = @"PSA_TICKET_CREATION_TEST")]
    PSA_TICKET_CREATION_TEST = 73,

    [System.Runtime.Serialization.EnumMember(Value = @"PSA_ENABLED")]
    PSA_ENABLED = 74,

    [System.Runtime.Serialization.EnumMember(Value = @"PSA_DISABLED")]
    PSA_DISABLED = 75,

    [System.Runtime.Serialization.EnumMember(Value = @"PSA_CREDENTIALS_FAILED")]
    PSA_CREDENTIALS_FAILED = 76,

    [System.Runtime.Serialization.EnumMember(Value = @"CONNECTWISE_AGREEMENTS_SYNC_COMPLETED")]
    CONNECTWISE_AGREEMENTS_SYNC_COMPLETED = 77,

    [System.Runtime.Serialization.EnumMember(Value = @"CONNECTWISE_AGREEMENTS_SYNC_STARTED")]
    CONNECTWISE_AGREEMENTS_SYNC_STARTED = 78,

    [System.Runtime.Serialization.EnumMember(Value = @"CONNECTWISE_NODE_SYNC_COMPLETED")]
    CONNECTWISE_NODE_SYNC_COMPLETED = 79,

    [System.Runtime.Serialization.EnumMember(Value = @"CONNECTWISE_NODE_SYNC_STARTED")]
    CONNECTWISE_NODE_SYNC_STARTED = 80,

    [System.Runtime.Serialization.EnumMember(Value = @"CONNECTWISE_NODE_SYNC_NODE_CREATED")]
    CONNECTWISE_NODE_SYNC_NODE_CREATED = 81,

    [System.Runtime.Serialization.EnumMember(Value = @"CONNECTWISE_NODE_SYNC_NODE_UPDATED")]
    CONNECTWISE_NODE_SYNC_NODE_UPDATED = 82,

    [System.Runtime.Serialization.EnumMember(Value = @"CONNECTWISE_NODE_SYNC_NODE_DELETED")]
    CONNECTWISE_NODE_SYNC_NODE_DELETED = 83,

    [System.Runtime.Serialization.EnumMember(Value = @"CONNECTWISE_UPDATED")]
    CONNECTWISE_UPDATED = 84,

    [System.Runtime.Serialization.EnumMember(Value = @"CONNECTWISECONTROL_ATTEMPT")]
    CONNECTWISECONTROL_ATTEMPT = 85,

    [System.Runtime.Serialization.EnumMember(Value = @"AUTOTASK_NODE_SYNC_STARTED")]
    AUTOTASK_NODE_SYNC_STARTED = 86,

    [System.Runtime.Serialization.EnumMember(Value = @"AUTOTASK_NODE_SYNC_COMPLETED")]
    AUTOTASK_NODE_SYNC_COMPLETED = 87,

    [System.Runtime.Serialization.EnumMember(Value = @"AUTOTASK_NODE_SYNC_NODE_CREATED")]
    AUTOTASK_NODE_SYNC_NODE_CREATED = 88,

    [System.Runtime.Serialization.EnumMember(Value = @"AUTOTASK_NODE_SYNC_NODE_UPDATED")]
    AUTOTASK_NODE_SYNC_NODE_UPDATED = 89,

    [System.Runtime.Serialization.EnumMember(Value = @"AUTOTASK_NODE_SYNC_NODE_DELETED")]
    AUTOTASK_NODE_SYNC_NODE_DELETED = 90,

    [System.Runtime.Serialization.EnumMember(Value = @"AUTOTASK_UPDATED")]
    AUTOTASK_UPDATED = 91,

    [System.Runtime.Serialization.EnumMember(Value = @"PSA_TICKET_UPDATED_FAILED")]
    PSA_TICKET_UPDATED_FAILED = 92,

    [System.Runtime.Serialization.EnumMember(Value = @"PSA_TICKET_UPDATED_SUCCEEDED")]
    PSA_TICKET_UPDATED_SUCCEEDED = 93,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_CREATED")]
    REPORT_CREATED = 94,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_UPDATED")]
    REPORT_UPDATED = 95,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_DELETED")]
    REPORT_DELETED = 96,

    [System.Runtime.Serialization.EnumMember(Value = @"TIME_ZONE_UPDATED")]
    TIME_ZONE_UPDATED = 97,

    [System.Runtime.Serialization.EnumMember(Value = @"LANGUAGE_TAG_UPDATED")]
    LANGUAGE_TAG_UPDATED = 98,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ROLE_CREATED")]
    NODE_ROLE_CREATED = 99,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ROLE_UPDATED")]
    NODE_ROLE_UPDATED = 100,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ROLE_DELETED")]
    NODE_ROLE_DELETED = 101,

    [System.Runtime.Serialization.EnumMember(Value = @"COMMENT")]
    COMMENT = 102,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_INSTALLED")]
    VIPREAV_INSTALLED = 103,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_INSTALL_FAILED")]
    VIPREAV_INSTALL_FAILED = 104,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_UNINSTALLED")]
    VIPREAV_UNINSTALLED = 105,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_UNINSTALL_FAILED")]
    VIPREAV_UNINSTALL_FAILED = 106,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_SCAN_THREAT_QUARANTINED")]
    VIPREAV_SCAN_THREAT_QUARANTINED = 107,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_ACTIVEPROTECTION_THREAT_QUARANTINED")]
    VIPREAV_ACTIVEPROTECTION_THREAT_QUARANTINED = 108,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_USERINITIATED_THREAT_QUARANTINED")]
    VIPREAV_USERINITIATED_THREAT_QUARANTINED = 109,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_QUARANTINED_THREAT_REMOVED")]
    VIPREAV_QUARANTINED_THREAT_REMOVED = 110,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_REBOOT_REQUIRED")]
    VIPREAV_REBOOT_REQUIRED = 111,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_SCAN_STARTED")]
    VIPREAV_SCAN_STARTED = 112,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_SCAN_COMPLETED")]
    VIPREAV_SCAN_COMPLETED = 113,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_SCAN_ABORTED")]
    VIPREAV_SCAN_ABORTED = 114,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_SCAN_FAILED")]
    VIPREAV_SCAN_FAILED = 115,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_SCAN_PAUSED")]
    VIPREAV_SCAN_PAUSED = 116,

    [System.Runtime.Serialization.EnumMember(Value = @"VIPREAV_DISABLED")]
    VIPREAV_DISABLED = 117,

    [System.Runtime.Serialization.EnumMember(Value = @"WEBROOT_COMMAND_SUBMITTED")]
    WEBROOT_COMMAND_SUBMITTED = 118,

    [System.Runtime.Serialization.EnumMember(Value = @"WEBROOT_THREAT_DETECTED")]
    WEBROOT_THREAT_DETECTED = 119,

    [System.Runtime.Serialization.EnumMember(Value = @"WEBROOT_INSTALL_FAILED")]
    WEBROOT_INSTALL_FAILED = 120,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_SCAN_STARTED")]
    BITDEFENDER_SCAN_STARTED = 121,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_SCAN_COMPLETED")]
    BITDEFENDER_SCAN_COMPLETED = 122,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_THREAT_DELETE_FROM_QUARANTINE")]
    BITDEFENDER_THREAT_DELETE_FROM_QUARANTINE = 123,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_THREAT_RESTORE_FROM_QUARANTINE")]
    BITDEFENDER_THREAT_RESTORE_FROM_QUARANTINE = 124,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_SCAN_FAILED")]
    BITDEFENDER_SCAN_FAILED = 125,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_THREAT_DELETE_FROM_QUARANTINE_FAILED")]
    BITDEFENDER_THREAT_DELETE_FROM_QUARANTINE_FAILED = 126,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_THREAT_RESTORE_FROM_QUARANTINE_FAILED")]
    BITDEFENDER_THREAT_RESTORE_FROM_QUARANTINE_FAILED = 127,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_DOWNLOAD_STARTED")]
    BITDEFENDER_DOWNLOAD_STARTED = 128,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_DOWNLOAD_SUCCEEDED")]
    BITDEFENDER_DOWNLOAD_SUCCEEDED = 129,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_DOWNLOAD_FAILED")]
    BITDEFENDER_DOWNLOAD_FAILED = 130,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_INSTALLATION_STARTED")]
    BITDEFENDER_INSTALLATION_STARTED = 131,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_INSTALLATION_SUCCEEDED")]
    BITDEFENDER_INSTALLATION_SUCCEEDED = 132,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_INSTALLATION_FAILED")]
    BITDEFENDER_INSTALLATION_FAILED = 133,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_UNINSTALLATION_STARTED")]
    BITDEFENDER_UNINSTALLATION_STARTED = 134,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_UNINSTALLATION_SUCCEEDED")]
    BITDEFENDER_UNINSTALLATION_SUCCEEDED = 135,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_UNINSTALLATION_FAILED")]
    BITDEFENDER_UNINSTALLATION_FAILED = 136,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_UNPACKING_FAILED")]
    BITDEFENDER_UNPACKING_FAILED = 137,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_THREAT_IGNORED")]
    BDAS_BITDEFENDER_THREAT_IGNORED = 138,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_THREAT_PRESENT")]
    BDAS_BITDEFENDER_THREAT_PRESENT = 139,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_THREAT_DELETED")]
    BDAS_BITDEFENDER_THREAT_DELETED = 140,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_THREAT_BLOCKED")]
    BDAS_BITDEFENDER_THREAT_BLOCKED = 141,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_THREAT_QUARANTINED")]
    BDAS_BITDEFENDER_THREAT_QUARANTINED = 142,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_THREAT_CLEANED")]
    BDAS_BITDEFENDER_THREAT_CLEANED = 143,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_PURGE_QUARANTINE_FAILED")]
    BDAS_BITDEFENDER_PURGE_QUARANTINE_FAILED = 144,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_PURGE_QUARANTINE_SUCCESS")]
    BDAS_BITDEFENDER_PURGE_QUARANTINE_SUCCESS = 145,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_THREAT_QUARANTINE_RESTORED")]
    BDAS_BITDEFENDER_THREAT_QUARANTINE_RESTORED = 146,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_THREAT_QUARANTINE_RESTORED_CUSTOMPATH")]
    BDAS_BITDEFENDER_THREAT_QUARANTINE_RESTORED_CUSTOMPATH = 147,

    [System.Runtime.Serialization.EnumMember(Value = @"BDAS_BITDEFENDER_THREAT_QUARANTINE_DELETED")]
    BDAS_BITDEFENDER_THREAT_QUARANTINE_DELETED = 148,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_RETRY_INSTALL_COMPLETED")]
    BITDEFENDER_RETRY_INSTALL_COMPLETED = 149,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_DISABLED")]
    BITDEFENDER_DISABLED = 150,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_EXISTING_PRODUCT_UNINSTALL")]
    BITDEFENDER_EXISTING_PRODUCT_UNINSTALL = 151,

    [System.Runtime.Serialization.EnumMember(Value = @"COMPETITOR_EXISTING_PRODUCT_UNINSTALL")]
    COMPETITOR_EXISTING_PRODUCT_UNINSTALL = 152,

    [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_INSTALL_OPTION_CHANGED")]
    SCHEDULE_INSTALL_OPTION_CHANGED = 153,

    [System.Runtime.Serialization.EnumMember(Value = @"SECURITY_CREDENTIAL_ACCESS_GRANTED")]
    SECURITY_CREDENTIAL_ACCESS_GRANTED = 154,

    [System.Runtime.Serialization.EnumMember(Value = @"SECURITY_CREDENTIAL_ACCESS_DENIED")]
    SECURITY_CREDENTIAL_ACCESS_DENIED = 155,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_SCAN_STARTED")]
    PATCH_MANAGEMENT_SCAN_STARTED = 156,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_SCAN_COMPLETED")]
    PATCH_MANAGEMENT_SCAN_COMPLETED = 157,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_APPLY_PATCH_STARTED")]
    PATCH_MANAGEMENT_APPLY_PATCH_STARTED = 158,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_APPLY_PATCH_COMPLETED")]
    PATCH_MANAGEMENT_APPLY_PATCH_COMPLETED = 159,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_INSTALLED")]
    PATCH_MANAGEMENT_INSTALLED = 160,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_INSTALL_FAILED")]
    PATCH_MANAGEMENT_INSTALL_FAILED = 161,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_MESSAGE")]
    PATCH_MANAGEMENT_MESSAGE = 162,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_FAILURE")]
    PATCH_MANAGEMENT_FAILURE = 163,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_ROLLBACK_PATCH_REQUESTED")]
    PATCH_MANAGEMENT_ROLLBACK_PATCH_REQUESTED = 164,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_ROLLBACK_PATCH_STARTED")]
    PATCH_MANAGEMENT_ROLLBACK_PATCH_STARTED = 165,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_ROLLBACK_PATCH_COMPLETED")]
    PATCH_MANAGEMENT_ROLLBACK_PATCH_COMPLETED = 166,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_PATCH_APPROVED")]
    PATCH_MANAGEMENT_PATCH_APPROVED = 167,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT_PATCH_REJECTED")]
    PATCH_MANAGEMENT_PATCH_REJECTED = 168,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT_SCAN_STARTED")]
    SOFTWARE_PATCH_MANAGEMENT_SCAN_STARTED = 169,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT_SCAN_COMPLETED")]
    SOFTWARE_PATCH_MANAGEMENT_SCAN_COMPLETED = 170,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT_APPLY_PATCH_STARTED")]
    SOFTWARE_PATCH_MANAGEMENT_APPLY_PATCH_STARTED = 171,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT_APPLY_PATCH_COMPLETED")]
    SOFTWARE_PATCH_MANAGEMENT_APPLY_PATCH_COMPLETED = 172,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT_INSTALLED")]
    SOFTWARE_PATCH_MANAGEMENT_INSTALLED = 173,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT_INSTALL_FAILED")]
    SOFTWARE_PATCH_MANAGEMENT_INSTALL_FAILED = 174,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT_MESSAGE")]
    SOFTWARE_PATCH_MANAGEMENT_MESSAGE = 175,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT_PATCH_APPROVED")]
    SOFTWARE_PATCH_MANAGEMENT_PATCH_APPROVED = 176,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT_PATCH_REJECTED")]
    SOFTWARE_PATCH_MANAGEMENT_PATCH_REJECTED = 177,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_INSTALLED")]
    TEAMVIEWER_INSTALLED = 178,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_INSTALL_FAILED")]
    TEAMVIEWER_INSTALL_FAILED = 179,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_UNINSTALLED")]
    TEAMVIEWER_UNINSTALLED = 180,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_UNINSTALL_FAILED")]
    TEAMVIEWER_UNINSTALL_FAILED = 181,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_CONNECTION_ESTABLISHED")]
    TEAMVIEWER_CONNECTION_ESTABLISHED = 182,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_CONNECTION_TERMINATED")]
    TEAMVIEWER_CONNECTION_TERMINATED = 183,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_PERMANENT_PASSWORD_CHANGED")]
    TEAMVIEWER_PERMANENT_PASSWORD_CHANGED = 184,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_ACCOUNTNAME_ADDED")]
    TEAMVIEWER_ACCOUNTNAME_ADDED = 185,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_ACCOUNTNAME_CHANGED")]
    TEAMVIEWER_ACCOUNTNAME_CHANGED = 186,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_ACCOUNTNAME_REMOVED")]
    TEAMVIEWER_ACCOUNTNAME_REMOVED = 187,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_CONNECTION_CANCELLED")]
    TEAMVIEWER_CONNECTION_CANCELLED = 188,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_CONFIG_CHANGED")]
    TEAMVIEWER_CONFIG_CHANGED = 189,

    [System.Runtime.Serialization.EnumMember(Value = @"SPLASHTOP_CONNECTION_INITIATED")]
    SPLASHTOP_CONNECTION_INITIATED = 190,

    [System.Runtime.Serialization.EnumMember(Value = @"SPLASHTOP_CONNECTION_ESTABLISHED")]
    SPLASHTOP_CONNECTION_ESTABLISHED = 191,

    [System.Runtime.Serialization.EnumMember(Value = @"SPLASHTOP_CONNECTION_TERMINATED")]
    SPLASHTOP_CONNECTION_TERMINATED = 192,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_UPLOAD_FILE_INITIATED")]
    REMOTE_TOOLS_UPLOAD_FILE_INITIATED = 193,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_DOWNLOAD_FILE_INITIATED")]
    REMOTE_TOOLS_DOWNLOAD_FILE_INITIATED = 194,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_COMPRESS_FILE_INITIATED")]
    REMOTE_TOOLS_COMPRESS_FILE_INITIATED = 195,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_COMPRESS_FILE_SUCCESS")]
    REMOTE_TOOLS_COMPRESS_FILE_SUCCESS = 196,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_COMPRESS_FILE_FAILED")]
    REMOTE_TOOLS_COMPRESS_FILE_FAILED = 197,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_CREATE_DIRECTORY_INITIATED")]
    REMOTE_TOOLS_CREATE_DIRECTORY_INITIATED = 198,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_RENAME_FILE_INITIATED")]
    REMOTE_TOOLS_RENAME_FILE_INITIATED = 199,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_DELETE_FILE_INITIATED")]
    REMOTE_TOOLS_DELETE_FILE_INITIATED = 200,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_MODIFY_OBJECT_SUCCESS")]
    REMOTE_TOOLS_MODIFY_OBJECT_SUCCESS = 201,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_MODIFY_OBJECT_FAILED")]
    REMOTE_TOOLS_MODIFY_OBJECT_FAILED = 202,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_COPY_OBJECT_SUCCESS")]
    REMOTE_TOOLS_COPY_OBJECT_SUCCESS = 203,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_COPY_OBJECT_FAILED")]
    REMOTE_TOOLS_COPY_OBJECT_FAILED = 204,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_MOVE_OBJECT_SUCCESS")]
    REMOTE_TOOLS_MOVE_OBJECT_SUCCESS = 205,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_MOVE_OBJECT_FAILED")]
    REMOTE_TOOLS_MOVE_OBJECT_FAILED = 206,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_DELETE_OBJECT_SUCCESS")]
    REMOTE_TOOLS_DELETE_OBJECT_SUCCESS = 207,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_DELETE_OBJECT_FAILED")]
    REMOTE_TOOLS_DELETE_OBJECT_FAILED = 208,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_CREATE_DIRECTORY_SUCCESS")]
    REMOTE_TOOLS_CREATE_DIRECTORY_SUCCESS = 209,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_CREATE_DIRECTORY_FAILED")]
    REMOTE_TOOLS_CREATE_DIRECTORY_FAILED = 210,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_FILE_TRANSFER_SUCCESS")]
    REMOTE_TOOLS_FILE_TRANSFER_SUCCESS = 211,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_FILE_TRANSFER_FAILED")]
    REMOTE_TOOLS_FILE_TRANSFER_FAILED = 212,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_SERVICE_CONTROL_INITIATED")]
    REMOTE_TOOLS_SERVICE_CONTROL_INITIATED = 213,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_START_SERVICE_SUCCESS")]
    REMOTE_TOOLS_START_SERVICE_SUCCESS = 214,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_START_SERVICE_FAILED")]
    REMOTE_TOOLS_START_SERVICE_FAILED = 215,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_STOP_SERVICE_SUCCESS")]
    REMOTE_TOOLS_STOP_SERVICE_SUCCESS = 216,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_STOP_SERVICE_FAILED")]
    REMOTE_TOOLS_STOP_SERVICE_FAILED = 217,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_RESTART_SERVICE_SUCCESS")]
    REMOTE_TOOLS_RESTART_SERVICE_SUCCESS = 218,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_RESTART_SERVICE_FAILED")]
    REMOTE_TOOLS_RESTART_SERVICE_FAILED = 219,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_START_TYPE_CHANGE_SUCCESS")]
    REMOTE_TOOLS_START_TYPE_CHANGE_SUCCESS = 220,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_START_TYPE_CHANGE_FAILED")]
    REMOTE_TOOLS_START_TYPE_CHANGE_FAILED = 221,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_PROCESS_CONTROL_INITIATED")]
    REMOTE_TOOLS_PROCESS_CONTROL_INITIATED = 222,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_SET_PROCESS_PRIORITY_SUCESS")]
    REMOTE_TOOLS_SET_PROCESS_PRIORITY_SUCESS = 223,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_SET_PROCESS_PRIORITY_FAILED")]
    REMOTE_TOOLS_SET_PROCESS_PRIORITY_FAILED = 224,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_TERMINATE_PROCESS_SUCCESS")]
    REMOTE_TOOLS_TERMINATE_PROCESS_SUCCESS = 225,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_TERMINATE_PROCESS_FAILED")]
    REMOTE_TOOLS_TERMINATE_PROCESS_FAILED = 226,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_TERMINATE_PROCESS_TREE_SUCCESS")]
    REMOTE_TOOLS_TERMINATE_PROCESS_TREE_SUCCESS = 227,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_TERMINATE_PROCESS_TREE_FAILED")]
    REMOTE_TOOLS_TERMINATE_PROCESS_TREE_FAILED = 228,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_REGISTRY_CONTROL_INITIATED")]
    REMOTE_TOOLS_REGISTRY_CONTROL_INITIATED = 229,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_CREATE_KEY_SUCCESS")]
    REMOTE_TOOLS_CREATE_KEY_SUCCESS = 230,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_CREATE_KEY_FAILED")]
    REMOTE_TOOLS_CREATE_KEY_FAILED = 231,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_RENAME_KEY_SUCCESS")]
    REMOTE_TOOLS_RENAME_KEY_SUCCESS = 232,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_RENAME_KEY_FAILED")]
    REMOTE_TOOLS_RENAME_KEY_FAILED = 233,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_DELETE_KEY_SUCCESS")]
    REMOTE_TOOLS_DELETE_KEY_SUCCESS = 234,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_DELETE_KEY_FAILED")]
    REMOTE_TOOLS_DELETE_KEY_FAILED = 235,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_CREATE_PARAMETER_SUCCESS")]
    REMOTE_TOOLS_CREATE_PARAMETER_SUCCESS = 236,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_CREATE_PARAMETER_FAILED")]
    REMOTE_TOOLS_CREATE_PARAMETER_FAILED = 237,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_RENAME_PARAMETER_SUCCESS")]
    REMOTE_TOOLS_RENAME_PARAMETER_SUCCESS = 238,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_RENAME_PARAMETER_FAILED")]
    REMOTE_TOOLS_RENAME_PARAMETER_FAILED = 239,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_DELETE_PARAMETER_SUCCESS")]
    REMOTE_TOOLS_DELETE_PARAMETER_SUCCESS = 240,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_DELETE_PARAMETER_FAILED")]
    REMOTE_TOOLS_DELETE_PARAMETER_FAILED = 241,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_MODIFY_PARAMETER_SUCCESS")]
    REMOTE_TOOLS_MODIFY_PARAMETER_SUCCESS = 242,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_MODIFY_PARAMETER_FAILED")]
    REMOTE_TOOLS_MODIFY_PARAMETER_FAILED = 243,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS_ACTIVE_DIRECTORY_INITIATED")]
    REMOTE_TOOLS_ACTIVE_DIRECTORY_INITIATED = 244,

    [System.Runtime.Serialization.EnumMember(Value = @"ADAPTER_ADDED")]
    ADAPTER_ADDED = 245,

    [System.Runtime.Serialization.EnumMember(Value = @"ADAPTER_REMOVED")]
    ADAPTER_REMOVED = 246,

    [System.Runtime.Serialization.EnumMember(Value = @"ADAPTER_CONFIG_CHANGED")]
    ADAPTER_CONFIG_CHANGED = 247,

    [System.Runtime.Serialization.EnumMember(Value = @"ADAPTER_STATUS_CHANGED")]
    ADAPTER_STATUS_CHANGED = 248,

    [System.Runtime.Serialization.EnumMember(Value = @"CPU_ADDED")]
    CPU_ADDED = 249,

    [System.Runtime.Serialization.EnumMember(Value = @"CPU_REMOVED")]
    CPU_REMOVED = 250,

    [System.Runtime.Serialization.EnumMember(Value = @"MEMORY_ADDED")]
    MEMORY_ADDED = 251,

    [System.Runtime.Serialization.EnumMember(Value = @"MEMORY_REMOVED")]
    MEMORY_REMOVED = 252,

    [System.Runtime.Serialization.EnumMember(Value = @"DISK_DRIVE_ADDED")]
    DISK_DRIVE_ADDED = 253,

    [System.Runtime.Serialization.EnumMember(Value = @"DISK_DRIVE_REMOVED")]
    DISK_DRIVE_REMOVED = 254,

    [System.Runtime.Serialization.EnumMember(Value = @"USER_LOGGED_IN")]
    USER_LOGGED_IN = 255,

    [System.Runtime.Serialization.EnumMember(Value = @"USER_LOGGED_OUT")]
    USER_LOGGED_OUT = 256,

    [System.Runtime.Serialization.EnumMember(Value = @"PORT_OPENED")]
    PORT_OPENED = 257,

    [System.Runtime.Serialization.EnumMember(Value = @"PORT_CLOSED")]
    PORT_CLOSED = 258,

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_SERVICE_STARTED")]
    WINDOWS_SERVICE_STARTED = 259,

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_SERVICE_STOPPED")]
    WINDOWS_SERVICE_STOPPED = 260,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_DAEMON_STARTED")]
    MAC_DAEMON_STARTED = 261,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_DAEMON_STOPPED")]
    MAC_DAEMON_STOPPED = 262,

    [System.Runtime.Serialization.EnumMember(Value = @"USER_ACCOUNT_ADDED")]
    USER_ACCOUNT_ADDED = 263,

    [System.Runtime.Serialization.EnumMember(Value = @"USER_ACCOUNT_REMOVED")]
    USER_ACCOUNT_REMOVED = 264,

    [System.Runtime.Serialization.EnumMember(Value = @"PROCESS_STARTED")]
    PROCESS_STARTED = 265,

    [System.Runtime.Serialization.EnumMember(Value = @"PROCESS_STOPPED")]
    PROCESS_STOPPED = 266,

    [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_REBOOTED")]
    SYSTEM_REBOOTED = 267,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_ADDED")]
    SOFTWARE_ADDED = 268,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_REMOVED")]
    SOFTWARE_REMOVED = 269,

    [System.Runtime.Serialization.EnumMember(Value = @"DISK_PARTITION_ADDED")]
    DISK_PARTITION_ADDED = 270,

    [System.Runtime.Serialization.EnumMember(Value = @"DISK_PARTITION_REMOVED")]
    DISK_PARTITION_REMOVED = 271,

    [System.Runtime.Serialization.EnumMember(Value = @"DISK_VOLUME_ADDED")]
    DISK_VOLUME_ADDED = 272,

    [System.Runtime.Serialization.EnumMember(Value = @"DISK_VOLUME_REMOVED")]
    DISK_VOLUME_REMOVED = 273,

    [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIALS_CHANGED")]
    CREDENTIALS_CHANGED = 274,

    [System.Runtime.Serialization.EnumMember(Value = @"RAID_CONTROLLER_ADDED")]
    RAID_CONTROLLER_ADDED = 275,

    [System.Runtime.Serialization.EnumMember(Value = @"RAID_CONTROLLER_REMOVED")]
    RAID_CONTROLLER_REMOVED = 276,

    [System.Runtime.Serialization.EnumMember(Value = @"RAID_PHYSICAL_DRIVE_ADDED")]
    RAID_PHYSICAL_DRIVE_ADDED = 277,

    [System.Runtime.Serialization.EnumMember(Value = @"RAID_PHYSICAL_DRIVE_REMOVED")]
    RAID_PHYSICAL_DRIVE_REMOVED = 278,

    [System.Runtime.Serialization.EnumMember(Value = @"RAID_LOGICAL_DISK_ADDED")]
    RAID_LOGICAL_DISK_ADDED = 279,

    [System.Runtime.Serialization.EnumMember(Value = @"RAID_LOGICAL_DISK_REMOVED")]
    RAID_LOGICAL_DISK_REMOVED = 280,

    [System.Runtime.Serialization.EnumMember(Value = @"BITLOCKER_ENABLED")]
    BITLOCKER_ENABLED = 281,

    [System.Runtime.Serialization.EnumMember(Value = @"BITLOCKER_DISABLED")]
    BITLOCKER_DISABLED = 282,

    [System.Runtime.Serialization.EnumMember(Value = @"FILEVAULT_ENABLED")]
    FILEVAULT_ENABLED = 283,

    [System.Runtime.Serialization.EnumMember(Value = @"FILEVAULT_DISABLED")]
    FILEVAULT_DISABLED = 284,

    [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_PLATFORM_MODULE_ENABLED")]
    TRUSTED_PLATFORM_MODULE_ENABLED = 285,

    [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_PLATFORM_MODULE_DISABLED")]
    TRUSTED_PLATFORM_MODULE_DISABLED = 286,

    [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_PLATFORM_MODULE_INSTALLED")]
    TRUSTED_PLATFORM_MODULE_INSTALLED = 287,

    [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_PLATFORM_MODULE_UNINSTALLED")]
    TRUSTED_PLATFORM_MODULE_UNINSTALLED = 288,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVER_MESSAGE")]
    SERVER_MESSAGE = 289,

    [System.Runtime.Serialization.EnumMember(Value = @"AGENT_MESSAGE")]
    AGENT_MESSAGE = 290,

    [System.Runtime.Serialization.EnumMember(Value = @"WEBAPP_MESSAGE")]
    WEBAPP_MESSAGE = 291,

    [System.Runtime.Serialization.EnumMember(Value = @"DIVISION_FEATURE_ENABLED")]
    DIVISION_FEATURE_ENABLED = 292,

    [System.Runtime.Serialization.EnumMember(Value = @"DIVISION_FEATURE_DISABLED")]
    DIVISION_FEATURE_DISABLED = 293,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_JOBS_CANCELLED")]
    NODE_JOBS_CANCELLED = 294,

    [System.Runtime.Serialization.EnumMember(Value = @"DIVISION_STATUS_CHANGED")]
    DIVISION_STATUS_CHANGED = 295,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_INSTALLED")]
    SHADOWPROTECT_INSTALLED = 296,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_INSTALL_FAILED")]
    SHADOWPROTECT_INSTALL_FAILED = 297,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_UNINSTALLED")]
    SHADOWPROTECT_UNINSTALLED = 298,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_UNINSTALL_FAILED")]
    SHADOWPROTECT_UNINSTALL_FAILED = 299,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_BACKUPJOB_FAILED")]
    SHADOWPROTECT_BACKUPJOB_FAILED = 300,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_BACKUPJOB_ABORTED")]
    SHADOWPROTECT_BACKUPJOB_ABORTED = 301,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_LICENSE_PROVISIONED")]
    SHADOWPROTECT_LICENSE_PROVISIONED = 302,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_LICENSE_PROVISION_FAILED")]
    SHADOWPROTECT_LICENSE_PROVISION_FAILED = 303,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_LICENSE_ACTIVATED")]
    SHADOWPROTECT_LICENSE_ACTIVATED = 304,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_LICENSE_ACTIVATION_FAILED")]
    SHADOWPROTECT_LICENSE_ACTIVATION_FAILED = 305,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_LICENSE_DEACTIVATED")]
    SHADOWPROTECT_LICENSE_DEACTIVATED = 306,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_LICENSE_DEACTIVATION_FAILED")]
    SHADOWPROTECT_LICENSE_DEACTIVATION_FAILED = 307,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_INSTALLED")]
    IMAGEMANAGER_INSTALLED = 308,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_INSTALL_FAILED")]
    IMAGEMANAGER_INSTALL_FAILED = 309,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_UNINSTALLED")]
    IMAGEMANAGER_UNINSTALLED = 310,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_UNINSTALL_FAILED")]
    IMAGEMANAGER_UNINSTALL_FAILED = 311,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_LICENSE_PROVISIONED")]
    IMAGEMANAGER_LICENSE_PROVISIONED = 312,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_LICENSE_PROVISION_FAILED")]
    IMAGEMANAGER_LICENSE_PROVISION_FAILED = 313,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_LICENSE_ACTIVATED")]
    IMAGEMANAGER_LICENSE_ACTIVATED = 314,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_LICENSE_ACTIVATION_FAILED")]
    IMAGEMANAGER_LICENSE_ACTIVATION_FAILED = 315,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_LICENSE_DEACTIVATED")]
    IMAGEMANAGER_LICENSE_DEACTIVATED = 316,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_LICENSE_DEACTIVATION_FAILED")]
    IMAGEMANAGER_LICENSE_DEACTIVATION_FAILED = 317,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_CONSOLIDATION_FAILED")]
    IMAGEMANAGER_CONSOLIDATION_FAILED = 318,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_VERIFICATION_FAILED")]
    IMAGEMANAGER_VERIFICATION_FAILED = 319,

    [System.Runtime.Serialization.EnumMember(Value = @"HELP_REQUEST_SUBMITTED")]
    HELP_REQUEST_SUBMITTED = 320,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_INSTALLED")]
    CLOUDBERRY_INSTALLED = 321,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_INSTALL_FAILED")]
    CLOUDBERRY_INSTALL_FAILED = 322,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_UNINSTALLED")]
    CLOUDBERRY_UNINSTALLED = 323,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_UNINSTALL_FAILED")]
    CLOUDBERRY_UNINSTALL_FAILED = 324,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_BACKUPPLAN_CREATED")]
    CLOUDBERRY_BACKUPPLAN_CREATED = 325,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_BACKUPPLAN_EDITED")]
    CLOUDBERRY_BACKUPPLAN_EDITED = 326,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_BACKUPPLAN_DELETED")]
    CLOUDBERRY_BACKUPPLAN_DELETED = 327,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_BACKUPPLAN_CREATION_FAILED")]
    CLOUDBERRY_BACKUPPLAN_CREATION_FAILED = 328,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_BACKUPJOB_STARTED")]
    CLOUDBERRY_BACKUPJOB_STARTED = 329,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_BACKUPJOB_SUCCEEDED")]
    CLOUDBERRY_BACKUPJOB_SUCCEEDED = 330,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_BACKUPJOB_FAILED")]
    CLOUDBERRY_BACKUPJOB_FAILED = 331,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_BACKUPJOB_COMPLETED_WITH_WARNING")]
    CLOUDBERRY_BACKUPJOB_COMPLETED_WITH_WARNING = 332,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_USER_CREATED")]
    CLOUDBERRY_USER_CREATED = 333,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_NETWORK_CREDENTIAL_CREATED")]
    CLOUDBERRY_NETWORK_CREDENTIAL_CREATED = 334,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_NETWORK_CREDENTIAL_CREATION_FAILED")]
    CLOUDBERRY_NETWORK_CREDENTIAL_CREATION_FAILED = 335,

    [System.Runtime.Serialization.EnumMember(Value = @"RDP_CONNECTION_INITIATED")]
    RDP_CONNECTION_INITIATED = 336,

    [System.Runtime.Serialization.EnumMember(Value = @"RDP_CONNECTION_ESTABLISHED")]
    RDP_CONNECTION_ESTABLISHED = 337,

    [System.Runtime.Serialization.EnumMember(Value = @"RDP_CONNECTION_TERMINATED")]
    RDP_CONNECTION_TERMINATED = 338,

    [System.Runtime.Serialization.EnumMember(Value = @"RDP_AUTO_PROVISION")]
    RDP_AUTO_PROVISION = 339,

    [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED_TASK_CREATED")]
    SCHEDULED_TASK_CREATED = 340,

    [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED_TASK_UPDATED")]
    SCHEDULED_TASK_UPDATED = 341,

    [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED_TASK_DELETED")]
    SCHEDULED_TASK_DELETED = 342,

    [System.Runtime.Serialization.EnumMember(Value = @"SCRIPT_CREATED")]
    SCRIPT_CREATED = 343,

    [System.Runtime.Serialization.EnumMember(Value = @"SCRIPT_UPDATED")]
    SCRIPT_UPDATED = 344,

    [System.Runtime.Serialization.EnumMember(Value = @"SCRIPT_DELETED")]
    SCRIPT_DELETED = 345,

    [System.Runtime.Serialization.EnumMember(Value = @"NC_SESSION_REQUESTED")]
    NC_SESSION_REQUESTED = 346,

    [System.Runtime.Serialization.EnumMember(Value = @"NC_SESSION_STARTED")]
    NC_SESSION_STARTED = 347,

    [System.Runtime.Serialization.EnumMember(Value = @"NC_SESSION_TERMINATED")]
    NC_SESSION_TERMINATED = 348,

    [System.Runtime.Serialization.EnumMember(Value = @"NC_SESSION_SESSION_TERMINATION_REQUESTED")]
    NC_SESSION_SESSION_TERMINATION_REQUESTED = 349,

    [System.Runtime.Serialization.EnumMember(Value = @"NC_SESSION_FAILED_TO_START")]
    NC_SESSION_FAILED_TO_START = 350,

    [System.Runtime.Serialization.EnumMember(Value = @"NC_CONFIG_CHANGED")]
    NC_CONFIG_CHANGED = 351,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPJOB_START_REQUESTED")]
    LOCKHART_BACKUPJOB_START_REQUESTED = 352,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPJOB_STARTED")]
    LOCKHART_BACKUPJOB_STARTED = 353,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPJOB_IN_PROCESS")]
    LOCKHART_BACKUPJOB_IN_PROCESS = 354,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPJOB_COMPLETED")]
    LOCKHART_BACKUPJOB_COMPLETED = 355,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPJOB_FAILED")]
    LOCKHART_BACKUPJOB_FAILED = 356,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_RESTOREJOB_START_REQUESTED")]
    LOCKHART_RESTOREJOB_START_REQUESTED = 357,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_RESTOREJOB_STARTED")]
    LOCKHART_RESTOREJOB_STARTED = 358,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_RESTOREJOB_IN_PROCESS")]
    LOCKHART_RESTOREJOB_IN_PROCESS = 359,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_RESTOREJOB_COMPLETED")]
    LOCKHART_RESTOREJOB_COMPLETED = 360,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_RESTOREJOB_FAILED")]
    LOCKHART_RESTOREJOB_FAILED = 361,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPJOB_COMPLETED_WITH_WARNING")]
    LOCKHART_BACKUPJOB_COMPLETED_WITH_WARNING = 362,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUP_DOWNLOADED")]
    LOCKHART_BACKUP_DOWNLOADED = 363,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPPLAN_ADDED")]
    LOCKHART_BACKUPPLAN_ADDED = 364,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPPLAN_EDITED")]
    LOCKHART_BACKUPPLAN_EDITED = 365,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPPLAN_DELETED")]
    LOCKHART_BACKUPPLAN_DELETED = 366,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPJOB_CANCELLED")]
    LOCKHART_BACKUPJOB_CANCELLED = 367,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPJOB_PROCESSING")]
    LOCKHART_BACKUPJOB_PROCESSING = 368,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_INSTALL_FAILED")]
    LOCKHART_INSTALL_FAILED = 369,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_UNINSTALL_FAILED")]
    LOCKHART_UNINSTALL_FAILED = 370,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_INSTALLED")]
    LOCKHART_INSTALLED = 371,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_UNINSTALLED")]
    LOCKHART_UNINSTALLED = 372,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_RESTOREJOB_CANCELLED")]
    LOCKHART_RESTOREJOB_CANCELLED = 373,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUPPLAN_CREATION_FAILED")]
    LOCKHART_BACKUPPLAN_CREATION_FAILED = 374,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUP_CONFIGURE_FAILED")]
    LOCKHART_BACKUP_CONFIGURE_FAILED = 375,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_FILE_DOWNLOAD")]
    LOCKHART_FILE_DOWNLOAD = 376,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_FOLDER_DOWNLOAD")]
    LOCKHART_FOLDER_DOWNLOAD = 377,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_UPSYNCJOB_PROCESSING")]
    LOCKHART_UPSYNCJOB_PROCESSING = 378,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_UPSYNCJOB_IN_PROCESS")]
    LOCKHART_UPSYNCJOB_IN_PROCESS = 379,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_UPSYNCJOB_STARTED")]
    LOCKHART_UPSYNCJOB_STARTED = 380,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_UPSYNCJOB_COMPLETED")]
    LOCKHART_UPSYNCJOB_COMPLETED = 381,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_UPSYNCJOB_CANCELLED")]
    LOCKHART_UPSYNCJOB_CANCELLED = 382,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_UPSYNCJOB_FAILED")]
    LOCKHART_UPSYNCJOB_FAILED = 383,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_BACKUP_NAS_ACCESS_FAILED")]
    LOCKHART_BACKUP_NAS_ACCESS_FAILED = 384,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_RESTORE_STARTED")]
    LOCKHART_IMAGE_RESTORE_STARTED = 385,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_RESTORE_COMPLETED")]
    LOCKHART_IMAGE_RESTORE_COMPLETED = 386,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_RESTORE_FAILED")]
    LOCKHART_IMAGE_RESTORE_FAILED = 387,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_DOWNLOAD_STARTED")]
    LOCKHART_IMAGE_DOWNLOAD_STARTED = 388,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_DOWNLOAD_COMPLETED")]
    LOCKHART_IMAGE_DOWNLOAD_COMPLETED = 389,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_DOWNLOAD_FAILED")]
    LOCKHART_IMAGE_DOWNLOAD_FAILED = 390,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_DOWNLOAD_FILE_STARTED")]
    LOCKHART_IMAGE_DOWNLOAD_FILE_STARTED = 391,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_DOWNLOAD_FILE_COMPLETED")]
    LOCKHART_IMAGE_DOWNLOAD_FILE_COMPLETED = 392,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_DOWNLOAD_FILE_FAILED")]
    LOCKHART_IMAGE_DOWNLOAD_FILE_FAILED = 393,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_MOUNT_COMPLETED")]
    LOCKHART_IMAGE_MOUNT_COMPLETED = 394,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_MOUNT_FAILED")]
    LOCKHART_IMAGE_MOUNT_FAILED = 395,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_INTEGRITY_CHECK_START_REQUESTED")]
    LOCKHART_INTEGRITY_CHECK_START_REQUESTED = 396,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_INTEGRITY_CHECK_STARTED")]
    LOCKHART_INTEGRITY_CHECK_STARTED = 397,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_INTEGRITY_CHECK_IN_PROCESS")]
    LOCKHART_INTEGRITY_CHECK_IN_PROCESS = 398,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_INTEGRITY_CHECK_COMPLETED")]
    LOCKHART_INTEGRITY_CHECK_COMPLETED = 399,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_INTEGRITY_CHECK_FAILED")]
    LOCKHART_INTEGRITY_CHECK_FAILED = 400,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_INTEGRITY_CHECK_CANCELLED")]
    LOCKHART_INTEGRITY_CHECK_CANCELLED = 401,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_DOWNLOAD_FOLDER_STARTED")]
    LOCKHART_IMAGE_DOWNLOAD_FOLDER_STARTED = 402,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_DOWNLOAD_FOLDER_COMPLETED")]
    LOCKHART_IMAGE_DOWNLOAD_FOLDER_COMPLETED = 403,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_DOWNLOAD_FOLDER_FAILED")]
    LOCKHART_IMAGE_DOWNLOAD_FOLDER_FAILED = 404,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_RESTORE_CANCELED")]
    LOCKHART_IMAGE_RESTORE_CANCELED = 405,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_IMAGE_DOWNLOAD_CANCELED")]
    LOCKHART_IMAGE_DOWNLOAD_CANCELED = 406,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_REVISIONS_DELETE_STARTED")]
    LOCKHART_REVISIONS_DELETE_STARTED = 407,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_REVISIONS_DELETED")]
    LOCKHART_REVISIONS_DELETED = 408,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_REVISIONS_DELETE_FAILED")]
    LOCKHART_REVISIONS_DELETE_FAILED = 409,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_FOLDERS_DELETED")]
    LOCKHART_FOLDERS_DELETED = 410,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_FILES_DELETED")]
    LOCKHART_FILES_DELETED = 411,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_FILES_AND_FOLDERS_DELETED")]
    LOCKHART_FILES_AND_FOLDERS_DELETED = 412,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCKHART_REVISIONS_DELETION_SCHEDULED")]
    LOCKHART_REVISIONS_DELETION_SCHEDULED = 413,

    [System.Runtime.Serialization.EnumMember(Value = @"QC_INVITATION_CREATED")]
    QC_INVITATION_CREATED = 414,

    [System.Runtime.Serialization.EnumMember(Value = @"QC_INVITATION_DISABLED")]
    QC_INVITATION_DISABLED = 415,

    [System.Runtime.Serialization.EnumMember(Value = @"QC_EXPIRED_INVITATION_BLOCKED")]
    QC_EXPIRED_INVITATION_BLOCKED = 416,

    [System.Runtime.Serialization.EnumMember(Value = @"QC_INVITATION_UPDATED")]
    QC_INVITATION_UPDATED = 417,

    [System.Runtime.Serialization.EnumMember(Value = @"QC_DEVICE_DELETED")]
    QC_DEVICE_DELETED = 418,

    [System.Runtime.Serialization.EnumMember(Value = @"QC_DEVICE_AGENT_INSTALL_REQUESTED")]
    QC_DEVICE_AGENT_INSTALL_REQUESTED = 419,

    [System.Runtime.Serialization.EnumMember(Value = @"QC_SESSION_STARTED")]
    QC_SESSION_STARTED = 420,

    [System.Runtime.Serialization.EnumMember(Value = @"QC_SESSION_TERMINATED")]
    QC_SESSION_TERMINATED = 421,

    [System.Runtime.Serialization.EnumMember(Value = @"QC_SESSION_REPORT_SUBMITTED")]
    QC_SESSION_REPORT_SUBMITTED = 422,

    [System.Runtime.Serialization.EnumMember(Value = @"API_ACCESS_GRANTED")]
    API_ACCESS_GRANTED = 423,

    [System.Runtime.Serialization.EnumMember(Value = @"API_ACCESS_DENIED")]
    API_ACCESS_DENIED = 424,

    [System.Runtime.Serialization.EnumMember(Value = @"API_WEBHOOK_CONFIGURATION_UPDATED")]
    API_WEBHOOK_CONFIGURATION_UPDATED = 425,

    [System.Runtime.Serialization.EnumMember(Value = @"API_ACCESS_REVOKED")]
    API_ACCESS_REVOKED = 426,

    [System.Runtime.Serialization.EnumMember(Value = @"MAINTENANCE_MODE_CONFIGURED")]
    MAINTENANCE_MODE_CONFIGURED = 427,

    [System.Runtime.Serialization.EnumMember(Value = @"MAINTENANCE_MODE_DELETED")]
    MAINTENANCE_MODE_DELETED = 428,

    [System.Runtime.Serialization.EnumMember(Value = @"MAINTENANCE_MODE_MODIFIED")]
    MAINTENANCE_MODE_MODIFIED = 429,

    [System.Runtime.Serialization.EnumMember(Value = @"MAINTENANCE_MODE_FAILED")]
    MAINTENANCE_MODE_FAILED = 430,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_SUPPORT_CREATED")]
    REMOTE_SUPPORT_CREATED = 431,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_SUPPORT_UPDATED")]
    REMOTE_SUPPORT_UPDATED = 432,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_SUPPORT_DELETED")]
    REMOTE_SUPPORT_DELETED = 433,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_ADD_USER_TO_GROUP_AND_SET_PRIMARY_GROUP_FAILED")]
    ACTIVE_DIRECTORY_ADD_USER_TO_GROUP_AND_SET_PRIMARY_GROUP_FAILED = 434,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_ADD_USER_TO_GROUP_AND_SET_PRIMARY_GROUP_SUCCESS")]
    ACTIVE_DIRECTORY_ADD_USER_TO_GROUP_AND_SET_PRIMARY_GROUP_SUCCESS = 435,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_ADD_USER_TO_GROUP_FAILED")]
    ACTIVE_DIRECTORY_ADD_USER_TO_GROUP_FAILED = 436,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_ADD_USER_TO_GROUP_SUCCESS")]
    ACTIVE_DIRECTORY_ADD_USER_TO_GROUP_SUCCESS = 437,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_ALLOW_USER_PASSWORD_CHANGE_FAILED")]
    ACTIVE_DIRECTORY_ALLOW_USER_PASSWORD_CHANGE_FAILED = 438,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_ALLOW_USER_PASSWORD_CHANGE_SUCCESS")]
    ACTIVE_DIRECTORY_ALLOW_USER_PASSWORD_CHANGE_SUCCESS = 439,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_DISABLED_ACCOUNT_EXPIRATION_FAILED")]
    ACTIVE_DIRECTORY_DISABLED_ACCOUNT_EXPIRATION_FAILED = 440,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_DISABLED_ACCOUNT_EXPIRATION_SUCCESS")]
    ACTIVE_DIRECTORY_DISABLED_ACCOUNT_EXPIRATION_SUCCESS = 441,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_DISABLED_PASSWORD_EXPIRATION_FAILED")]
    ACTIVE_DIRECTORY_DISABLED_PASSWORD_EXPIRATION_FAILED = 442,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_DISABLED_PASSWORD_EXPIRATION_SUCCESS")]
    ACTIVE_DIRECTORY_DISABLED_PASSWORD_EXPIRATION_SUCCESS = 443,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_DISABLE_USER_FAILED")]
    ACTIVE_DIRECTORY_DISABLE_USER_FAILED = 444,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_DISABLE_USER_SUCCESS")]
    ACTIVE_DIRECTORY_DISABLE_USER_SUCCESS = 445,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_DISALLOW_USER_PASSWORD_CHANGE_FAILED")]
    ACTIVE_DIRECTORY_DISALLOW_USER_PASSWORD_CHANGE_FAILED = 446,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_DISALLOW_USER_PASSWORD_CHANGE_SUCCESS")]
    ACTIVE_DIRECTORY_DISALLOW_USER_PASSWORD_CHANGE_SUCCESS = 447,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_ENABLE_USER_FAILED")]
    ACTIVE_DIRECTORY_ENABLE_USER_FAILED = 448,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_ENABLE_USER_SUCCESS")]
    ACTIVE_DIRECTORY_ENABLE_USER_SUCCESS = 449,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_ENABLED_PASSWORD_EXPIRATION_FAILED")]
    ACTIVE_DIRECTORY_ENABLED_PASSWORD_EXPIRATION_FAILED = 450,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_ENABLED_PASSWORD_EXPIRATION_SUCCESS")]
    ACTIVE_DIRECTORY_ENABLED_PASSWORD_EXPIRATION_SUCCESS = 451,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_NOT_REQUIRE_PASSWORD_CHANGE_FAILED")]
    ACTIVE_DIRECTORY_NOT_REQUIRE_PASSWORD_CHANGE_FAILED = 452,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_NOT_REQUIRE_PASSWORD_CHANGE_SUCCESS")]
    ACTIVE_DIRECTORY_NOT_REQUIRE_PASSWORD_CHANGE_SUCCESS = 453,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_REMOVE_USER_FROM_GROUP_FAILED")]
    ACTIVE_DIRECTORY_REMOVE_USER_FROM_GROUP_FAILED = 454,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_REMOVE_USER_FROM_GROUP_SUCCESS")]
    ACTIVE_DIRECTORY_REMOVE_USER_FROM_GROUP_SUCCESS = 455,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_REQUIRE_PASSWORD_CHANGE_FAILED")]
    ACTIVE_DIRECTORY_REQUIRE_PASSWORD_CHANGE_FAILED = 456,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_REQUIRE_PASSWORD_CHANGE_SUCCESS")]
    ACTIVE_DIRECTORY_REQUIRE_PASSWORD_CHANGE_SUCCESS = 457,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_RESET_PASSWORD_FAILED")]
    ACTIVE_DIRECTORY_RESET_PASSWORD_FAILED = 458,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_RESET_PASSWORD_SUCCESS")]
    ACTIVE_DIRECTORY_RESET_PASSWORD_SUCCESS = 459,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_SET_ACCOUNT_EXPIRATION_FAILED")]
    ACTIVE_DIRECTORY_SET_ACCOUNT_EXPIRATION_FAILED = 460,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_SET_ACCOUNT_EXPIRATION_SUCCESS")]
    ACTIVE_DIRECTORY_SET_ACCOUNT_EXPIRATION_SUCCESS = 461,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_SET_PRIMARY_GROUP_FAILED")]
    ACTIVE_DIRECTORY_SET_PRIMARY_GROUP_FAILED = 462,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_SET_PRIMARY_GROUP_SUCCESS")]
    ACTIVE_DIRECTORY_SET_PRIMARY_GROUP_SUCCESS = 463,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_UNLOCK_USER_SUCCESS")]
    ACTIVE_DIRECTORY_UNLOCK_USER_SUCCESS = 464,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_UNLOCK_USER_FAILED")]
    ACTIVE_DIRECTORY_UNLOCK_USER_FAILED = 465,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_AUTO_DISCOVERY_JOB_RESULT_FAILED")]
    ACTIVE_DIRECTORY_AUTO_DISCOVERY_JOB_RESULT_FAILED = 466,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_AUTO_DISCOVERY_JOB_RESULT_SUCCESS")]
    ACTIVE_DIRECTORY_AUTO_DISCOVERY_JOB_RESULT_SUCCESS = 467,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_AUTO_DISCOVERY_DEPLOYMENT_RESULT")]
    ACTIVE_DIRECTORY_AUTO_DISCOVERY_DEPLOYMENT_RESULT = 468,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_AUTO_DISCOVERY_CHANGE_CANDIDATE_NODE_STATUS_FAILED")]
    ACTIVE_DIRECTORY_AUTO_DISCOVERY_CHANGE_CANDIDATE_NODE_STATUS_FAILED = 469,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_AUTO_DISCOVERY_CHANGE_CANDIDATE_NODE_STATUS_SUCCESS")]
    ACTIVE_DIRECTORY_AUTO_DISCOVERY_CHANGE_CANDIDATE_NODE_STATUS_SUCCESS = 470,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_AUTO_DISCOVERY_CLEAR_CANDIDATE_NODES_FAILED")]
    ACTIVE_DIRECTORY_AUTO_DISCOVERY_CLEAR_CANDIDATE_NODES_FAILED = 471,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_AUTO_DISCOVERY_CLEAR_CANDIDATE_NODES_SUCCESS")]
    ACTIVE_DIRECTORY_AUTO_DISCOVERY_CLEAR_CANDIDATE_NODES_SUCCESS = 472,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_AUTO_DISCOVERY_DISCOVERY_JOB_CREATED")]
    ACTIVE_DIRECTORY_AUTO_DISCOVERY_DISCOVERY_JOB_CREATED = 473,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_AUTO_DISCOVERY_DISCOVERY_JOB_UPDATED")]
    ACTIVE_DIRECTORY_AUTO_DISCOVERY_DISCOVERY_JOB_UPDATED = 474,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_DIRECTORY_AUTO_DISCOVERY_DISCOVERY_JOB_DELETED")]
    ACTIVE_DIRECTORY_AUTO_DISCOVERY_DISCOVERY_JOB_DELETED = 475,

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 476,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_CREATION_FAILED")]
    NINJA_TICKETING_CREATION_FAILED = 477,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_FORM_CREATED")]
    NINJA_TICKETING_FORM_CREATED = 478,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_FORM_UPDATED")]
    NINJA_TICKETING_FORM_UPDATED = 479,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_FORM_ACTIVED")]
    NINJA_TICKETING_FORM_ACTIVED = 480,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_FORM_DEACTIVED")]
    NINJA_TICKETING_FORM_DEACTIVED = 481,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_ATTRIBUTE_CREATED")]
    NINJA_TICKETING_ATTRIBUTE_CREATED = 482,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_ATTRIBUTE_UPDATED")]
    NINJA_TICKETING_ATTRIBUTE_UPDATED = 483,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_ATTRIBUTE_ACTIVED")]
    NINJA_TICKETING_ATTRIBUTE_ACTIVED = 484,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_ATTRIBUTE_DEACTIVATED")]
    NINJA_TICKETING_ATTRIBUTE_DEACTIVATED = 485,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_RULESET_CREATED")]
    NINJA_TICKETING_RULESET_CREATED = 486,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_RULESET_UPDATED")]
    NINJA_TICKETING_RULESET_UPDATED = 487,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_RULESET_DELETED")]
    NINJA_TICKETING_RULESET_DELETED = 488,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_EMAIL_ADDRESS_CONFIG_CREATED")]
    NINJA_TICKETING_EMAIL_ADDRESS_CONFIG_CREATED = 489,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_EMAIL_ADDRESS_CONFIG_UPDATED")]
    NINJA_TICKETING_EMAIL_ADDRESS_CONFIG_UPDATED = 490,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_EMAIL_ADDRESS_CONFIG_DELETED")]
    NINJA_TICKETING_EMAIL_ADDRESS_CONFIG_DELETED = 491,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_EMAIL_ADDRESS_CONFIG_MAKE_DEFAULT")]
    NINJA_TICKETING_EMAIL_ADDRESS_CONFIG_MAKE_DEFAULT = 492,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_TRIGGER_CREATED")]
    NINJA_TICKETING_TRIGGER_CREATED = 493,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_TRIGGER_UPDATED")]
    NINJA_TICKETING_TRIGGER_UPDATED = 494,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_TRIGGER_DELETED")]
    NINJA_TICKETING_TRIGGER_DELETED = 495,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_TICKET_CREATED")]
    NINJA_TICKETING_TICKET_CREATED = 496,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_TICKET_DELETED")]
    NINJA_TICKETING_TICKET_DELETED = 497,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_PENDING_EMAIL_CREATION_APPROVED")]
    NINJA_TICKETING_PENDING_EMAIL_CREATION_APPROVED = 498,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_PENDING_EMAIL_UPDATE_APPROVED")]
    NINJA_TICKETING_PENDING_EMAIL_UPDATE_APPROVED = 499,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_PENDING_EMAIL_REJECTED")]
    NINJA_TICKETING_PENDING_EMAIL_REJECTED = 500,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_ENABLED")]
    NINJA_TICKETING_ENABLED = 501,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_DISABLED")]
    NINJA_TICKETING_DISABLED = 502,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_UPDATED")]
    NINJA_TICKETING_UPDATED = 503,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_FORM_MAKE_DEFAULT")]
    NINJA_TICKETING_FORM_MAKE_DEFAULT = 504,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_CONDITION_RULE_MAKE_DEFAULT")]
    NINJA_TICKETING_CONDITION_RULE_MAKE_DEFAULT = 505,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_SCRIPT_RULE_MAKE_DEFAULT")]
    NINJA_TICKETING_SCRIPT_RULE_MAKE_DEFAULT = 506,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_PENDING_EMAIL_RECEIVED")]
    NINJA_TICKETING_PENDING_EMAIL_RECEIVED = 507,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_EMAIL_ALLOWLIST_ITEM_CREATED")]
    NINJA_TICKETING_EMAIL_ALLOWLIST_ITEM_CREATED = 508,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_EMAIL_ALLOWLIST_ITEM_UPDATED")]
    NINJA_TICKETING_EMAIL_ALLOWLIST_ITEM_UPDATED = 509,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_EMAIL_ALLOWLIST_ITEM_DELETED")]
    NINJA_TICKETING_EMAIL_ALLOWLIST_ITEM_DELETED = 510,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_EMAIL_BLOCKLIST_ITEM_CREATED")]
    NINJA_TICKETING_EMAIL_BLOCKLIST_ITEM_CREATED = 511,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_EMAIL_BLOCKLIST_ITEM_UPDATED")]
    NINJA_TICKETING_EMAIL_BLOCKLIST_ITEM_UPDATED = 512,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_EMAIL_BLOCKLIST_ITEM_DELETED")]
    NINJA_TICKETING_EMAIL_BLOCKLIST_ITEM_DELETED = 513,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_TICKET_REINSTATED")]
    NINJA_TICKETING_TICKET_REINSTATED = 514,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_STATUS_CREATED")]
    NINJA_TICKETING_STATUS_CREATED = 515,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_STATUS_UPDATED")]
    NINJA_TICKETING_STATUS_UPDATED = 516,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_STATUS_DELETED")]
    NINJA_TICKETING_STATUS_DELETED = 517,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_TICKETING_AGREEMENT_BULK_UPDATED")]
    NINJA_TICKETING_AGREEMENT_BULK_UPDATED = 518,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ATTRIBUTE_CREATED")]
    NODE_ATTRIBUTE_CREATED = 519,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ATTRIBUTE_UPDATED")]
    NODE_ATTRIBUTE_UPDATED = 520,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ATTRIBUTE_DELETED")]
    NODE_ATTRIBUTE_DELETED = 521,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ATTRIBUTE_VALUE_UPDATED")]
    NODE_ATTRIBUTE_VALUE_UPDATED = 522,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ATTRIBUTE_VALUE_DECRYPTED")]
    NODE_ATTRIBUTE_VALUE_DECRYPTED = 523,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT_TEMPLATE_CREATED")]
    DOCUMENT_TEMPLATE_CREATED = 524,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT_TEMPLATE_UPDATED")]
    DOCUMENT_TEMPLATE_UPDATED = 525,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT_TEMPLATE_DELETED")]
    DOCUMENT_TEMPLATE_DELETED = 526,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_CREATED")]
    CLIENT_DOCUMENT_CREATED = 527,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_UPDATED")]
    CLIENT_DOCUMENT_UPDATED = 528,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_DELETED")]
    CLIENT_DOCUMENT_DELETED = 529,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_ATTRIBUTE_VALUE_DECRYPTED")]
    CLIENT_DOCUMENT_ATTRIBUTE_VALUE_DECRYPTED = 530,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_REVISION_DELETED")]
    CLIENT_DOCUMENT_REVISION_DELETED = 531,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENTATION_DELEGATE_NODE_RESPONSIBILITY_ADDED")]
    CLIENT_DOCUMENTATION_DELEGATE_NODE_RESPONSIBILITY_ADDED = 532,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENTATION_DELEGATE_NODE_RESPONSIBILITY_REMOVED")]
    CLIENT_DOCUMENTATION_DELEGATE_NODE_RESPONSIBILITY_REMOVED = 533,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_LOCK_DEVICE_STATUS_CREATED")]
    MDM_LOCK_DEVICE_STATUS_CREATED = 534,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_REBOOT_DEVICE_STATUS_CREATED")]
    MDM_REBOOT_DEVICE_STATUS_CREATED = 535,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_RESET_PASSCODE_DEVICE_STATUS_CREATED")]
    MDM_RESET_PASSCODE_DEVICE_STATUS_CREATED = 536,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_RELINQUISH_OWNERSHIP_DEVICE_STATUS_CREATED")]
    MDM_RELINQUISH_OWNERSHIP_DEVICE_STATUS_CREATED = 537,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_LOCK_DEVICE_STATUS_UPDATED")]
    MDM_LOCK_DEVICE_STATUS_UPDATED = 538,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_REBOOT_DEVICE_STATUS_UPDATED")]
    MDM_REBOOT_DEVICE_STATUS_UPDATED = 539,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_RESET_PASSCODE_DEVICE_STATUS_UPDATED")]
    MDM_RESET_PASSCODE_DEVICE_STATUS_UPDATED = 540,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_RELINQUISH_OWNERSHIP_DEVICE_STATUS_UPDATED")]
    MDM_RELINQUISH_OWNERSHIP_DEVICE_STATUS_UPDATED = 541,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_CLEAR_PASSCODE_STATUS_CREATED")]
    MDM_CLEAR_PASSCODE_STATUS_CREATED = 542,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_CLEAR_PASSCODE_STATUS_UPDATED")]
    MDM_CLEAR_PASSCODE_STATUS_UPDATED = 543,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_ERASE_STATUS_CREATED")]
    MDM_ERASE_STATUS_CREATED = 544,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_ERASE_STATUS_UPDATED")]
    MDM_ERASE_STATUS_UPDATED = 545,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_UPDATE_POLICY_STATUS_CREATED")]
    MDM_UPDATE_POLICY_STATUS_CREATED = 546,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_UPDATE_POLICY_STATUS_UPDATED")]
    MDM_UPDATE_POLICY_STATUS_UPDATED = 547,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_ASSIGN_POLICY_STATUS_CREATED")]
    MDM_ASSIGN_POLICY_STATUS_CREATED = 548,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_ASSIGN_POLICY_STATUS_UPDATED")]
    MDM_ASSIGN_POLICY_STATUS_UPDATED = 549,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_DIVISION_CONFIG_ENABLED")]
    MDM_DIVISION_CONFIG_ENABLED = 550,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_DIVISION_CONFIG_DISABLED")]
    MDM_DIVISION_CONFIG_DISABLED = 551,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_DIVISION_CONFIG_UPDATED")]
    MDM_DIVISION_CONFIG_UPDATED = 552,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_APN_CERTIFICATE_UPLOADED")]
    MDM_APN_CERTIFICATE_UPLOADED = 553,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_ACTION_DEVICE_STATUS_FAILED")]
    MDM_ACTION_DEVICE_STATUS_FAILED = 554,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_DISOWN_STATUS_FORBIDDEN")]
    MDM_DISOWN_STATUS_FORBIDDEN = 555,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_DISOWN_STATUS_COMPLETED")]
    MDM_DISOWN_STATUS_COMPLETED = 556,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_ADE_TOKEN_UPLOADED")]
    MDM_ADE_TOKEN_UPLOADED = 557,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_ADE_TOKEN_RENEWED")]
    MDM_ADE_TOKEN_RENEWED = 558,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_RENEW_ENROLLMENT_PROFILE_STATUS_CREATED")]
    MDM_RENEW_ENROLLMENT_PROFILE_STATUS_CREATED = 559,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_RENEW_ENROLLMENT_PROFILE_STATUS_UPDATED")]
    MDM_RENEW_ENROLLMENT_PROFILE_STATUS_UPDATED = 560,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_INSTALL_APP_STATUS_CREATED")]
    MDM_INSTALL_APP_STATUS_CREATED = 561,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM_APN_CERTIFICATE_RENEWED")]
    MDM_APN_CERTIFICATE_RENEWED = 562,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_PRODUCT_CREATED")]
    NINJA_PSA_PRODUCT_CREATED = 563,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_PRODUCT_UPDATED")]
    NINJA_PSA_PRODUCT_UPDATED = 564,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_PRODUCT_ACTIVATED")]
    NINJA_PSA_PRODUCT_ACTIVATED = 565,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_PRODUCT_DEACTIVATED")]
    NINJA_PSA_PRODUCT_DEACTIVATED = 566,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_TEMPLATE_CREATED")]
    NINJA_PSA_AGREEMENT_TEMPLATE_CREATED = 567,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_TEMPLATE_UPDATED")]
    NINJA_PSA_AGREEMENT_TEMPLATE_UPDATED = 568,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_TEMPLATE_ACTIVATED")]
    NINJA_PSA_AGREEMENT_TEMPLATE_ACTIVATED = 569,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_TEMPLATE_DEACTIVATED")]
    NINJA_PSA_AGREEMENT_TEMPLATE_DEACTIVATED = 570,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_CREATED")]
    NINJA_PSA_AGREEMENT_CREATED = 571,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_UPDATED")]
    NINJA_PSA_AGREEMENT_UPDATED = 572,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_ACTIVATED")]
    NINJA_PSA_AGREEMENT_ACTIVATED = 573,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_DEACTIVATED")]
    NINJA_PSA_AGREEMENT_DEACTIVATED = 574,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_INVOICE_CREATED")]
    NINJA_PSA_INVOICE_CREATED = 575,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_INVOICE_CREATED_BY_TRIGGER")]
    NINJA_PSA_INVOICE_CREATED_BY_TRIGGER = 576,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_ENABLED")]
    NINJA_PSA_ENABLED = 577,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_DISABLED")]
    NINJA_PSA_DISABLED = 578,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_INTEGRATION_CREATED")]
    NINJA_PSA_INTEGRATION_CREATED = 579,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_INTEGRATION_DEACTIVATED")]
    NINJA_PSA_INTEGRATION_DEACTIVATED = 580,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_INVOICE_EXPORTED_TO_QB")]
    NINJA_PSA_INVOICE_EXPORTED_TO_QB = 581,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_INVOICE_ERROR_EXPORTING_TO_QB")]
    NINJA_PSA_INVOICE_ERROR_EXPORTING_TO_QB = 582,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_PRODUCT_MAPPING_CREATED")]
    NINJA_PSA_PRODUCT_MAPPING_CREATED = 583,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_PRODUCT_MAPPING_UPDATED")]
    NINJA_PSA_PRODUCT_MAPPING_UPDATED = 584,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_PRODUCT_MAPPING_DELETED")]
    NINJA_PSA_PRODUCT_MAPPING_DELETED = 585,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_PRODUCT_TYPE_MAPPING_CREATED")]
    NINJA_PSA_PRODUCT_TYPE_MAPPING_CREATED = 586,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_PRODUCT_TYPE_MAPPING_UPDATED")]
    NINJA_PSA_PRODUCT_TYPE_MAPPING_UPDATED = 587,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_PRODUCT_TYPE_MAPPING_DELETED")]
    NINJA_PSA_PRODUCT_TYPE_MAPPING_DELETED = 588,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_INTEGRATION_UPDATED")]
    NINJA_PSA_INTEGRATION_UPDATED = 589,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_TAX_RATE_CREATED")]
    NINJA_PSA_TAX_RATE_CREATED = 590,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_TAX_RATE_UPDATED")]
    NINJA_PSA_TAX_RATE_UPDATED = 591,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_TAX_RATE_DELETED")]
    NINJA_PSA_TAX_RATE_DELETED = 592,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_TAX_RATE_MAPPING_CREATED")]
    NINJA_PSA_TAX_RATE_MAPPING_CREATED = 593,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_TAX_RATE_MAPPING_UPDATED")]
    NINJA_PSA_TAX_RATE_MAPPING_UPDATED = 594,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_TAX_RATE_MAPPING_DELETED")]
    NINJA_PSA_TAX_RATE_MAPPING_DELETED = 595,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_CLIENT_MAPPING_CREATED")]
    NINJA_PSA_CLIENT_MAPPING_CREATED = 596,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_CLIENT_MAPPING_UPDATED")]
    NINJA_PSA_CLIENT_MAPPING_UPDATED = 597,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_CLIENT_MAPPING_DELETED")]
    NINJA_PSA_CLIENT_MAPPING_DELETED = 598,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_INVOICE_APPROVED")]
    NINJA_PSA_INVOICE_APPROVED = 599,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_INVOICE_UPDATED")]
    NINJA_PSA_INVOICE_UPDATED = 600,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_SET_TIME_ENTRY_DEFAULT")]
    NINJA_PSA_AGREEMENT_SET_TIME_ENTRY_DEFAULT = 601,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_SET_TIME_ENTRY_DEFAULT_TO_NONE")]
    NINJA_PSA_AGREEMENT_SET_TIME_ENTRY_DEFAULT_TO_NONE = 602,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_TICKET_TIME_ENTRIES_PRICES_RECALCULATED")]
    NINJA_PSA_TICKET_TIME_ENTRIES_PRICES_RECALCULATED = 603,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_TICKET_TIME_ENTRIES_UPDATED")]
    NINJA_PSA_TICKET_TIME_ENTRIES_UPDATED = 604,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_INVOICE_STATUS_RESET")]
    NINJA_PSA_INVOICE_STATUS_RESET = 605,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_PSA_AGREEMENT_TEMPLATES_DELETED")]
    NINJA_PSA_AGREEMENT_TEMPLATES_DELETED = 606,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_DOCUMENT_CREATED")]
    KNOWLEDGE_BASE_DOCUMENT_CREATED = 607,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_DOCUMENT_UPDATED")]
    KNOWLEDGE_BASE_DOCUMENT_UPDATED = 608,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_DOCUMENT_DELETED")]
    KNOWLEDGE_BASE_DOCUMENT_DELETED = 609,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_FOLDER_CREATED")]
    KNOWLEDGE_BASE_FOLDER_CREATED = 610,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_FOLDER_UPDATED")]
    KNOWLEDGE_BASE_FOLDER_UPDATED = 611,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_FOLDER_DELETED")]
    KNOWLEDGE_BASE_FOLDER_DELETED = 612,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_PUBLIC_TEMPORARY_TOKEN_CREATED")]
    KNOWLEDGE_BASE_PUBLIC_TEMPORARY_TOKEN_CREATED = 613,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_PUBLIC_LINK_CREATED")]
    KNOWLEDGE_BASE_PUBLIC_LINK_CREATED = 614,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_PUBLIC_LINK_UPDATED")]
    KNOWLEDGE_BASE_PUBLIC_LINK_UPDATED = 615,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_PUBLIC_LINK_DELETED")]
    KNOWLEDGE_BASE_PUBLIC_LINK_DELETED = 616,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_FOLDER_MOVED")]
    KNOWLEDGE_BASE_FOLDER_MOVED = 617,

    [System.Runtime.Serialization.EnumMember(Value = @"KNOWLEDGE_BASE_DOCUMENT_MOVED")]
    KNOWLEDGE_BASE_DOCUMENT_MOVED = 618,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_CHECKLIST_CREATED")]
    CLIENT_CHECKLIST_CREATED = 619,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_CHECKLIST_UPDATED")]
    CLIENT_CHECKLIST_UPDATED = 620,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_CHECKLIST_DELETED")]
    CLIENT_CHECKLIST_DELETED = 621,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_CHECKLIST_PROMOTED")]
    CLIENT_CHECKLIST_PROMOTED = 622,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST_TEMPLATE_CREATED")]
    CHECKLIST_TEMPLATE_CREATED = 623,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST_TEMPLATE_UPDATED")]
    CHECKLIST_TEMPLATE_UPDATED = 624,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKLIST_TEMPLATE_DELETED")]
    CHECKLIST_TEMPLATE_DELETED = 625,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_TEMPLATE_CREATED")]
    REPORT_TEMPLATE_CREATED = 626,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_TEMPLATE_UPDATED")]
    REPORT_TEMPLATE_UPDATED = 627,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_TEMPLATE_DELETED")]
    REPORT_TEMPLATE_DELETED = 628,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_SCHEDULE_CREATED")]
    REPORT_SCHEDULE_CREATED = 629,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_SCHEDULE_UPDATED")]
    REPORT_SCHEDULE_UPDATED = 630,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_SCHEDULE_DELETED")]
    REPORT_SCHEDULE_DELETED = 631,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_TEMPLATE_DUPLICATED")]
    REPORT_TEMPLATE_DUPLICATED = 632,

    [System.Runtime.Serialization.EnumMember(Value = @"REPORT_SCHEDULE_DUPLICATED")]
    REPORT_SCHEDULE_DUPLICATED = 633,

    [System.Runtime.Serialization.EnumMember(Value = @"RELATED_ITEM_CREATED")]
    RELATED_ITEM_CREATED = 634,

    [System.Runtime.Serialization.EnumMember(Value = @"RELATED_ITEM_UPDATED")]
    RELATED_ITEM_UPDATED = 635,

    [System.Runtime.Serialization.EnumMember(Value = @"RELATED_ITEM_DELETED")]
    RELATED_ITEM_DELETED = 636,

    [System.Runtime.Serialization.EnumMember(Value = @"RELATED_ITEM_SECURE_VALUE_DECRYPTED")]
    RELATED_ITEM_SECURE_VALUE_DECRYPTED = 637,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_ENABLED")]
    GRAVITYZONE_ENABLED = 638,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_DISABLED")]
    GRAVITYZONE_DISABLED = 639,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_SCAN_STARTED")]
    GRAVITYZONE_SCAN_STARTED = 640,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_SCAN_COMPLETED")]
    GRAVITYZONE_SCAN_COMPLETED = 641,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_SCAN_FAILED")]
    GRAVITYZONE_SCAN_FAILED = 642,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_DELETE_FROM_QUARANTINE")]
    GRAVITYZONE_THREAT_DELETE_FROM_QUARANTINE = 643,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_RESTORE_FROM_QUARANTINE")]
    GRAVITYZONE_THREAT_RESTORE_FROM_QUARANTINE = 644,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_DELETE_FROM_QUARANTINE_FAILED")]
    GRAVITYZONE_THREAT_DELETE_FROM_QUARANTINE_FAILED = 645,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_RESTORE_FROM_QUARANTINE_FAILED")]
    GRAVITYZONE_THREAT_RESTORE_FROM_QUARANTINE_FAILED = 646,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_INSTALLATION_SUCCEEDED")]
    GRAVITYZONE_INSTALLATION_SUCCEEDED = 647,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_INSTALLATION_FAILED")]
    GRAVITYZONE_INSTALLATION_FAILED = 648,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_IGNORED")]
    GRAVITYZONE_THREAT_IGNORED = 649,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_PRESENT")]
    GRAVITYZONE_THREAT_PRESENT = 650,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_DELETED")]
    GRAVITYZONE_THREAT_DELETED = 651,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_BLOCKED")]
    GRAVITYZONE_THREAT_BLOCKED = 652,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_QUARANTINED")]
    GRAVITYZONE_THREAT_QUARANTINED = 653,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_CLEANED")]
    GRAVITYZONE_THREAT_CLEANED = 654,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_PURGE_QUARANTINE_FAILED")]
    GRAVITYZONE_PURGE_QUARANTINE_FAILED = 655,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_PURGE_QUARANTINE_SUCCESS")]
    GRAVITYZONE_PURGE_QUARANTINE_SUCCESS = 656,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_RESTORE_AND_EXCLUDED_FROM_QUARANTINE")]
    GRAVITYZONE_THREAT_RESTORE_AND_EXCLUDED_FROM_QUARANTINE = 657,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_RESTORE_AND_EXCLUDED_FROM_QUARANTINE_FAILED")]
    GRAVITYZONE_THREAT_RESTORE_AND_EXCLUDED_FROM_QUARANTINE_FAILED = 658,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_DELETE_FROM_QUARANTINE_COMPLETED")]
    GRAVITYZONE_THREAT_DELETE_FROM_QUARANTINE_COMPLETED = 659,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_RESTORE_FROM_QUARANTINE_COMPLETED")]
    GRAVITYZONE_THREAT_RESTORE_FROM_QUARANTINE_COMPLETED = 660,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_PROVISION_COMPLETED")]
    GRAVITYZONE_PROVISION_COMPLETED = 661,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_PROVISION_FAILED")]
    GRAVITYZONE_PROVISION_FAILED = 662,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_RETRY_INSTALL_COMPLETED")]
    GRAVITYZONE_RETRY_INSTALL_COMPLETED = 663,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_PARTNER_ASSIST_DISABLED")]
    GRAVITYZONE_PARTNER_ASSIST_DISABLED = 664,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_SCAN_ATTEMPT_COMPLETED")]
    GRAVITYZONE_SCAN_ATTEMPT_COMPLETED = 665,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_RESET_INACCESSIBLE_LICENSE_COMPLETED")]
    GRAVITYZONE_RESET_INACCESSIBLE_LICENSE_COMPLETED = 666,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_DELETE_FROM_QUARANTINE_REQUESTED")]
    GRAVITYZONE_THREAT_DELETE_FROM_QUARANTINE_REQUESTED = 667,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_RESTORE_FROM_QUARANTINE_REQUESTED")]
    GRAVITYZONE_THREAT_RESTORE_FROM_QUARANTINE_REQUESTED = 668,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_RESTORE_AND_EXCLUDED_FROM_QUARANTINE_REQUESTED")]
    GRAVITYZONE_THREAT_RESTORE_AND_EXCLUDED_FROM_QUARANTINE_REQUESTED = 669,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_INSTALLATION_STARTED")]
    GRAVITYZONE_INSTALLATION_STARTED = 670,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_DOWNLOAD_FAILED")]
    GRAVITYZONE_DOWNLOAD_FAILED = 671,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_INSTALLATION_RETRY_STARTED")]
    GRAVITYZONE_INSTALLATION_RETRY_STARTED = 672,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_SCAN_CANCELLED")]
    GRAVITYZONE_SCAN_CANCELLED = 673,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_DISABLING_FAILED")]
    GRAVITYZONE_DISABLING_FAILED = 674,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_INSTALLATION_EXISTS_DETECTED")]
    GRAVITYZONE_INSTALLATION_EXISTS_DETECTED = 675,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_BLOCKED_FROM_ACTIVE_REQUESTED")]
    GRAVITYZONE_THREAT_BLOCKED_FROM_ACTIVE_REQUESTED = 676,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_BLOCKED_FROM_ACTIVE_COMPLETED")]
    GRAVITYZONE_THREAT_BLOCKED_FROM_ACTIVE_COMPLETED = 677,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_THREAT_BLOCKED_FROM_ACTIVE_FAILED")]
    GRAVITYZONE_THREAT_BLOCKED_FROM_ACTIVE_FAILED = 678,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_DEVICE_MANAGED")]
    GRAVITYZONE_DEVICE_MANAGED = 679,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_DEVICE_UNMANAGED")]
    GRAVITYZONE_DEVICE_UNMANAGED = 680,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_COMPANY_CANNOT_BE_ACCESSED")]
    GRAVITYZONE_COMPANY_CANNOT_BE_ACCESSED = 681,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT_FILE_SUSPICIOUS")]
    ATTACHMENT_FILE_SUSPICIOUS = 682,

    [System.Runtime.Serialization.EnumMember(Value = @"SMTP_SEND_ERROR")]
    SMTP_SEND_ERROR = 683,

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN_ROLE_CREATED")]
    TECHNICIAN_ROLE_CREATED = 684,

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN_ROLE_UPDATED")]
    TECHNICIAN_ROLE_UPDATED = 685,

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN_ROLE_DELETED")]
    TECHNICIAN_ROLE_DELETED = 686,

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN_ROLE_ASSIGNMENT_CHANGED")]
    TECHNICIAN_ROLE_ASSIGNMENT_CHANGED = 687,

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN_PERMISSIONS_CHANGED")]
    TECHNICIAN_PERMISSIONS_CHANGED = 688,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_ROLE_CREATED")]
    END_USER_ROLE_CREATED = 689,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_ROLE_UPDATED")]
    END_USER_ROLE_UPDATED = 690,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_ROLE_DELETED")]
    END_USER_ROLE_DELETED = 691,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_ROLE_ASSIGNMENT_CHANGED")]
    END_USER_ROLE_ASSIGNMENT_CHANGED = 692,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER_PERMISSIONS_CHANGED")]
    END_USER_PERMISSIONS_CHANGED = 693,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_AGENT_ENABLED")]
    SENTINEL_ONE_AGENT_ENABLED = 694,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_AGENT_DISABLED")]
    SENTINEL_ONE_AGENT_DISABLED = 695,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_AGENT_STARTED")]
    SENTINEL_ONE_AGENT_STARTED = 696,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_AGENT_UPGRADED")]
    SENTINEL_ONE_AGENT_UPGRADED = 697,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_AGENT_SHUT_DOWN")]
    SENTINEL_ONE_AGENT_SHUT_DOWN = 698,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_AGENT_INSTALLATION_SUCCEEDED")]
    SENTINEL_ONE_AGENT_INSTALLATION_SUCCEEDED = 699,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_AGENT_INSTALLATION_FAILED")]
    SENTINEL_ONE_AGENT_INSTALLATION_FAILED = 700,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_POLICY_CHANGED")]
    SENTINEL_ONE_POLICY_CHANGED = 701,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_LOCAL_CONFIG_CHANGE_FAILED")]
    SENTINEL_ONE_LOCAL_CONFIG_CHANGE_FAILED = 702,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_REGISTRATION_SUCCEEDED")]
    SENTINEL_ONE_REGISTRATION_SUCCEEDED = 703,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_REGISTRATION_FAILED")]
    SENTINEL_ONE_REGISTRATION_FAILED = 704,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_REMEDIATION_SUCCEEDED")]
    SENTINEL_ONE_REMEDIATION_SUCCEEDED = 705,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_REMEDIATION_FAILED")]
    SENTINEL_ONE_REMEDIATION_FAILED = 706,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_MITIGATION_SUCCEEDED")]
    SENTINEL_ONE_MITIGATION_SUCCEEDED = 707,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_MITIGATION_FAILED")]
    SENTINEL_ONE_MITIGATION_FAILED = 708,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_MITIGATION_REQUIRE_REBOOT")]
    SENTINEL_ONE_MITIGATION_REQUIRE_REBOOT = 709,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_MITIGATION_CANNOT_KILL")]
    SENTINEL_ONE_MITIGATION_CANNOT_KILL = 710,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_MITIGATION_FAILED_TO_KILL")]
    SENTINEL_ONE_MITIGATION_FAILED_TO_KILL = 711,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_QUARANTINE_SUCCEEDED")]
    SENTINEL_ONE_QUARANTINE_SUCCEEDED = 712,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_QUARANTINE_FAILED")]
    SENTINEL_ONE_QUARANTINE_FAILED = 713,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_UNQUARANTINE_SUCCEEDED")]
    SENTINEL_ONE_UNQUARANTINE_SUCCEEDED = 714,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_UNQUARANTINE_FAILED")]
    SENTINEL_ONE_UNQUARANTINE_FAILED = 715,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_THREAT_DETECTED")]
    SENTINEL_ONE_THREAT_DETECTED = 716,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_SCAN_STARTED")]
    SENTINEL_ONE_SCAN_STARTED = 717,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_SCAN_COMPLETED")]
    SENTINEL_ONE_SCAN_COMPLETED = 718,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_SCAN_FAILED")]
    SENTINEL_ONE_SCAN_FAILED = 719,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_SCAN_ABORTED")]
    SENTINEL_ONE_SCAN_ABORTED = 720,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_COMMAND_RECEIVED")]
    SENTINEL_ONE_COMMAND_RECEIVED = 721,

    [System.Runtime.Serialization.EnumMember(Value = @"SENTINEL_ONE_COMMAND_FAILED")]
    SENTINEL_ONE_COMMAND_FAILED = 722,

    [System.Runtime.Serialization.EnumMember(Value = @"OAUTH2_CREATED")]
    OAUTH2_CREATED = 723,

    [System.Runtime.Serialization.EnumMember(Value = @"OAUTH2_UPDATED")]
    OAUTH2_UPDATED = 724,

    [System.Runtime.Serialization.EnumMember(Value = @"OAUTH2_DELETED")]
    OAUTH2_DELETED = 725,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_SENSOR_ENABLED")]
    CROWDSTRIKE_SENSOR_ENABLED = 726,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_SENSOR_DISABLED")]
    CROWDSTRIKE_SENSOR_DISABLED = 727,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_SENSOR_STARTED")]
    CROWDSTRIKE_SENSOR_STARTED = 728,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_SENSOR_UPGRADED")]
    CROWDSTRIKE_SENSOR_UPGRADED = 729,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_SENSOR_SHUT_DOWN")]
    CROWDSTRIKE_SENSOR_SHUT_DOWN = 730,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_SENSOR_INSTALLATION_SUCCEEDED")]
    CROWDSTRIKE_SENSOR_INSTALLATION_SUCCEEDED = 731,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_SENSOR_INSTALLATION_FAILED")]
    CROWDSTRIKE_SENSOR_INSTALLATION_FAILED = 732,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_REGISTRATION_SUCCEEDED")]
    CROWDSTRIKE_REGISTRATION_SUCCEEDED = 733,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_REGISTRATION_FAILED")]
    CROWDSTRIKE_REGISTRATION_FAILED = 734,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_REMEDIATION_SUCCEEDED")]
    CROWDSTRIKE_REMEDIATION_SUCCEEDED = 735,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_REMEDIATION_FAILED")]
    CROWDSTRIKE_REMEDIATION_FAILED = 736,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_MITIGATION_SUCCEEDED")]
    CROWDSTRIKE_MITIGATION_SUCCEEDED = 737,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_MITIGATION_FAILED")]
    CROWDSTRIKE_MITIGATION_FAILED = 738,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_QUARANTINE_SUCCEEDED")]
    CROWDSTRIKE_QUARANTINE_SUCCEEDED = 739,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_QUARANTINE_FAILED")]
    CROWDSTRIKE_QUARANTINE_FAILED = 740,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_THREAT_DETECTED")]
    CROWDSTRIKE_THREAT_DETECTED = 741,

    [System.Runtime.Serialization.EnumMember(Value = @"CROWDSTRIKE_MISSING_PERMISSIONS")]
    CROWDSTRIKE_MISSING_PERMISSIONS = 742,

    [System.Runtime.Serialization.EnumMember(Value = @"INTEGRATION_INVALID_CREDENTIALS")]
    INTEGRATION_INVALID_CREDENTIALS = 743,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_UPDATED")]
    SERVICE_NOW_UPDATED = 744,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_CONFIGURATION_ITEM_CLASS_MAPPING_CREATED")]
    SERVICE_NOW_CONFIGURATION_ITEM_CLASS_MAPPING_CREATED = 745,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_CONFIGURATION_ITEM_CLASS_MAPPING_UPDATED")]
    SERVICE_NOW_CONFIGURATION_ITEM_CLASS_MAPPING_UPDATED = 746,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_CONFIGURATION_ITEM_CLASS_MAPPING_DELETED")]
    SERVICE_NOW_CONFIGURATION_ITEM_CLASS_MAPPING_DELETED = 747,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_RESET_AUTHENTICATION")]
    SERVICE_NOW_RESET_AUTHENTICATION = 748,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_NODE_SYNC_NODE_CREATED")]
    SERVICE_NOW_NODE_SYNC_NODE_CREATED = 749,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_NODE_SYNC_NODE_UPDATED")]
    SERVICE_NOW_NODE_SYNC_NODE_UPDATED = 750,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_NODE_SYNC_NODE_ERROR")]
    SERVICE_NOW_NODE_SYNC_NODE_ERROR = 751,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_NODE_SYNC_BY_CLIENT_STARTED")]
    SERVICE_NOW_NODE_SYNC_BY_CLIENT_STARTED = 752,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_NODE_SYNC_BY_CLIENT_COMPLETED")]
    SERVICE_NOW_NODE_SYNC_BY_CLIENT_COMPLETED = 753,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_CLIENT_MAPPING_CREATED")]
    SERVICE_NOW_CLIENT_MAPPING_CREATED = 754,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_CLIENT_MAPPING_UPDATED")]
    SERVICE_NOW_CLIENT_MAPPING_UPDATED = 755,

    [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_NOW_CLIENT_MAPPING_DELETED")]
    SERVICE_NOW_CLIENT_MAPPING_DELETED = 756,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum ActivityResult
  {

    [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
    SUCCESS = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FAILURE")]
    FAILURE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"UNSUPPORTED")]
    UNSUPPORTED = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"UNCOMPLETED")]
    UNCOMPLETED = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AlertSourceType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"AGENT_OFFLINE")]
    AGENT_OFFLINE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_CPU")]
    CONDITION_AGENT_CPU = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_MEMORY")]
    CONDITION_AGENT_MEMORY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_NETWORK")]
    CONDITION_AGENT_NETWORK = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_DISK_IO")]
    CONDITION_AGENT_DISK_IO = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_DISK_FREE_SPACE")]
    CONDITION_AGENT_DISK_FREE_SPACE = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_DISK_USAGE")]
    CONDITION_AGENT_DISK_USAGE = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_CVSS_SCORE")]
    CONDITION_AGENT_CVSS_SCORE = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_PATCH_LAST_INSTALLED")]
    CONDITION_AGENT_PATCH_LAST_INSTALLED = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_CPU")]
    CONDITION_NMS_CPU = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_MEMORY")]
    CONDITION_NMS_MEMORY = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_NETWORK_TRAFFIC_BITS")]
    CONDITION_NMS_NETWORK_TRAFFIC_BITS = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_NETWORK_TRAFFIC_PERCENT")]
    CONDITION_NMS_NETWORK_TRAFFIC_PERCENT = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_NETWORK_STATUS")]
    CONDITION_NMS_NETWORK_STATUS = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_NETWORK_STATUS_CHANGE")]
    CONDITION_NMS_NETWORK_STATUS_CHANGE = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PING")]
    CONDITION_PING = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PING_LATENCY")]
    CONDITION_PING_LATENCY = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PING_PACKET_LOSS")]
    CONDITION_PING_PACKET_LOSS = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PING_RESPONSE")]
    CONDITION_PING_RESPONSE = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SYSTEM_UPTIME")]
    CONDITION_SYSTEM_UPTIME = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SMART_STATUS_DEGRATED")]
    CONDITION_SMART_STATUS_DEGRATED = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_RAID_HEALTH_STATUS")]
    CONDITION_RAID_HEALTH_STATUS = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SCRIPT_RESULT")]
    CONDITION_SCRIPT_RESULT = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_HTTP")]
    CONDITION_HTTP = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_HTTP_RESPONSE")]
    CONDITION_HTTP_RESPONSE = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PORT")]
    CONDITION_PORT = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PORT_SCAN")]
    CONDITION_PORT_SCAN = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SYSLOG")]
    CONDITION_SYSLOG = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_CONFIGURATION_FILE")]
    CONDITION_CONFIGURATION_FILE = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SNMPTRAP")]
    CONDITION_SNMPTRAP = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_CRITICAL_EVENT")]
    CONDITION_CRITICAL_EVENT = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_DNS")]
    CONDITION_DNS = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_EMAIL")]
    CONDITION_EMAIL = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_CUSTOM_SNMP")]
    CONDITION_CUSTOM_SNMP = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_BACKUPJOB_CREATE")]
    SHADOWPROTECT_BACKUPJOB_CREATE = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_BACKUPJOB_UPDATE")]
    SHADOWPROTECT_BACKUPJOB_UPDATE = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_BACKUPJOB_DELETE")]
    SHADOWPROTECT_BACKUPJOB_DELETE = 36,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_BACKUPJOB_EXECUTE")]
    SHADOWPROTECT_BACKUPJOB_EXECUTE = 37,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_MANAGEDFOLDER_CREATE")]
    IMAGEMANAGER_MANAGEDFOLDER_CREATE = 38,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_MANAGEDFOLDER_UPDATE")]
    IMAGEMANAGER_MANAGEDFOLDER_UPDATE = 39,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_MANAGEDFOLDER_DELETE")]
    IMAGEMANAGER_MANAGEDFOLDER_DELETE = 40,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_MANAGEDFOLDER_EXECUTE")]
    IMAGEMANAGER_MANAGEDFOLDER_EXECUTE = 41,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_CONNECTION")]
    TEAMVIEWER_CONNECTION = 42,

    [System.Runtime.Serialization.EnumMember(Value = @"RETRIEVE_AGENT_LOGS")]
    RETRIEVE_AGENT_LOGS = 43,

    [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED_TASK")]
    SCHEDULED_TASK = 44,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_WINDOWS_EVENT_LOG_TRIGGERED")]
    CONDITION_WINDOWS_EVENT_LOG_TRIGGERED = 45,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_WINDOWS_SERVICE_STATE_CHANGED")]
    CONDITION_WINDOWS_SERVICE_STATE_CHANGED = 46,

    [System.Runtime.Serialization.EnumMember(Value = @"UI_MESSAGE_ACTION_REBOOT")]
    UI_MESSAGE_ACTION_REBOOT = 47,

    [System.Runtime.Serialization.EnumMember(Value = @"UI_MESSAGE_BD_INSTALLATION_ISSUES")]
    UI_MESSAGE_BD_INSTALLATION_ISSUES = 48,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_UI_MESSAGE_INSTALLATION_ISSUES")]
    GRAVITYZONE_UI_MESSAGE_INSTALLATION_ISSUES = 49,

    [System.Runtime.Serialization.EnumMember(Value = @"AV_QUARANTINE_THREAT")]
    AV_QUARANTINE_THREAT = 50,

    [System.Runtime.Serialization.EnumMember(Value = @"AV_RESTORE_THREAT")]
    AV_RESTORE_THREAT = 51,

    [System.Runtime.Serialization.EnumMember(Value = @"AV_DELETE_THREAT")]
    AV_DELETE_THREAT = 52,

    [System.Runtime.Serialization.EnumMember(Value = @"AV_REMOVE_THREAT")]
    AV_REMOVE_THREAT = 53,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_RESTORE_THREAT")]
    BITDEFENDER_RESTORE_THREAT = 54,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_DELETE_THREAT")]
    BITDEFENDER_DELETE_THREAT = 55,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_BITLOCKER_STATUS")]
    CONDITION_BITLOCKER_STATUS = 56,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_FILEVAULT_STATUS")]
    CONDITION_FILEVAULT_STATUS = 57,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_PROCESS")]
    CONDITION_LINUX_PROCESS = 58,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_Daemon")]
    CONDITION_LINUX_Daemon = 59,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_PROCESS_RESOURCE")]
    CONDITION_LINUX_PROCESS_RESOURCE = 60,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_PROCESS_RESOURCE_CPU")]
    CONDITION_LINUX_PROCESS_RESOURCE_CPU = 61,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_PROCESS_RESOURCE_MEMORY")]
    CONDITION_LINUX_PROCESS_RESOURCE_MEMORY = 62,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_DISK_FREE_SPACE")]
    CONDITION_LINUX_DISK_FREE_SPACE = 63,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_DISK_USAGE")]
    CONDITION_LINUX_DISK_USAGE = 64,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_AGGREGATE_CPU_USAGE")]
    CONDITION_VM_AGGREGATE_CPU_USAGE = 65,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_DISK_USAGE")]
    CONDITION_VM_DISK_USAGE = 66,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_HOST_DATASTORE")]
    CONDITION_VM_HOST_DATASTORE = 67,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_HOST_UPTIME")]
    CONDITION_VM_HOST_UPTIME = 68,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_HOST_DEVICE_DOWN")]
    CONDITION_VM_HOST_DEVICE_DOWN = 69,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_HOST_BAD_SENSORS")]
    CONDITION_VM_HOST_BAD_SENSORS = 70,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_HOST_SENSOR_HEALTH")]
    CONDITION_VM_HOST_SENSOR_HEALTH = 71,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_GUEST_GUEST_OPERATIONAL_MODE")]
    CONDITION_VM_GUEST_GUEST_OPERATIONAL_MODE = 72,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_GUEST_SNAPSHOT_SIZE")]
    CONDITION_VM_GUEST_SNAPSHOT_SIZE = 73,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_GUEST_SNAPSHOT_LIFESPAN")]
    CONDITION_VM_GUEST_SNAPSHOT_LIFESPAN = 74,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_GUEST_TOOLS_NOT_RUNNING")]
    CONDITION_VM_GUEST_TOOLS_NOT_RUNNING = 75,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_HV_GUEST_CHECKPOINT_SIZE")]
    CONDITION_HV_GUEST_CHECKPOINT_SIZE = 76,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_HV_GUEST_CHECKPOINT_LIFESPAN")]
    CONDITION_HV_GUEST_CHECKPOINT_LIFESPAN = 77,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SOFTWARE")]
    CONDITION_SOFTWARE = 78,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_WINDOWS_PROCESS_STATE")]
    CONDITION_WINDOWS_PROCESS_STATE = 79,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_WINDOWS_PROCESS_RESOURCE_CPU")]
    CONDITION_WINDOWS_PROCESS_RESOURCE_CPU = 80,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_WINDOWS_PROCESS_RESOURCE_MEMORY")]
    CONDITION_WINDOWS_PROCESS_RESOURCE_MEMORY = 81,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_MAC_PROCESS_STATE")]
    CONDITION_MAC_PROCESS_STATE = 82,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_MAC_PROCESS_RESOURCE_CPU")]
    CONDITION_MAC_PROCESS_RESOURCE_CPU = 83,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_MAC_PROCESS_RESOURCE_MEMORY")]
    CONDITION_MAC_PROCESS_RESOURCE_MEMORY = 84,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_MAC_DEAMON")]
    CONDITION_MAC_DEAMON = 85,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_CUSTOM_FIELD")]
    CONDITION_CUSTOM_FIELD = 86,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PENDING_REBOOT")]
    CONDITION_PENDING_REBOOT = 87,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NodeWithDetailedReferencesNodeClass
  {

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_SERVER")]
    WINDOWS_SERVER = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_WORKSTATION")]
    WINDOWS_WORKSTATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_WORKSTATION")]
    LINUX_WORKSTATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC")]
    MAC = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ANDROID")]
    ANDROID = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IOS")]
    APPLE_IOS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IPADOS")]
    APPLE_IPADOS = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_HOST")]
    VMWARE_VM_HOST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_GUEST")]
    VMWARE_VM_GUEST = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_HOST")]
    HYPERV_VMM_HOST = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_GUEST")]
    HYPERV_VMM_GUEST = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_SERVER")]
    LINUX_SERVER = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_SERVER")]
    MAC_SERVER = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUD_MONITOR_TARGET")]
    CLOUD_MONITOR_TARGET = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SWITCH")]
    NMS_SWITCH = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_ROUTER")]
    NMS_ROUTER = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_FIREWALL")]
    NMS_FIREWALL = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRIVATE_NETWORK_GATEWAY")]
    NMS_PRIVATE_NETWORK_GATEWAY = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRINTER")]
    NMS_PRINTER = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SCANNER")]
    NMS_SCANNER = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_DIAL_MANAGER")]
    NMS_DIAL_MANAGER = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_WAP")]
    NMS_WAP = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_IPSLA")]
    NMS_IPSLA = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_COMPUTER")]
    NMS_COMPUTER = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VM_HOST")]
    NMS_VM_HOST = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_APPLIANCE")]
    NMS_APPLIANCE = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_OTHER")]
    NMS_OTHER = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SERVER")]
    NMS_SERVER = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PHONE")]
    NMS_PHONE = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VIRTUAL_MACHINE")]
    NMS_VIRTUAL_MACHINE = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_NETWORK_MANAGEMENT_AGENT")]
    NMS_NETWORK_MANAGEMENT_AGENT = 30,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NodeWithDetailedReferencesApprovalStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
    PENDING = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
    APPROVED = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum JobSourceType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"AGENT_OFFLINE")]
    AGENT_OFFLINE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_CPU")]
    CONDITION_AGENT_CPU = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_MEMORY")]
    CONDITION_AGENT_MEMORY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_NETWORK")]
    CONDITION_AGENT_NETWORK = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_DISK_IO")]
    CONDITION_AGENT_DISK_IO = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_DISK_FREE_SPACE")]
    CONDITION_AGENT_DISK_FREE_SPACE = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_DISK_USAGE")]
    CONDITION_AGENT_DISK_USAGE = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_CVSS_SCORE")]
    CONDITION_AGENT_CVSS_SCORE = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_AGENT_PATCH_LAST_INSTALLED")]
    CONDITION_AGENT_PATCH_LAST_INSTALLED = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_CPU")]
    CONDITION_NMS_CPU = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_MEMORY")]
    CONDITION_NMS_MEMORY = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_NETWORK_TRAFFIC_BITS")]
    CONDITION_NMS_NETWORK_TRAFFIC_BITS = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_NETWORK_TRAFFIC_PERCENT")]
    CONDITION_NMS_NETWORK_TRAFFIC_PERCENT = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_NETWORK_STATUS")]
    CONDITION_NMS_NETWORK_STATUS = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_NMS_NETWORK_STATUS_CHANGE")]
    CONDITION_NMS_NETWORK_STATUS_CHANGE = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PING")]
    CONDITION_PING = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PING_LATENCY")]
    CONDITION_PING_LATENCY = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PING_PACKET_LOSS")]
    CONDITION_PING_PACKET_LOSS = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PING_RESPONSE")]
    CONDITION_PING_RESPONSE = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SYSTEM_UPTIME")]
    CONDITION_SYSTEM_UPTIME = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SMART_STATUS_DEGRATED")]
    CONDITION_SMART_STATUS_DEGRATED = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_RAID_HEALTH_STATUS")]
    CONDITION_RAID_HEALTH_STATUS = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SCRIPT_RESULT")]
    CONDITION_SCRIPT_RESULT = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_HTTP")]
    CONDITION_HTTP = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_HTTP_RESPONSE")]
    CONDITION_HTTP_RESPONSE = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PORT")]
    CONDITION_PORT = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PORT_SCAN")]
    CONDITION_PORT_SCAN = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SYSLOG")]
    CONDITION_SYSLOG = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_CONFIGURATION_FILE")]
    CONDITION_CONFIGURATION_FILE = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SNMPTRAP")]
    CONDITION_SNMPTRAP = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_CRITICAL_EVENT")]
    CONDITION_CRITICAL_EVENT = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_DNS")]
    CONDITION_DNS = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_EMAIL")]
    CONDITION_EMAIL = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_CUSTOM_SNMP")]
    CONDITION_CUSTOM_SNMP = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_BACKUPJOB_CREATE")]
    SHADOWPROTECT_BACKUPJOB_CREATE = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_BACKUPJOB_UPDATE")]
    SHADOWPROTECT_BACKUPJOB_UPDATE = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_BACKUPJOB_DELETE")]
    SHADOWPROTECT_BACKUPJOB_DELETE = 36,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT_BACKUPJOB_EXECUTE")]
    SHADOWPROTECT_BACKUPJOB_EXECUTE = 37,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_MANAGEDFOLDER_CREATE")]
    IMAGEMANAGER_MANAGEDFOLDER_CREATE = 38,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_MANAGEDFOLDER_UPDATE")]
    IMAGEMANAGER_MANAGEDFOLDER_UPDATE = 39,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_MANAGEDFOLDER_DELETE")]
    IMAGEMANAGER_MANAGEDFOLDER_DELETE = 40,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER_MANAGEDFOLDER_EXECUTE")]
    IMAGEMANAGER_MANAGEDFOLDER_EXECUTE = 41,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER_CONNECTION")]
    TEAMVIEWER_CONNECTION = 42,

    [System.Runtime.Serialization.EnumMember(Value = @"RETRIEVE_AGENT_LOGS")]
    RETRIEVE_AGENT_LOGS = 43,

    [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED_TASK")]
    SCHEDULED_TASK = 44,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_WINDOWS_EVENT_LOG_TRIGGERED")]
    CONDITION_WINDOWS_EVENT_LOG_TRIGGERED = 45,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_WINDOWS_SERVICE_STATE_CHANGED")]
    CONDITION_WINDOWS_SERVICE_STATE_CHANGED = 46,

    [System.Runtime.Serialization.EnumMember(Value = @"UI_MESSAGE_ACTION_REBOOT")]
    UI_MESSAGE_ACTION_REBOOT = 47,

    [System.Runtime.Serialization.EnumMember(Value = @"UI_MESSAGE_BD_INSTALLATION_ISSUES")]
    UI_MESSAGE_BD_INSTALLATION_ISSUES = 48,

    [System.Runtime.Serialization.EnumMember(Value = @"GRAVITYZONE_UI_MESSAGE_INSTALLATION_ISSUES")]
    GRAVITYZONE_UI_MESSAGE_INSTALLATION_ISSUES = 49,

    [System.Runtime.Serialization.EnumMember(Value = @"AV_QUARANTINE_THREAT")]
    AV_QUARANTINE_THREAT = 50,

    [System.Runtime.Serialization.EnumMember(Value = @"AV_RESTORE_THREAT")]
    AV_RESTORE_THREAT = 51,

    [System.Runtime.Serialization.EnumMember(Value = @"AV_DELETE_THREAT")]
    AV_DELETE_THREAT = 52,

    [System.Runtime.Serialization.EnumMember(Value = @"AV_REMOVE_THREAT")]
    AV_REMOVE_THREAT = 53,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_RESTORE_THREAT")]
    BITDEFENDER_RESTORE_THREAT = 54,

    [System.Runtime.Serialization.EnumMember(Value = @"BITDEFENDER_DELETE_THREAT")]
    BITDEFENDER_DELETE_THREAT = 55,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_BITLOCKER_STATUS")]
    CONDITION_BITLOCKER_STATUS = 56,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_FILEVAULT_STATUS")]
    CONDITION_FILEVAULT_STATUS = 57,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_PROCESS")]
    CONDITION_LINUX_PROCESS = 58,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_Daemon")]
    CONDITION_LINUX_Daemon = 59,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_PROCESS_RESOURCE")]
    CONDITION_LINUX_PROCESS_RESOURCE = 60,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_PROCESS_RESOURCE_CPU")]
    CONDITION_LINUX_PROCESS_RESOURCE_CPU = 61,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_PROCESS_RESOURCE_MEMORY")]
    CONDITION_LINUX_PROCESS_RESOURCE_MEMORY = 62,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_DISK_FREE_SPACE")]
    CONDITION_LINUX_DISK_FREE_SPACE = 63,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_LINUX_DISK_USAGE")]
    CONDITION_LINUX_DISK_USAGE = 64,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_AGGREGATE_CPU_USAGE")]
    CONDITION_VM_AGGREGATE_CPU_USAGE = 65,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_DISK_USAGE")]
    CONDITION_VM_DISK_USAGE = 66,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_HOST_DATASTORE")]
    CONDITION_VM_HOST_DATASTORE = 67,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_HOST_UPTIME")]
    CONDITION_VM_HOST_UPTIME = 68,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_HOST_DEVICE_DOWN")]
    CONDITION_VM_HOST_DEVICE_DOWN = 69,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_HOST_BAD_SENSORS")]
    CONDITION_VM_HOST_BAD_SENSORS = 70,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_HOST_SENSOR_HEALTH")]
    CONDITION_VM_HOST_SENSOR_HEALTH = 71,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_GUEST_GUEST_OPERATIONAL_MODE")]
    CONDITION_VM_GUEST_GUEST_OPERATIONAL_MODE = 72,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_GUEST_SNAPSHOT_SIZE")]
    CONDITION_VM_GUEST_SNAPSHOT_SIZE = 73,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_GUEST_SNAPSHOT_LIFESPAN")]
    CONDITION_VM_GUEST_SNAPSHOT_LIFESPAN = 74,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_VM_GUEST_TOOLS_NOT_RUNNING")]
    CONDITION_VM_GUEST_TOOLS_NOT_RUNNING = 75,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_HV_GUEST_CHECKPOINT_SIZE")]
    CONDITION_HV_GUEST_CHECKPOINT_SIZE = 76,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_HV_GUEST_CHECKPOINT_LIFESPAN")]
    CONDITION_HV_GUEST_CHECKPOINT_LIFESPAN = 77,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_SOFTWARE")]
    CONDITION_SOFTWARE = 78,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_WINDOWS_PROCESS_STATE")]
    CONDITION_WINDOWS_PROCESS_STATE = 79,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_WINDOWS_PROCESS_RESOURCE_CPU")]
    CONDITION_WINDOWS_PROCESS_RESOURCE_CPU = 80,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_WINDOWS_PROCESS_RESOURCE_MEMORY")]
    CONDITION_WINDOWS_PROCESS_RESOURCE_MEMORY = 81,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_MAC_PROCESS_STATE")]
    CONDITION_MAC_PROCESS_STATE = 82,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_MAC_PROCESS_RESOURCE_CPU")]
    CONDITION_MAC_PROCESS_RESOURCE_CPU = 83,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_MAC_PROCESS_RESOURCE_MEMORY")]
    CONDITION_MAC_PROCESS_RESOURCE_MEMORY = 84,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_MAC_DEAMON")]
    CONDITION_MAC_DEAMON = 85,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_CUSTOM_FIELD")]
    CONDITION_CUSTOM_FIELD = 86,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_PENDING_REBOOT")]
    CONDITION_PENDING_REBOOT = 87,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum JobStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"START_REQUESTED")]
    START_REQUESTED = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
    STARTED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"IN_PROCESS")]
    IN_PROCESS = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
    COMPLETED = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CANCEL_REQUESTED")]
    CANCEL_REQUESTED = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
    CANCELLED = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"TRIGGERED")]
    TRIGGERED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"RESET")]
    RESET = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"ACKNOWLEDGED")]
    ACKNOWLEDGED = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
    DISABLED = 9,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum JobResult
  {

    [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
    SUCCESS = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FAILURE")]
    FAILURE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"UNSUPPORTED")]
    UNSUPPORTED = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"UNCOMPLETED")]
    UNCOMPLETED = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum JobType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ACTIONSET")]
    ACTIONSET = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"ACTION")]
    ACTION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION")]
    CONDITION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_ACTIONSET")]
    CONDITION_ACTIONSET = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"CONDITION_ACTION")]
    CONDITION_ACTION = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"ANTIVIRUS")]
    ANTIVIRUS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCH_MANAGEMENT")]
    PATCH_MANAGEMENT = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"TEAMVIEWER")]
    TEAMVIEWER = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"MONITOR")]
    MONITOR = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM")]
    SYSTEM = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"COMMENT")]
    COMMENT = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"SHADOWPROTECT")]
    SHADOWPROTECT = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"IMAGEMANAGER")]
    IMAGEMANAGER = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"HELP_REQUEST")]
    HELP_REQUEST = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_PATCH_MANAGEMENT")]
    SOFTWARE_PATCH_MANAGEMENT = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"SPLASHTOP")]
    SPLASHTOP = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY")]
    CLOUDBERRY = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUDBERRY_BACKUP")]
    CLOUDBERRY_BACKUP = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED_TASK")]
    SCHEDULED_TASK = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"RDP")]
    RDP = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"SCRIPTING")]
    SCRIPTING = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"SECURITY")]
    SECURITY = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_TOOLS")]
    REMOTE_TOOLS = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"VIRTUALIZATION")]
    VIRTUALIZATION = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"PSA")]
    PSA = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"MDM")]
    MDM = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_REMOTE")]
    NINJA_REMOTE = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_QUICK_CONNECT")]
    NINJA_QUICK_CONNECT = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"NINJA_NETWORK_DISCOVERY")]
    NINJA_NETWORK_DISCOVERY = 28,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum WindowsServiceStartType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"AUTO_START")]
    AUTO_START = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"AUTO_START_DELAYED")]
    AUTO_START_DELAYED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"BOOT_START")]
    BOOT_START = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DEMAND_START")]
    DEMAND_START = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
    DISABLED = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_START")]
    SYSTEM_START = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum WindowsServiceState
  {

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"STOPPED")]
    STOPPED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"START_PENDING")]
    START_PENDING = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
    RUNNING = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"STOP_PENDING")]
    STOP_PENDING = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"PAUSE_PENDING")]
    PAUSE_PENDING = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"PAUSED")]
    PAUSED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTINUE_PENDING")]
    CONTINUE_PENDING = 7,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum CredentialReferenceType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"SNMPV12C")]
    SNMPV12C = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"SNMPV3")]
    SNMPV3 = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"TELNET_SSH")]
    TELNET_SSH = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"NETWORK_LOCATION")]
    NETWORK_LOCATION = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ENCRYPTION_KEY")]
    ENCRYPTION_KEY = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"BASIC")]
    BASIC = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"SNMPV1")]
    SNMPV1 = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"SNMPV2")]
    SNMPV2 = 7,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum ScriptType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ACTION")]
    ACTION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"SCRIPT")]
    SCRIPT = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum WindowsServiceControlRequestAction
  {

    [System.Runtime.Serialization.EnumMember(Value = @"START")]
    START = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"PAUSE")]
    PAUSE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"STOP")]
    STOP = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"RESTART")]
    RESTART = 3,

  }

  /// <summary>
  /// List of features that will be disabled during maintenance
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DisabledFeatures
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ALERTS")]
    ALERTS = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"PATCHING")]
    PATCHING = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"AVSCANS")]
    AVSCANS = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TASKS")]
    TASKS = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UserType2
  {

    [System.Runtime.Serialization.EnumMember(Value = @"TECHNICIAN")]
    TECHNICIAN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"END_USER")]
    END_USER = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum UserInvitationStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"REGISTERED")]
    REGISTERED = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
    PENDING = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
    EXPIRED = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum OrganizationModelNodeApprovalMode
  {

    [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC")]
    AUTOMATIC = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
    MANUAL = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"REJECT")]
    REJECT = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum GenerateInstallerRequestDtoInstallerType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_MSI")]
    WINDOWS_MSI = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_DMG")]
    MAC_DMG = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_PKG")]
    MAC_PKG = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_DEB")]
    LINUX_DEB = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_RPM")]
    LINUX_RPM = 4,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributeValueUpdatedByInfoSource
  {

    [System.Runtime.Serialization.EnumMember(Value = @"API")]
    API = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"USER")]
    USER = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"SCRIPT")]
    SCRIPT = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NodeAttributesDetailedEntityType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum NodeAttributesDetailedDefinitionScope
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum ScopedAttributesScope
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum ScopedAttributesDetailedScope
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DeviceHealthSummaryAvInstallStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"REQUESTED")]
    REQUESTED = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOWNLOAD_STARTED")]
    DOWNLOAD_STARTED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"DOWNLOADED")]
    DOWNLOADED = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DOWNLOAD_FAILED")]
    DOWNLOAD_FAILED = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"INSTALL_STARTED")]
    INSTALL_STARTED = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"INSTALLED")]
    INSTALLED = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"INSTALL_FAILED")]
    INSTALL_FAILED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"UNINSTALL_REQUESTED")]
    UNINSTALL_REQUESTED = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"UNINSTALL_FAILED")]
    UNINSTALL_FAILED = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"UNINSTALLED")]
    UNINSTALLED = 9,

  }

  /// <summary>
  /// Integrated products' installation statuses
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum Anonymous
  {

    [System.Runtime.Serialization.EnumMember(Value = @"REQUESTED")]
    REQUESTED = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DOWNLOAD_STARTED")]
    DOWNLOAD_STARTED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"DOWNLOADED")]
    DOWNLOADED = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DOWNLOAD_FAILED")]
    DOWNLOAD_FAILED = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"INSTALL_STARTED")]
    INSTALL_STARTED = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"INSTALLED")]
    INSTALLED = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"INSTALL_FAILED")]
    INSTALL_FAILED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"UNINSTALL_REQUESTED")]
    UNINSTALL_REQUESTED = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"UNINSTALL_FAILED")]
    UNINSTALL_FAILED = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"UNINSTALLED")]
    UNINSTALLED = 9,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DeviceHealthSummaryHealthStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"HEALTHY")]
    HEALTHY = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"NEEDS_ATTENTION")]
    NEEDS_ATTENTION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"UNHEALTHY")]
    UNHEALTHY = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DeviceWindowsServiceStartType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"AUTO_START")]
    AUTO_START = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"AUTO_START_DELAYED")]
    AUTO_START_DELAYED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"BOOT_START")]
    BOOT_START = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DEMAND_START")]
    DEMAND_START = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
    DISABLED = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_START")]
    SYSTEM_START = 5,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DeviceWindowsServiceState
  {

    [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
    UNKNOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"STOPPED")]
    STOPPED = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"START_PENDING")]
    START_PENDING = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
    RUNNING = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"STOP_PENDING")]
    STOP_PENDING = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"PAUSE_PENDING")]
    PAUSE_PENDING = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"PAUSED")]
    PAUSED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CONTINUE_PENDING")]
    CONTINUE_PENDING = 7,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DeviceSearchMatchNodeClass
  {

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_SERVER")]
    WINDOWS_SERVER = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_WORKSTATION")]
    WINDOWS_WORKSTATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_WORKSTATION")]
    LINUX_WORKSTATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC")]
    MAC = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ANDROID")]
    ANDROID = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IOS")]
    APPLE_IOS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IPADOS")]
    APPLE_IPADOS = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_HOST")]
    VMWARE_VM_HOST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_GUEST")]
    VMWARE_VM_GUEST = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_HOST")]
    HYPERV_VMM_HOST = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_GUEST")]
    HYPERV_VMM_GUEST = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_SERVER")]
    LINUX_SERVER = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_SERVER")]
    MAC_SERVER = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUD_MONITOR_TARGET")]
    CLOUD_MONITOR_TARGET = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SWITCH")]
    NMS_SWITCH = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_ROUTER")]
    NMS_ROUTER = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_FIREWALL")]
    NMS_FIREWALL = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRIVATE_NETWORK_GATEWAY")]
    NMS_PRIVATE_NETWORK_GATEWAY = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRINTER")]
    NMS_PRINTER = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SCANNER")]
    NMS_SCANNER = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_DIAL_MANAGER")]
    NMS_DIAL_MANAGER = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_WAP")]
    NMS_WAP = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_IPSLA")]
    NMS_IPSLA = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_COMPUTER")]
    NMS_COMPUTER = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VM_HOST")]
    NMS_VM_HOST = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_APPLIANCE")]
    NMS_APPLIANCE = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_OTHER")]
    NMS_OTHER = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SERVER")]
    NMS_SERVER = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PHONE")]
    NMS_PHONE = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VIRTUAL_MACHINE")]
    NMS_VIRTUAL_MACHINE = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_NETWORK_MANAGEMENT_AGENT")]
    NMS_NETWORK_MANAGEMENT_AGENT = 30,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DeviceSearchMatchApprovalStatus
  {

    [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
    PENDING = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
    APPROVED = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributePublicApiDTOEntityType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"USER")]
    USER = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"TICKET")]
    TICKET = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
    DOCUMENT = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributePublicApiDTOScope
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_GLOBAL")]
    NODE_GLOBAL = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_ROLE")]
    NODE_ROLE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_CLASS")]
    NODE_CLASS = 2,

  }

  /// <summary>
  /// Definition Scope
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DefinitionScope
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NODE")]
    NODE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
    LOCATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
    ORGANIZATION = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributePublicApiDTOType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"DROPDOWN")]
    DROPDOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MULTI_SELECT")]
    MULTI_SELECT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKBOX")]
    CHECKBOX = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
    TEXT = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT_MULTILINE")]
    TEXT_MULTILINE = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT_ENCRYPTED")]
    TEXT_ENCRYPTED = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC")]
    NUMERIC = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"DECIMAL")]
    DECIMAL = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"DATE")]
    DATE = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"DATE_TIME")]
    DATE_TIME = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"TIME")]
    TIME = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
    ATTACHMENT = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_DROPDOWN")]
    NODE_DROPDOWN = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_MULTI_SELECT")]
    NODE_MULTI_SELECT = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DROPDOWN")]
    CLIENT_DROPDOWN = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_MULTI_SELECT")]
    CLIENT_MULTI_SELECT = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_LOCATION_DROPDOWN")]
    CLIENT_LOCATION_DROPDOWN = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_LOCATION_MULTI_SELECT")]
    CLIENT_LOCATION_MULTI_SELECT = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_DROPDOWN")]
    CLIENT_DOCUMENT_DROPDOWN = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_MULTI_SELECT")]
    CLIENT_DOCUMENT_MULTI_SELECT = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
    EMAIL = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"PHONE")]
    PHONE = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"IP_ADDRESS")]
    IP_ADDRESS = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"WYSIWYG")]
    WYSIWYG = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"URL")]
    URL = 24,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributePublicApiDTOEndUserPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"HIDDEN")]
    HIDDEN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"EDITABLE_OPTIONAL")]
    EDITABLE_OPTIONAL = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"EDITABLE_REQUIRED")]
    EDITABLE_REQUIRED = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributePublicApiDTOTechnicianPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"EDITABLE")]
    EDITABLE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 2,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributePublicApiDTOScriptPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"WRITE_ONLY")]
    WRITE_ONLY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_WRITE")]
    READ_WRITE = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributePublicApiDTOApiPermission
  {

    [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
    NONE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_ONLY")]
    READ_ONLY = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"WRITE_ONLY")]
    WRITE_ONLY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"READ_WRITE")]
    READ_WRITE = 3,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum PolicyInfoNodeClass
  {

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_SERVER")]
    WINDOWS_SERVER = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_WORKSTATION")]
    WINDOWS_WORKSTATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_WORKSTATION")]
    LINUX_WORKSTATION = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC")]
    MAC = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ANDROID")]
    ANDROID = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IOS")]
    APPLE_IOS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"APPLE_IPADOS")]
    APPLE_IPADOS = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_HOST")]
    VMWARE_VM_HOST = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"VMWARE_VM_GUEST")]
    VMWARE_VM_GUEST = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_HOST")]
    HYPERV_VMM_HOST = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"HYPERV_VMM_GUEST")]
    HYPERV_VMM_GUEST = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"LINUX_SERVER")]
    LINUX_SERVER = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"MAC_SERVER")]
    MAC_SERVER = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CLOUD_MONITOR_TARGET")]
    CLOUD_MONITOR_TARGET = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SWITCH")]
    NMS_SWITCH = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_ROUTER")]
    NMS_ROUTER = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_FIREWALL")]
    NMS_FIREWALL = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRIVATE_NETWORK_GATEWAY")]
    NMS_PRIVATE_NETWORK_GATEWAY = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PRINTER")]
    NMS_PRINTER = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SCANNER")]
    NMS_SCANNER = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_DIAL_MANAGER")]
    NMS_DIAL_MANAGER = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_WAP")]
    NMS_WAP = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_IPSLA")]
    NMS_IPSLA = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_COMPUTER")]
    NMS_COMPUTER = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VM_HOST")]
    NMS_VM_HOST = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_APPLIANCE")]
    NMS_APPLIANCE = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_OTHER")]
    NMS_OTHER = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_SERVER")]
    NMS_SERVER = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_PHONE")]
    NMS_PHONE = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_VIRTUAL_MACHINE")]
    NMS_VIRTUAL_MACHINE = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"NMS_NETWORK_MANAGEMENT_AGENT")]
    NMS_NETWORK_MANAGEMENT_AGENT = 30,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum AttributeDataType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"DROPDOWN")]
    DROPDOWN = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"MULTI_SELECT")]
    MULTI_SELECT = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CHECKBOX")]
    CHECKBOX = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
    TEXT = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT_MULTILINE")]
    TEXT_MULTILINE = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"TEXT_ENCRYPTED")]
    TEXT_ENCRYPTED = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC")]
    NUMERIC = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"DECIMAL")]
    DECIMAL = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"DATE")]
    DATE = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"DATE_TIME")]
    DATE_TIME = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"TIME")]
    TIME = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"ATTACHMENT")]
    ATTACHMENT = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_DROPDOWN")]
    NODE_DROPDOWN = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"NODE_MULTI_SELECT")]
    NODE_MULTI_SELECT = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DROPDOWN")]
    CLIENT_DROPDOWN = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_MULTI_SELECT")]
    CLIENT_MULTI_SELECT = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_LOCATION_DROPDOWN")]
    CLIENT_LOCATION_DROPDOWN = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_LOCATION_MULTI_SELECT")]
    CLIENT_LOCATION_MULTI_SELECT = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_DROPDOWN")]
    CLIENT_DOCUMENT_DROPDOWN = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_DOCUMENT_MULTI_SELECT")]
    CLIENT_DOCUMENT_MULTI_SELECT = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
    EMAIL = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"PHONE")]
    PHONE = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"IP_ADDRESS")]
    IP_ADDRESS = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"WYSIWYG")]
    WYSIWYG = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"URL")]
    URL = 24,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum SortByDirection
  {

    [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
    ASC = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
    DESC = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum TimerSettingsMode
  {

    [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
    MANUAL = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"AUTO_START")]
    AUTO_START = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
  internal class JsonInheritanceAttribute : System.Attribute
  {
    public JsonInheritanceAttribute(string key, System.Type type)
    {
      Key = key;
      Type = type;
    }

    public string Key { get; }

    public System.Type Type { get; }
  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
  {
    internal static readonly string DefaultDiscriminatorName = "discriminator";

    private readonly string _discriminatorName;

    [System.ThreadStatic]
    private static bool _isReading;

    [System.ThreadStatic]
    private static bool _isWriting;

    public JsonInheritanceConverter()
    {
      _discriminatorName = DefaultDiscriminatorName;
    }

    public JsonInheritanceConverter(string discriminatorName)
    {
      _discriminatorName = discriminatorName;
    }

    public string DiscriminatorName { get { return _discriminatorName; } }

    public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
    {
      try
      {
        _isWriting = true;

        var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
        jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
        writer.WriteToken(jObject.CreateReader());
      }
      finally
      {
        _isWriting = false;
      }
    }

    public override bool CanWrite
    {
      get
      {
        if (_isWriting)
        {
          _isWriting = false;
          return false;
        }
        return true;
      }
    }

    public override bool CanRead
    {
      get
      {
        if (_isReading)
        {
          _isReading = false;
          return false;
        }
        return true;
      }
    }

    public override bool CanConvert(System.Type objectType)
    {
      return true;
    }

    public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
    {
      var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
      if (jObject == null)
        return null;

      var discriminatorValue = jObject.GetValue(_discriminatorName);
      var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
      var subtype = GetObjectSubtype(objectType, discriminator);

      var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
      if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
      {
        jObject.Remove(_discriminatorName);
      }

      try
      {
        _isReading = true;
        return serializer.Deserialize(jObject.CreateReader(), subtype);
      }
      finally
      {
        _isReading = false;
      }
    }

    private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
    {
      foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
      {
        if (attribute.Key == discriminator)
          return attribute.Type;
      }

      return objectType;
    }

    private string GetSubtypeDiscriminator(System.Type objectType)
    {
      foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
      {
        if (attribute.Type == objectType)
          return attribute.Key;
      }

      return objectType.Name;
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class FileParameter
  {
    public FileParameter(System.IO.Stream data)
        : this(data, null, null)
    {
    }

    public FileParameter(System.IO.Stream data, string fileName)
        : this(data, fileName, null)
    {
    }

    public FileParameter(System.IO.Stream data, string fileName, string contentType)
    {
      Data = data;
      FileName = fileName;
      ContentType = contentType;
    }

    public System.IO.Stream Data { get; private set; }

    public string FileName { get; private set; }

    public string ContentType { get; private set; }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class FileResponse : System.IDisposable
  {
    private System.IDisposable _client;
    private System.IDisposable _response;

    public int StatusCode { get; private set; }

    public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    public System.IO.Stream Stream { get; private set; }

    public bool IsPartial
    {
      get { return StatusCode == 206; }
    }

    public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
    {
      StatusCode = statusCode;
      Headers = headers;
      Stream = stream;
      _client = client;
      _response = response;
    }

    public void Dispose()
    {
      Stream.Dispose();
      if (_response != null)
        _response.Dispose();
      if (_client != null)
        _client.Dispose();
    }
  }


  [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class NinjaOneException : System.Exception
  {
    public int StatusCode { get; private set; }

    public string Response { get; private set; }

    public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    public NinjaOneException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
    {
      StatusCode = statusCode;
      Response = response;
      Headers = headers;
    }

    public override string ToString()
    {
      return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class NinjaOneException<TResult> : NinjaOneException
  {
    public TResult Result { get; private set; }

    public NinjaOneException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
        : base(message, statusCode, response, headers, innerException)
    {
      Result = result;
    }
  }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
